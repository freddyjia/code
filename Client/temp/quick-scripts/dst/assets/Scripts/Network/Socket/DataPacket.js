
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Network/Socket/DataPacket.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0f2c3a4rqVJYYCDqmzl8Dgb', 'DataPacket');
// Scripts/Network/Socket/DataPacket.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Package = /** @class */ (function () {
    function Package() {
    }
    return Package;
}());
exports.Package = Package;
var DataPacket = /** @class */ (function () {
    function DataPacket() {
    }
    DataPacket.Packet = function (id, seq, data) {
        if (data == null) {
            data = new Uint8Array(0);
        }
        var lengthData = data.length;
        var length = lengthData + 18;
        var finalData = new Uint8Array(length);
        var msgType;
        if (id == 0 || id == 1) {
            msgType = 0;
        }
        else {
            msgType = 1;
        }
        var id1 = id & 255;
        var id2 = (id >> 8) & 255;
        var id3 = (id >> 16) & 255;
        var id4 = (id >> 24) & 255;
        var seq1 = seq & 255;
        var seq2 = (seq >> 8) & 255;
        var seq3 = (seq >> 16) & 255;
        var seq4 = (seq >> 24) & 255;
        var length1 = length & 255;
        var length2 = (length >> 8) & 255;
        var length3 = (length >> 16) & 255;
        var length4 = (length >> 24) & 255;
        var lengthData1 = lengthData & 255;
        var lengthData2 = (lengthData >> 8) & 255;
        var lengthData3 = (lengthData >> 16) & 255;
        var lengthData4 = (lengthData >> 24) & 255;
        var platform = 0;
        finalData[0] = length4;
        finalData[1] = length3;
        finalData[2] = length2;
        finalData[3] = length1;
        finalData[4] = msgType;
        finalData[5] = platform;
        finalData[6] = seq4;
        finalData[7] = seq3;
        finalData[8] = seq2;
        finalData[9] = seq1;
        finalData[10] = id4;
        finalData[11] = id3;
        finalData[12] = id2;
        finalData[13] = id1;
        finalData[14] = lengthData4;
        finalData[15] = lengthData3;
        finalData[16] = lengthData2;
        finalData[17] = lengthData1;
        finalData.set(data, 18);
        return finalData;
    };
    DataPacket.TryUnpacket = function (data) {
        if (data.length < 4) {
            return false;
        }
        var length = data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];
        if (data.length < length) {
            return false;
        }
        return true;
    };
    DataPacket.UnPacket = function (data, packageArray) {
        if (this.TryUnpacket(data) == false) {
            return data;
        }
        var length = data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];
        var msgType = data[4];
        var platform = data[5];
        var seq = data[6] << 24 | data[7] << 16 | data[8] << 8 | data[9];
        var msgID = data[10] << 24 | data[11] << 16 | data[12] << 8 | data[13];
        var lengthData = data[14] << 24 | data[15] << 16 | data[16] << 8 | data[17];
        // cc.error("UnPacket data " + data);
        // cc.error("UnPacket seq " + seq + " length " + length + " msgID " + msgID);
        var pack = new Package();
        pack.data = data.subarray(18, 18 + lengthData);
        // pack.length = length;
        pack.msgID = msgID;
        pack.seq = seq;
        packageArray.push(pack);
        if (data.length > length) {
            data = data.subarray(length, data.length - 1);
            return this.UnPacket(data, packageArray);
        }
        return new Uint8Array(0);
    };
    return DataPacket;
}());
exports.default = DataPacket;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTmV0d29ya1xcU29ja2V0XFxEYXRhUGFja2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7SUFBQTtJQU9BLENBQUM7SUFBRCxjQUFDO0FBQUQsQ0FQQSxBQU9DLElBQUE7QUFQWSwwQkFBTztBQVNwQjtJQUFBO0lBK0dBLENBQUM7SUE3R2lCLGlCQUFNLEdBQXBCLFVBQXFCLEVBQVMsRUFBQyxHQUFVLEVBQUMsSUFBZTtRQUVyRCxJQUFHLElBQUksSUFBSSxJQUFJLEVBQ2Y7WUFDSSxJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDNUI7UUFFRCxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzdCLElBQUksTUFBTSxHQUFHLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDN0IsSUFBSSxTQUFTLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkMsSUFBSSxPQUFjLENBQUM7UUFDbkIsSUFBRyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQ3JCO1lBQ0ksT0FBTyxHQUFHLENBQUMsQ0FBQztTQUNmO2FBRUQ7WUFDSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO1NBQ2Y7UUFFRCxJQUFJLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ25CLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUN4QixJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDekIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBRXpCLElBQUksSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDckIsSUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHLElBQUUs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LElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFDLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQztRQUM5Qyx3QkFBd0I7UUFDeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhCLElBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLEVBQ3ZCO1lBQ0ksSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDN0MsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBQyxZQUFZLENBQUMsQ0FBQztTQUMzQztRQUNELE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVMLGlCQUFDO0FBQUQsQ0EvR0EsQUErR0MsSUFBQSIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBQYWNrYWdlXG57XG4gICAgcHVibGljIG1zZ0lEOm51bWJlcjtcbiAgICAvLyBwdWJsaWMgbGVuZ3RoOm51bWJlcjtcbiAgICBwdWJsaWMgc2VxOm51bWJlcjtcbiAgICBwdWJsaWMgZGF0YTpVaW50OEFycmF5O1xuICAgIC8vIHB1YmxpYyBkYXRhUmVzdDpVaW50OEFycmF5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRhUGFja2V0XG57XG4gICAgcHVibGljIHN0YXRpYyBQYWNrZXQoaWQ6bnVtYmVyLHNlcTpudW1iZXIsZGF0YTpVaW50OEFycmF5KTpVaW50OEFycmF5XG4gICAge1xuICAgICAgICBpZihkYXRhID09IG51bGwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRhdGEgPSBuZXcgVWludDhBcnJheSgwKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbGV0IGxlbmd0aERhdGEgPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgbGV0IGxlbmd0aCA9IGxlbmd0aERhdGEgKyAxODtcbiAgICAgICAgbGV0IGZpbmFsRGF0YSA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgICAgIGxldCBtc2dUeXBlOm51bWJlcjtcbiAgICAgICAgaWYoaWQgPT0gMCB8fCBpZCA9PSAxKVxuICAgICAgICB7XG4gICAgICAgICAgICBtc2dUeXBlID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIG1zZ1R5cGUgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGlkMSA9IGlkICYgMjU1O1xuICAgICAgICBsZXQgaWQyID0gKGlkPj44KSAmIDI1NTtcbiAgICAgICAgbGV0IGlkMyA9IChpZD4+MTYpICYgMjU1O1xuICAgICAgICBsZXQgaWQ0ID0gKGlkPj4yNCkgJiAyNTU7XG5cbiAgICAgICAgbGV0IHNlcTEgPSBzZXEgJiAyNTU7XG4gICAgICAgIGxldCBzZXEyID0gKHNlcT4+OCkgJiAyNTU7XG4gICAgICAgIGxldCBzZXEzID0gKHNlcT4+MTYpICYgMjU1O1xuICAgICAgICBsZXQgc2VxNCA9IChzZXE+PjI0KSAmIDI1NTtcblxuICAgICAgICBsZXQgbGVuZ3RoMSA9IGxlbmd0aCAmIDI1NTtcbiAgICAgICAgbGV0IGxlbmd0aDIgPSAobGVuZ3RoPj44KSAmIDI1NTtcbiAgICAgICAgbGV0IGxlbmd0aDMgPSAobGVuZ3RoPj4xNikgJiAyNTU7XG4gICAgICAgIGxldCBsZW5ndGg0ID0gKGxlbmd0aD4+MjQpICYgMjU1O1xuXG4gICAgICAgIGxldCBsZW5ndGhEYXRhMSA9IGxlbmd0aERhdGEgJiAyNTU7XG4gICAgICAgIGxldCBsZW5ndGhEYXRhMiA9IChsZW5ndGhEYXRhPj44KSAmIDI1NTtcbiAgICAgICAgbGV0IGxlbmd0aERhdGEzID0gKGxlbmd0aERhdGE+PjE2KSAmIDI1NTtcbiAgICAgICAgbGV0IGxlbmd0aERhdGE0ID0gKGxlbmd0aERhdGE+PjI0KSAmIDI1NTtcblxuICAgICAgICBsZXQgcGxhdGZvcm0gPSAwO1xuXG4gICAgICAgIGZpbmFsRGF0YVswXSA9IGxlbmd0aDQ7XG4gICAgICAgIGZpbmFsRGF0YVsxXSA9IGxlbmd0aDM7XG4gICAgICAgIGZpbmFsRGF0YVsyXSA9IGxlbmd0aDI7XG4gICAgICAgIGZpbmFsRGF0YVszXSA9IGxlbmd0aDE7XG4gICAgICAgIGZpbmFsRGF0YVs0XSA9IG1zZ1R5cGU7XG4gICAgICAgIGZpbmFsRGF0YVs1XSA9IHBsYXRmb3JtO1xuICAgICAgICBmaW5hbERhdGFbNl0gPSBzZXE0O1xuICAgICAgICBmaW5hbERhdGFbN10gPSBzZXEzO1xuICAgICAgICBmaW5hbERhdGFbOF0gPSBzZXEyO1xuICAgICAgICBmaW5hbERhdGFbOV0gPSBzZXExO1xuICAgICAgICBmaW5hbERhdGFbMTBdID0gaWQ0O1xuICAgICAgICBmaW5hbERhdGFbMTFdID0gaWQzO1xuICAgICAgICBmaW5hbERhdGFbMTJdID0gaWQyO1xuICAgICAgICBmaW5hbERhdGFbMTNdID0gaWQxO1xuICAgICAgICBmaW5hbERhdGFbMTRdID0gbGVuZ3RoRGF0YTQ7XG4gICAgICAgIGZpbmFsRGF0YVsxNV0gPSBsZW5ndGhEYXRhMztcbiAgICAgICAgZmluYWxEYXRhWzE2XSA9IGxlbmd0aERhdGEyO1xuICAgICAgICBmaW5hbERhdGFbMTddID0gbGVuZ3RoRGF0YTE7XG4gICAgICAgIGZpbmFsRGF0YS5zZXQoZGF0YSwxOCk7XG5cbiAgICAgICAgcmV0dXJuIGZpbmFsRGF0YTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIFRyeVVucGFja2V0KGRhdGE6VWludDhBcnJheSk6Ym9vbGVhblxuICAgIHtcbiAgICAgICAgaWYoZGF0YS5sZW5ndGggPCA0KVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxlbmd0aCA9IGRhdGFbMF08PDI0IHwgZGF0YVsxXTw8MTYgfCBkYXRhWzJdPDw4IHwgZGF0YVszXTtcbiAgICAgICAgaWYoZGF0YS5sZW5ndGggPCBsZW5ndGgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIFVuUGFja2V0KGRhdGE6VWludDhBcnJheSxwYWNrYWdlQXJyYXk6QXJyYXk8UGFja2FnZT4pOlVpbnQ4QXJyYXlcbiAgICB7XG4gICAgICAgIGlmKHRoaXMuVHJ5VW5wYWNrZXQoZGF0YSkgPT0gZmFsc2UpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsZW5ndGggPSBkYXRhWzBdPDwyNCB8IGRhdGFbMV08PDE2IHwgZGF0YVsyXTw8OCB8IGRhdGFbM107XG4gICAgICAgIGxldCBtc2dUeXBlID0gZGF0YVs0XTtcbiAgICAgICAgbGV0IHBsYXRmb3JtID0gZGF0YVs1XTtcbiAgICAgICAgbGV0IHNlcSA9IGRhdGFbNl08PDI0IHwgZGF0YVs3XTw8MTYgfCBkYXRhWzhdPDw4IHwgZGF0YVs5XTtcbiAgICAgICAgbGV0IG1zZ0lEID0gZGF0YVsxMF08PDI0IHwgZGF0YVsxMV08PDE2IHwgZGF0YVsxMl08PDggfCBkYXRhWzEzXTtcbiAgICAgICAgbGV0IGxlbmd0aERhdGEgPSBkYXRhWzE0XTw8MjQgfCBkYXRhWzE1XTw8MTYgfCBkYXRhWzE2XTw8OCB8IGRhdGFbMTddO1xuICAgICAgICBcbiAgICAgICAgLy8gY2MuZXJyb3IoXCJVblBhY2tldCBkYXRhIFwiICsgZGF0YSk7XG4gICAgICAgIC8vIGNjLmVycm9yKFwiVW5QYWNrZXQgc2VxIFwiICsgc2VxICsgXCIgbGVuZ3RoIFwiICsgbGVuZ3RoICsgXCIgbXNnSUQgXCIgKyBtc2dJRCk7XG4gICAgICAgIGxldCBwYWNrOlBhY2thZ2UgPSBuZXcgUGFja2FnZSgpO1xuICAgICAgICBwYWNrLmRhdGEgPSBkYXRhLnN1YmFycmF5KDE4LDE4ICsgbGVuZ3RoRGF0YSk7XG4gICAgICAgIC8vIHBhY2subGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICBwYWNrLm1zZ0lEID0gbXNnSUQ7XG4gICAgICAgIHBhY2suc2VxID0gc2VxO1xuICAgICAgICBwYWNrYWdlQXJyYXkucHVzaChwYWNrKTtcblxuICAgICAgICBpZihkYXRhLmxlbmd0aCA+IGxlbmd0aClcbiAgICAgICAge1xuICAgICAgICAgICAgZGF0YSA9IGRhdGEuc3ViYXJyYXkobGVuZ3RoLGRhdGEubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5VblBhY2tldChkYXRhLHBhY2thZ2VBcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO1xuICAgIH1cblxufVxuIl19