
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__qc_index__.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}
require('./assets/Scripts/Components/ButtonListener');
require('./assets/Scripts/Components/EditBoxListener');
require('./assets/Scripts/Components/ListView');
require('./assets/Scripts/Components/PageViewListener');
require('./assets/Scripts/Components/QRCodeComponent');
require('./assets/Scripts/Components/ResizeComponent');
require('./assets/Scripts/Components/ScrollPage');
require('./assets/Scripts/Components/ScrollViewListener');
require('./assets/Scripts/Components/SliderListener');
require('./assets/Scripts/Components/TimerManager');
require('./assets/Scripts/Components/UIAnimation');
require('./assets/Scripts/Global/Global');
require('./assets/Scripts/Global/Language');
require('./assets/Scripts/Global/LocalStorageKey');
require('./assets/Scripts/JsTool/ClipboardJS');
require('./assets/Scripts/JsTool/ImageTool');
require('./assets/Scripts/JsTool/JSGenQrcode');
require('./assets/Scripts/JsTool/JSOpenUrl');
require('./assets/Scripts/JsTool/JsGetIP');
require('./assets/Scripts/JsTool/JsGetUrlParms');
require('./assets/Scripts/JsTool/LabelFunc');
require('./assets/Scripts/JsTool/NoSleep');
require('./assets/Scripts/JsTool/NoSleepJsTool');
require('./assets/Scripts/JsTool/qrcode');
require('./assets/Scripts/MVCFramework/Controller');
require('./assets/Scripts/MVCFramework/ControllerManager');
require('./assets/Scripts/MVCFramework/MVCFramework');
require('./assets/Scripts/MVCFramework/MessageCenter');
require('./assets/Scripts/MVCFramework/Model');
require('./assets/Scripts/MVCFramework/ModelManager');
require('./assets/Scripts/MVCFramework/View');
require('./assets/Scripts/MVCFramework/ViewManager');
require('./assets/Scripts/Main');
require('./assets/Scripts/Manager/AudioManager');
require('./assets/Scripts/Manager/UpdateBeat');
require('./assets/Scripts/Modules/Controllers/ControllerApp');
require('./assets/Scripts/Modules/Controllers/ControllerDialogNormal');
require('./assets/Scripts/Modules/Controllers/ControllerOpenNetworking');
require('./assets/Scripts/Modules/Controllers/ControllerToast');
require('./assets/Scripts/Modules/MVCRegister');
require('./assets/Scripts/Modules/MessageNames');
require('./assets/Scripts/Modules/Models/ModelApp');
require('./assets/Scripts/Modules/ViewConfigs');
require('./assets/Scripts/Modules/Views/PayEn/BankItem');
require('./assets/Scripts/Modules/Views/PayEn/BounsItem');
require('./assets/Scripts/Modules/Views/PayEn/UIItemDay');
require('./assets/Scripts/Modules/Views/ViewApp');
require('./assets/Scripts/Modules/Views/ViewDialogNormal');
require('./assets/Scripts/Modules/Views/ViewOpenNetworking');
require('./assets/Scripts/Modules/Views/ViewToast');
require('./assets/Scripts/Network/Http/HttpRequest');
require('./assets/Scripts/Network/Socket/DataPacket');
require('./assets/Scripts/Network/Socket/TCPNetwork');
require('./assets/Scripts/Network/Socket/TCPSendTaskManager');
require('./assets/Scripts/Network/Socket/TCPSession');
require('./assets/Scripts/Protos/Handshake');
require('./assets/Scripts/Protos/MessageDefine');
require('./assets/Scripts/Protos/MessageDefine_BankProxy');
require('./assets/Scripts/Protos/Ping');
require('./assets/Scripts/Protos/protobuf');
require('./assets/Scripts/Tools/AtlasFont');
require('./assets/Scripts/Tools/Bezier');
require('./assets/Scripts/Tools/Dialog');
require('./assets/Scripts/Tools/Extension');
require('./assets/Scripts/Tools/MD5');
require('./assets/Scripts/Tools/NodeUtil');
require('./assets/Scripts/Tools/OpenNetworkingUI');
require('./assets/Scripts/Tools/Random');
require('./assets/Scripts/Tools/SpriteUtil');
require('./assets/Scripts/Tools/Toast');
require('./assets/Scripts/Tools/UploadAnalytics');
require('./assets/Scripts/Tools/UploadIMG');
require('./assets/Scripts/Tools/Util');
require('./assets/Scripts/Tools/XTween/Base/XTweenCurv');
require('./assets/Scripts/Tools/XTween/Base/XTweenGlobal');
require('./assets/Scripts/Tools/XTween/Base/XTweenObserver');
require('./assets/Scripts/Tools/XTween/Base/XTweenUpdater');
require('./assets/Scripts/Tools/XTween/Base/XTweener');
require('./assets/Scripts/Tools/XTween/Base/XTweenerGroup');
require('./assets/Scripts/Tools/XTween/Base/XTweenerGroupQueueItem');
require('./assets/Scripts/Tools/XTween/Base/XTweenerIF');
require('./assets/Scripts/Tools/XTween/XTween');
require('./assets/Scripts/Tools/XTween/XTweenerAction');
require('./assets/Scripts/Tools/XTween/XTweenerColor');
require('./assets/Scripts/Tools/XTween/XTweenerPosition');
require('./assets/Scripts/Tools/XTween/XTweenerRotaion');
require('./assets/Scripts/Tools/XTween/XTweenerScale');
require('./assets/Scripts/Tools/XTween/XTweenerValue');
require('./assets/Scripts/Tools/XTween/XTweenerValueArray');
require('./assets/Scripts/Tools/XTween/XTweenerWorldPosition');
require('./assets/Scripts/Tools/ccC');
require('./assets/migration/use_v2.0.x_cc.Toggle_event');

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Modules/Views/ViewApp.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '52275M7iJ9N4ZbHZAuyXlAc', 'ViewApp');
// Scripts/Modules/Views/ViewApp.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Language_1 = require("../../Global/Language");
var ClipboardJS_1 = require("../../JsTool/ClipboardJS");
var View_1 = require("../../MVCFramework/View");
var Toast_1 = require("../../Tools/Toast");
var UploadIMG_1 = require("../../Tools/UploadIMG");
var BankItem_1 = require("./PayEn/BankItem");
var BounsItem_1 = require("./PayEn/BounsItem");
var ViewApp = /** @class */ (function (_super) {
    __extends(ViewApp, _super);
    function ViewApp() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isCan = false;
        return _this;
        // public InitDataPicker() {
        //     this.date = this.date ? this.date : new Date();
        //     this.year = this.date.getFullYear();
        //     this.month = this.date.getMonth();
        //     this.day = this.date.getDate();
        //     this.pfgListDay = [];
        //     for (let i = 0; i < 31; ++i) {
        //         let node = cc.instantiate(this.pfbDay);
        //         node.parent = this.ndDays;
        //         this.pfgListDay.push(node);
        //     }
        //     this.setDate(this.year, this.month, this.day)
        // }
        // private setDate(year, month, day) {
        //     this.date = new Date(year, month, day);
        //     this.year = this.date.getFullYear();
        //     this.month = this.date.getMonth();
        //     this.day = this.date.getDate();
        //     let wth = this.FindTransform("ndWeek").width / 7;
        //     let labelWth = this.FindTransform("lbDay0").width;
        //     for (let i = 0; i < 7; i++) {
        //         let daylabel = this.FindTransform("lbDay" + i);
        //         daylabel.x = i * wth + 50 - 7 * wth / 2;
        //     }
        //     this.updateDate();
        // }
        // private onClickLeft() {
        //     if (this.month > 0) {
        //         this.month -= 1;
        //     } else {
        //         this.month = 11;
        //         this.year -= 1;
        //     }
        //     this.date.setFullYear(this.year);
        //     this.date.setMonth(this.month);
        //     this.updateDate();
        // }
        // private onClickRight() {
        //     if (this.month < 11) {
        //         this.month += 1;
        //     } else {
        //         this.month = 0;
        //         this.year += 1;
        //     }
        //     this.date.setFullYear(this.year);
        //     this.date.setMonth(this.month);
        //     this.updateDate();
        // }
        // private updateDate() {
        //     this.lbYearMonth.string = cc.js.formatStr("%s年%s月", this.year, this.month + 1);
        //     cc.log(cc.js.formatStr("%s年%s月", this.year, this.month + 1))
        //     let date = new Date(this.year, this.month, 0);
        //     let totalDays = date.getDate();
        //     let fromWeek = date.getDay();
        //     for (let i = 0; i < this.pfgListDay.length; ++i) {
        //         let node = this.pfgListDay[i];
        //         if (i < totalDays) {
        //             node.width = this.ndDays.width / 7;
        //             node.active = true;
        //             let index = fromWeek + i;
        //             let row = Math.floor(index / 7);
        //             let col = index % 7;
        //             let x = -(this.ndDays.width - node.width) * 0.5 + col * node.width;
        //             let y = (this.ndDays.height - node.height) * 0.5 - row * node.height;
        //             node.setPosition(x, y);
        //             let dayScript: UIItemDay = new UIItemDay();
        //             dayScript.Init(node, i, i + 1, this.day === i + 1, (selIndex, selDay) => {
        //                 this.day = selDay;
        //                 cc.log("selDay", selDay);
        //                 this.updateDate();
        //             });
        //         } else {
        //             node.active = false;
        //         }
        //     }
        // }
    }
    ViewApp.prototype.SetSelfPlayerID = function (playerId) {
        this.selfPlayerId = playerId;
    };
    ViewApp.prototype.OnAwake = function () {
        this.ContentPanel = this.FindTransform("ContentPanel").getComponent(cc.Widget);
        this.RechargeCom = this.FindTransform("RechargeCom");
        this.RechargeInfoCom = this.FindTransform("RechargeInfoCom");
        this.RechargeHistoryCom = this.FindTransform("RechargeHistoryCom");
        this.editbox_imput = this.FindTransform("editbox_imput").getComponent(cc.EditBox);
        this.editbox_imput_beizhu = this.FindTransform("editbox_imputbeizhu").getComponent(cc.EditBox);
        this.bankItem = this.FindTransform("bankItem");
        this.BonusItem = this.FindTransform("Bouns");
        this.BankList = this.FindTransform("BankList").getChildByName("view").getChildByName("content");
        this.BonusList = this.FindTransform("BonusList").getChildByName("view").getChildByName("content");
        this.BtnUpload = this.FindTransform("BtnUpload");
        this.BtnSubmit_info = this.FindTransform("BtnSubmit_info");
        this.ndDays = this.FindTransform("ndDays");
        this.pfbDay = this.FindTransform("UIItemDay");
        this.lbYearMonth = this.FindTransform("lbYearMonth").getComponent(cc.Label);
        this.txt_info1 = this.FindTransform("txt_info1").getChildByName("text").getComponent(cc.Label);
        this.txt_info2 = this.FindTransform("txt_info2").getChildByName("text").getComponent(cc.Label);
        this.txt_info3 = this.FindTransform("txt_info3").getChildByName("text").getComponent(cc.Label);
        this.txt_info4 = this.FindTransform("txt_info4").getChildByName("text").getComponent(cc.Label);
        this.txt_info5 = this.FindTransform("txt_info5").getChildByName("text").getComponent(cc.Label);
        this.txt_info6 = this.FindTransform("txt_info6").getChildByName("text").getComponent(cc.Label);
        // Util.SetClickAction(this.FindTransform("btnLeft").getComponent(cc.Button), () => {
        //     this.onClickLeft();
        // })
        // Util.SetClickAction(this.FindTransform("btnRight").getComponent(cc.Button), () => {
        //     this.onClickRight();
        // })
        this.AdaptPhone();
    };
    ViewApp.prototype.AdaptPhone = function () {
        // iPhone刘海适配
        if (cc.sys.os == cc.sys.OS_IOS) {
            var screen = cc.view.getFrameSize();
            var screenRate = screen.height / screen.width;
            if (screenRate >= 1.99) {
                this.ContentPanel.top = 50;
            }
        }
    };
    //添加复制按钮
    ViewApp.prototype.addBtnCopyClick = function () {
        var _this = this;
        this.SetOnClick("btncopy1", function () {
            ClipboardJS_1.ClipboardJS.Copy(_this.txt_info1.string);
            Toast_1.default.Show(Language_1.default.CopySuccess);
        });
        this.SetOnClick("btncopy2", function () {
            ClipboardJS_1.ClipboardJS.Copy(_this.txt_info2.string);
            Toast_1.default.Show(Language_1.default.CopySuccess);
        });
        this.SetOnClick("btncopy3", function () {
            ClipboardJS_1.ClipboardJS.Copy(_this.txt_info3.string);
            Toast_1.default.Show(Language_1.default.CopySuccess);
        });
        this.SetOnClick("btncopy4", function () {
            ClipboardJS_1.ClipboardJS.Copy(_this.txt_info4.string);
            Toast_1.default.Show(Language_1.default.CopySuccess);
        });
        this.SetOnClick("btncopy5", function () {
            ClipboardJS_1.ClipboardJS.Copy(_this.txt_info5.string);
            Toast_1.default.Show(Language_1.default.CopySuccess);
        });
        this.SetOnClick("btncopy6", function () {
            ClipboardJS_1.ClipboardJS.Copy(_this.txt_info6.string);
            Toast_1.default.Show(Language_1.default.CopySuccess);
        });
        this.SetOnClick("btncopy7", function () {
            ClipboardJS_1.ClipboardJS.Copy(_this.txt_info7.string);
            Toast_1.default.Show(Language_1.default.CopySuccess);
        });
    };
    //充值金额获取
    ViewApp.prototype.GetEditBoxStr = function () {
        return this.editbox_imput.string;
    };
    ViewApp.prototype.GetEditBoxStrBeiZhu = function () {
        return this.editbox_imput_beizhu.string;
    };
    ViewApp.prototype.ShowComByType = function (type) {
        switch (type) {
            case 1:
                this.RechargeCom.active = true;
                this.RechargeInfoCom.active = false;
                this.RechargeHistoryCom.active = false;
                break;
            case 2:
                this.RechargeCom.active = false;
                this.RechargeInfoCom.active = true;
                this.RechargeHistoryCom.active = false;
                this.BtnUpload.active = true;
                break;
            case 3:
                this.RechargeCom.active = false;
                this.RechargeInfoCom.active = false;
                this.RechargeHistoryCom.active = true;
                break;
        }
    };
    //显示图片
    ViewApp.prototype.ShowImageUpload = function (data) {
        var ImageTest = this.FindTransform("ImgTest").getComponent(cc.Sprite);
        UploadIMG_1.default.showImage(data, ImageTest);
        this.BtnUpload.active = false;
    };
    ViewApp.prototype.UpdataPage = function (data) {
        //更新银行列表
        if (this.BankItems && this.BankItems.length > 0) {
            for (var i = 0; i < this.BankItems.length; i++) {
                var BanKItem_1 = this.BankItems[i];
                BanKItem_1.RemoveSelf();
            }
        }
        this.BankItems = [];
        //-------------------------
        for (var i = 0; i < data.bankTypes.length; i++) {
            var bankitem = cc.instantiate(this.bankItem);
            var _BankItem = new BankItem_1.default();
            _BankItem.Init(bankitem, i, function (banktype) {
                cc.log("bnakType" + banktype);
            });
            bankitem.parent = this.BankList;
            this.BankItems.push(_BankItem);
        }
        //更新Bonus列表
        if (this.BonusItems && this.BonusItems.length > 0) {
            for (var i = 0; i < this.BonusItems.length; i++) {
                var _BonusItem = this.BonusItems[i];
                _BonusItem.RemoveSelf();
            }
        }
        this.BonusItems = [];
        //---------------------------------
        for (var i = 0; i < 6; i++) {
            var bonusitem = cc.instantiate(this.BonusItem);
            var _BonusItem = new BounsItem_1.default();
            _BonusItem.Init(bonusitem, i, function (bounsNum) {
                cc.log("bounsNum" + bounsNum);
            });
            bonusitem.parent = this.BonusList;
            this.BonusItems.push(_BonusItem);
        }
    };
    ViewApp.prototype.ShowSubmitInfo = function (data) {
        this.txt_info1.string = data.name;
        this.txt_info2.string = data.cardNo;
        this.txt_info3.string = data.bankName;
        this.txt_info4.string = data.bankBranchName;
        this.txt_info5.string = data.depositAmount.toString();
        this.txt_info6.string = data.orderNo;
    };
    ViewApp.prototype.OnShowView = function () {
    };
    ViewApp.prototype.OnHideView = function () {
    };
    ViewApp.prototype.OnDestroy = function () {
    };
    ViewApp.prototype.SetEnableButton = function (bool) {
        this.isCan = bool;
    };
    ViewApp.prototype.GetEnableButton = function () {
        return this.isCan;
    };
    return ViewApp;
}(View_1.default));
exports.default = ViewApp;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/MD5.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ef27a1HbPRHdqN5sAsENkwy', 'MD5');
// Scripts/Tools/MD5.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MD5 = /** @class */ (function () {
    function MD5() {
        this.hexcase = 0; /* hex output format. 0 - lowercase; 1 - uppercase        */
        this.b64pad = ""; /* base-64 pad character. "=" for strict RFC compliance   */
    }
    /*
    * These are the privates you'll usually want to call
    * They take string arguments and return either hex or base-64 encoded strings
    */
    MD5.prototype.hex_md5 = function (s) { return this.rstr2hex(this.rstr_md5(this.str2rstr_utf8(s))); }; //这个函数就行了，
    MD5.prototype.b64_md5 = function (s) { return this.rstr2b64(this.rstr_md5(this.str2rstr_utf8(s))); };
    MD5.prototype.any_md5 = function (s, e) { return this.rstr2any(this.rstr_md5(this.str2rstr_utf8(s)), e); };
    MD5.prototype.hex_hmac_md5 = function (k, d) { return this.rstr2hex(this.rstr_hmac_md5(this.str2rstr_utf8(k), this.str2rstr_utf8(d))); };
    MD5.prototype.b64_hmac_md5 = function (k, d) { return this.rstr2b64(this.rstr_hmac_md5(this.str2rstr_utf8(k), this.str2rstr_utf8(d))); };
    MD5.prototype.any_hmac_md5 = function (k, d, e) { return this.rstr2any(this.rstr_hmac_md5(this.str2rstr_utf8(k), this.str2rstr_utf8(d)), e); };
    /*
    * Perform a simple self-test to see if the VM is working
    */
    MD5.prototype.md5_vm_test = function () {
        return this.hex_md5("abc").toLowerCase() == "900150983cd24fb0d6963f7d28e17f72";
    };
    /*
    * Calculate the MD5 of a raw string
    */
    MD5.prototype.rstr_md5 = function (s) {
        return this.binl2rstr(this.binl_md5(this.rstr2binl(s), s.length * 8));
    };
    /*
    * Calculate the HMAC-MD5, of a key and some data (raw strings)
    */
    MD5.prototype.rstr_hmac_md5 = function (key, data) {
        var bkey = this.rstr2binl(key);
        if (bkey.length > 16)
            bkey = this.binl_md5(bkey, key.length * 8);
        var ipad = Array(16), opad = Array(16);
        for (var i = 0; i < 16; i++) {
            ipad[i] = bkey[i] ^ 0x36363636;
            opad[i] = bkey[i] ^ 0x5C5C5C5C;
        }
        var hash = this.binl_md5(ipad.concat(this.rstr2binl(data)), 512 + data.length * 8);
        return this.binl2rstr(this.binl_md5(opad.concat(hash), 512 + 128));
    };
    /*
    * Convert a raw string to a hex string
    */
    MD5.prototype.rstr2hex = function (input) {
        try {
            this.hexcase;
        }
        catch (e) {
            this.hexcase = 0;
        }
        var hex_tab = this.hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
        var output = "";
        var x;
        for (var i = 0; i < input.length; i++) {
            x = input.charCodeAt(i);
            output += hex_tab.charAt((x >>> 4) & 0x0F)
                + hex_tab.charAt(x & 0x0F);
        }
        return output;
    };
    /*
    * Convert a raw string to a base-64 string
    */
    MD5.prototype.rstr2b64 = function (input) {
        try {
            this.b64pad;
        }
        catch (e) {
            this.b64pad = '';
        }
        var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var output = "";
        var len = input.length;
        for (var i = 0; i < len; i += 3) {
            var triplet = (input.charCodeAt(i) << 16)
                | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0)
                | (i + 2 < len ? input.charCodeAt(i + 2) : 0);
            for (var j = 0; j < 4; j++) {
                if (i * 8 + j * 6 > input.length * 8)
                    output += this.b64pad;
                else
                    output += tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);
            }
        }
        return output;
    };
    /*
    * Convert a raw string to an arbitrary string encoding
    */
    MD5.prototype.rstr2any = function (input, encoding) {
        var divisor = encoding.length;
        var i, j, q, x, quotient;
        /* Convert to an array of 16-bit big-endian values, forming the dividend */
        var dividend = Array(Math.ceil(input.length / 2));
        for (i = 0; i < dividend.length; i++) {
            dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
        }
        /*
        * Repeatedly perform a long division. The binary array forms the dividend,
        * the length of the encoding is the divisor. Once computed, the quotient
        * forms the dividend for the next step. All remainders are stored for later
        * use.
        */
        var full_length = Math.ceil(input.length * 8 /
            (Math.log(encoding.length) / Math.log(2)));
        var remainders = Array(full_length);
        for (j = 0; j < full_length; j++) {
            quotient = Array();
            x = 0;
            for (i = 0; i < dividend.length; i++) {
                x = (x << 16) + dividend[i];
                q = Math.floor(x / divisor);
                x -= q * divisor;
                if (quotient.length > 0 || q > 0)
                    quotient[quotient.length] = q;
            }
            remainders[j] = x;
            dividend = quotient;
        }
        /* Convert the remainders to the output string */
        var output = "";
        for (i = remainders.length - 1; i >= 0; i--)
            output += encoding.charAt(remainders[i]);
        return output;
    };
    /*
    * Encode a string as utf-8.
    * For efficiency, this assumes the input is valid utf-16.
    */
    MD5.prototype.str2rstr_utf8 = function (input) {
        var output = "";
        var i = -1;
        var x, y;
        while (++i < input.length) {
            /* Decode utf-16 surrogate pairs */
            x = input.charCodeAt(i);
            y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
            if (0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {
                x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
                i++;
            }
            /* Encode output as utf-8 */
            if (x <= 0x7F)
                output += String.fromCharCode(x);
            else if (x <= 0x7FF)
                output += String.fromCharCode(0xC0 | ((x >>> 6) & 0x1F), 0x80 | (x & 0x3F));
            else if (x <= 0xFFFF)
                output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F), 0x80 | ((x >>> 6) & 0x3F), 0x80 | (x & 0x3F));
            else if (x <= 0x1FFFFF)
                output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07), 0x80 | ((x >>> 12) & 0x3F), 0x80 | ((x >>> 6) & 0x3F), 0x80 | (x & 0x3F));
        }
        return output;
    };
    /*
    * Encode a string as utf-16
    */
    MD5.prototype.str2rstr_utf16le = function (input) {
        var output = "";
        for (var i = 0; i < input.length; i++)
            output += String.fromCharCode(input.charCodeAt(i) & 0xFF, (input.charCodeAt(i) >>> 8) & 0xFF);
        return output;
    };
    MD5.prototype.str2rstr_utf16be = function (input) {
        var output = "";
        for (var i = 0; i < input.length; i++)
            output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF, input.charCodeAt(i) & 0xFF);
        return output;
    };
    /*
    * Convert a raw string to an array of little-endian words
    * Characters >255 have their high-byte silently ignored.
    */
    MD5.prototype.rstr2binl = function (input) {
        var output = Array(input.length >> 2);
        for (var i = 0; i < output.length; i++)
            output[i] = 0;
        for (var i = 0; i < input.length * 8; i += 8)
            output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);
        return output;
    };
    /*
    * Convert an array of little-endian words to a string
    */
    MD5.prototype.binl2rstr = function (input) {
        var output = "";
        for (var i = 0; i < input.length * 32; i += 8)
            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
        return output;
    };
    /*
    * Calculate the MD5 of an array of little-endian words, and a bit length.
    */
    MD5.prototype.binl_md5 = function (x, len) {
        /* append padding */
        x[len >> 5] |= 0x80 << ((len) % 32);
        x[(((len + 64) >>> 9) << 4) + 14] = len;
        var a = 1732584193;
        var b = -271733879;
        var c = -1732584194;
        var d = 271733878;
        for (var i = 0; i < x.length; i += 16) {
            var olda = a;
            var oldb = b;
            var oldc = c;
            var oldd = d;
            a = this.md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
            d = this.md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
            c = this.md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
            b = this.md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
            a = this.md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
            d = this.md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
            c = this.md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
            b = this.md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
            a = this.md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
            d = this.md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
            c = this.md5_ff(c, d, a, b, x[i + 10], 17, -42063);
            b = this.md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
            a = this.md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
            d = this.md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
            c = this.md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
            b = this.md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
            a = this.md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
            d = this.md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
            c = this.md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
            b = this.md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
            a = this.md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
            d = this.md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
            c = this.md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
            b = this.md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
            a = this.md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
            d = this.md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
            c = this.md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
            b = this.md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
            a = this.md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
            d = this.md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
            c = this.md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
            b = this.md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
            a = this.md5_hh(a, b, c, d, x[i + 5], 4, -378558);
            d = this.md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
            c = this.md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
            b = this.md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
            a = this.md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
            d = this.md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
            c = this.md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
            b = this.md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
            a = this.md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
            d = this.md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
            c = this.md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
            b = this.md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
            a = this.md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
            d = this.md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
            c = this.md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
            b = this.md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
            a = this.md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
            d = this.md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
            c = this.md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
            b = this.md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
            a = this.md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
            d = this.md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
            c = this.md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
            b = this.md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
            a = this.md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
            d = this.md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
            c = this.md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
            b = this.md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
            a = this.md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
            d = this.md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
            c = this.md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
            b = this.md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
            a = this.safe_add(a, olda);
            b = this.safe_add(b, oldb);
            c = this.safe_add(c, oldc);
            d = this.safe_add(d, oldd);
        }
        return [a, b, c, d];
    };
    /*
    * These privates implement the four basic operations the algorithm uses.
    */
    MD5.prototype.md5_cmn = function (q, a, b, x, s, t) {
        return this.safe_add(this.bit_rol(this.safe_add(this.safe_add(a, q), this.safe_add(x, t)), s), b);
    };
    MD5.prototype.md5_ff = function (a, b, c, d, x, s, t) {
        return this.md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
    };
    MD5.prototype.md5_gg = function (a, b, c, d, x, s, t) {
        return this.md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
    };
    MD5.prototype.md5_hh = function (a, b, c, d, x, s, t) {
        return this.md5_cmn(b ^ c ^ d, a, b, x, s, t);
    };
    MD5.prototype.md5_ii = function (a, b, c, d, x, s, t) {
        return this.md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
    };
    /*
    * Add integers, wrapping at 2^32. This uses 16-bit operations internally
    * to work around bugs in some JS interpreters.
    */
    MD5.prototype.safe_add = function (x, y) {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
    };
    /*
    * Bitwise rotate a 32-bit number to the left.
    */
    MD5.prototype.bit_rol = function (num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
    };
    return MD5;
}());
exports.default = MD5;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/XTween.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '41898dzamJJ54cFWzjfpPvY', 'XTween');
// Scripts/Tools/XTween/XTween.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var XTweenerPosition_1 = require("./XTweenerPosition");
var XTweenerRotaion_1 = require("./XTweenerRotaion");
var XTweenCurv_1 = require("./Base/XTweenCurv");
var XTweenerScale_1 = require("./XTweenerScale");
var XTweenerGroup_1 = require("./Base/XTweenerGroup");
var XTweenerValue_1 = require("./XTweenerValue");
var XTweenerValueArray_1 = require("./XTweenerValueArray");
var XTweenerAction_1 = require("./XTweenerAction");
var XTweenerWorldPosition_1 = require("./XTweenerWorldPosition");
var XTween = /** @class */ (function () {
    function XTween() {
    }
    /**
     * 返回一个XTweener对象，可以放到group里或者手动调用play播放，不会自动播放
     * @param target node对象
     * @param startValue 可以传null
     * @param endValue 必须有值
     * @param duration 持续时间
     * @param playTimes 播放次数，默认是1
     * @param pingPong 默认false
     * @param curv 默认Liner
     * @param finishCallBack 默认为空
     * @param delay 默认0
     */
    XTween.DoMove = function (target, startValue, endValue, duration, playTimes, pingPong, curv, finishCallBack, delay) {
        if (playTimes === void 0) { playTimes = 1; }
        if (pingPong === void 0) { pingPong = false; }
        if (curv === void 0) { curv = XTweenCurv_1.XTweenCurvType.Liner; }
        if (finishCallBack === void 0) { finishCallBack = null; }
        if (delay === void 0) { delay = 0; }
        var tweener = new XTweenerPosition_1.default();
        tweener.Init(target, startValue, endValue, duration, playTimes, pingPong, curv);
        tweener.SetFinishCallback(finishCallBack);
        tweener.SetDelay(delay);
        return tweener;
    };
    /**
     * 返回一个XTweener对象，可以放到group里或者手动调用play播放，不会自动播放
     * @param target node对象
     * @param endPos 终点位置的node
     * @param offset 终点位置的偏移值
     * @param duration 持续时间
     * @param playTimes 播放次数，默认是1
     * @param pingPong 默认false
     * @param curv 默认Liner
     * @param finishCallBack 默认为空
     * @param delay 默认0
     */
    XTween.DoMoveWorldPos = function (target, endPos, offset, duration, playTimes, pingPong, curv, finishCallBack, delay) {
        if (playTimes === void 0) { playTimes = 1; }
        if (pingPong === void 0) { pingPong = false; }
        if (curv === void 0) { curv = XTweenCurv_1.XTweenCurvType.Liner; }
        if (finishCallBack === void 0) { finishCallBack = null; }
        if (delay === void 0) { delay = 0; }
        var tweener = new XTweenerWorldPosition_1.default();
        tweener.Init(target, endPos, offset, duration, playTimes, pingPong, curv);
        tweener.SetFinishCallback(finishCallBack);
        tweener.SetDelay(delay);
        return tweener;
    };
    /**
     * 返回一个XTweener对象，可以放到group里或者手动调用play播放，不会自动播放
     * @param target node对象
     * @param startValue 可以传null
     * @param endValue 必须有值
     * @param duration 持续时间
     * @param playTimes 播放次数，默认是1
     * @param pingPong 默认false
     * @param curv 默认Liner
     * @param finishCallBack 默认为空
     * @param delay 默认0
     */
    XTween.DoScale = function (target, startValue, endValue, duration, playTimes, pingPong, curv, finishCallBack, delay) {
        if (playTimes === void 0) { playTimes = 1; }
        if (pingPong === void 0) { pingPong = false; }
        if (curv === void 0) { curv = XTweenCurv_1.XTweenCurvType.Liner; }
        if (finishCallBack === void 0) { finishCallBack = null; }
        if (delay === void 0) { delay = 0; }
        var tweener = new XTweenerScale_1.default();
        tweener.Init(target, startValue, endValue, duration, playTimes, pingPong, curv);
        tweener.SetFinishCallback(finishCallBack);
        tweener.SetDelay(delay);
        return tweener;
    };
    /**
     * 返回一个XTweener对象，可以放到group里或者手动调用play播放，不会自动播放
     * @param target node对象
     * @param startValue 可以传null
     * @param endValue 必须有值
     * @param duration 持续时间
     * @param playTimes 播放次数，默认是1
     * @param pingPong 默认false
     * @param curv 默认Liner
     * @param finishCallBack 默认为空
     * @param delay 默认0
     */
    XTween.DoRotate = function (target, startValue, endValue, duration, playTimes, pingPong, curv, finishCallBack, delay) {
        if (playTimes === void 0) { playTimes = 1; }
        if (pingPong === void 0) { pingPong = false; }
        if (curv === void 0) { curv = XTweenCurv_1.XTweenCurvType.Liner; }
        if (finishCallBack === void 0) { finishCallBack = null; }
        if (delay === void 0) { delay = 0; }
        var tweener = new XTweenerRotaion_1.default();
        tweener.Init(target, startValue, endValue, duration, playTimes, pingPong, curv);
        tweener.SetFinishCallback(finishCallBack);
        tweener.SetDelay(delay);
        return tweener;
    };
    // public static DoColor(
    //     target:cc.Node,
    //     startValue:Array<number>,
    //     endValue:Array<number>,
    //     duration:number,
    //     playTimes:number=1,
    //     pingPong:boolean=false,
    //     curv=XTweenCurvType.Liner,
    //     finishCallBack=null,
    //     delay=0,
    //     ):XTweener
    // {
    //     let tweener = new XTweenerColor();
    //     tweener.Init(target,startValue,endValue,duration,playTimes,pingPong,curv);
    //     tweener.SetFinishCallback(finishCallBack);
    //     tweener.SetDelay(delay);
    //     return tweener;
    // }
    /**
     * 返回一个XTweener对象，可以放到group里或者手动调用play播放，不会自动播放
     * @param target 监测的node对象
     * @param vauleChangeCallback 当value改变时的回调
     * @param startValue 填null和0效果一样
     * @param endValue 必须有值
     * @param duration 持续时间
     * @param playTimes 播放次数，默认是1
     * @param pingPong 默认false
     * @param curv 默认Liner
     * @param finishCallBack 默认为空
     * @param delay 默认0
     */
    XTween.DoValue = function (target, vauleChangeCallback, startValue, endValue, duration, playTimes, pingPong, curv, finishCallBack, delay) {
        if (playTimes === void 0) { playTimes = 1; }
        if (pingPong === void 0) { pingPong = false; }
        if (curv === void 0) { curv = XTweenCurv_1.XTweenCurvType.Liner; }
        if (finishCallBack === void 0) { finishCallBack = null; }
        if (delay === void 0) { delay = 0; }
        var tweener = new XTweenerValue_1.default();
        tweener.Init(target, vauleChangeCallback, startValue, endValue, duration, playTimes, pingPong, curv);
        tweener.SetFinishCallback(finishCallBack);
        tweener.SetDelay(delay);
        return tweener;
    };
    /**
     * 和DoValue不同的地方就是传入的参数是数组，一般用于颜色变化这种需要多个数值变化的时候
     * @param target 监测的node对象
     * @param vauleChangeCallback 当value改变时的回调
     * @param startValue 填null和0效果一样
     * @param endValue 必须有值
     * @param duration 持续时间
     * @param playTimes 播放次数，默认是1
     * @param pingPong 默认false
     * @param curv 默认Liner
     * @param finishCallBack 默认为空
     * @param delay 默认0
     */
    XTween.DoValueArray = function (target, vauleChangeCallback, startValue, endValue, duration, playTimes, pingPong, curv, finishCallBack, delay) {
        if (playTimes === void 0) { playTimes = 1; }
        if (pingPong === void 0) { pingPong = false; }
        if (curv === void 0) { curv = XTweenCurv_1.XTweenCurvType.Liner; }
        if (finishCallBack === void 0) { finishCallBack = null; }
        if (delay === void 0) { delay = 0; }
        var tweener = new XTweenerValueArray_1.default();
        tweener.Init(target, vauleChangeCallback, startValue, endValue, duration, playTimes, pingPong, curv);
        tweener.SetFinishCallback(finishCallBack);
        tweener.SetDelay(delay);
        return tweener;
    };
    /**
     * 创建一个XTweenerGroup，用来做动画组完成复杂的动画
     */
    XTween.CreateXTweenerGroup = function () {
        var group = new XTweenerGroup_1.default();
        return group;
    };
    /**
     * 创建一个XTweenerAction，用来在tweener过程中插入执行一些事件，带有xtweener的一些特性
     * @param delay 默认0
     * @param action 事件
     */
    XTween.GetTweenerAction = function (delay, action) {
        var xTweenerAction = new XTweenerAction_1.default();
        xTweenerAction.SetDelay(delay);
        xTweenerAction.SetAction(action);
        return xTweenerAction;
    };
    return XTween;
}());
exports.default = XTween;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/MVCFramework/ViewManager.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c787bqsFYpA4a4bad8uB73e', 'ViewManager');
// Scripts/MVCFramework/ViewManager.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MVCRegister_1 = require("../Modules/MVCRegister");
var ViewConfigs_1 = require("../Modules/ViewConfigs");
var Util_1 = require("../Tools/Util");
var TimerManager_1 = require("../Components/TimerManager");
var XTween_1 = require("../Tools/XTween/XTween");
var ccC_1 = require("../Tools/ccC");
var XTweenCurv_1 = require("../Tools/XTween/Base/XTweenCurv");
// //UI节点上的gameobject名称
// enum LayerOrderName {
//     UINormal = "UINormal",
//     UIPopup = "UIPopup",
//     UITop = "UITop"
// };
var ViewManager = /** @class */ (function () {
    function ViewManager() {
    }
    ViewManager.Clean = function () {
        this.DestroyAllView();
        this.ClearAllViewStack();
        this.viewNormalPopupStackArray = [];
        // this.viewTopStackArray = [];
    };
    ViewManager.Init = function () {
        if (this.UINormal != null) {
            return;
        }
        var mainNode = cc.find("Main");
        cc.game.addPersistRootNode(mainNode);
        var canvasNode = cc.find("Canvas");
        cc.game.addPersistRootNode(canvasNode);
        this.UINormal = cc.find("Canvas/UINormal");
        this.UIPopup = cc.find("Canvas/UIPopup");
        this.UITop = cc.find("Canvas/UITop");
        this.UITopper = cc.find("Canvas/UITopper");
        this.bigLoading = cc.find("Canvas/UILoading/BigLoading");
        this.LoadingMask = cc.find("Canvas/UILoading/LoadingMask");
        this.Loading_LOGO = cc.find("Loading_LOGO", this.bigLoading).getComponent(cc.Sprite);
        this.spriteProgress = cc.find("Progress/SpriteProgress", this.bigLoading).getComponent(cc.Sprite);
        this.labelProgress = cc.find("Progress/LabelProgress", this.bigLoading).getComponent(cc.Label);
        this.LoadingEff = cc.find("LoadingEff", this.spriteProgress.node);
        this.smallLoading = cc.find("Canvas/UILoading/SmallLoading");
        this.loadingErr = cc.find("Canvas/UILoading/LoadingErr");
        this.Loading_LOGO.node.active = false;
    };
    ViewManager.SetTransformDic = function (node, dicTransforms) {
        dicTransforms[node.name] = node;
        for (var i = 0; i < node.childrenCount; i++) {
            this.SetTransformDic(node.children[i], dicTransforms);
        }
    };
    ViewManager.SetHideView = function (view) {
        if (view.isShow == false) {
            return;
        }
        if (view.node != null) {
            view.node.active = false;
        }
        view.isShow = false;
        if (view.onHideViewCallback != null) {
            view.onHideViewCallback();
        }
        view.OnHideView();
    };
    ViewManager.AllLoadFinish = function (view, getPrefabCallback, timerID) {
        var _this = this;
        TimerManager_1.default.GetInstance().DeleteTimer(timerID);
        TimerManager_1.default.GetInstance().CallActionDelay(function () {
            if (view.viewConfig.loadingStyle != ViewConfigs_1.LoadingStyle.None) {
                _this.bigLoading.active = false;
                _this.smallLoading.active = false;
            }
        }, 0.1, null, 0, 0, true);
        this.LoadingMask.active = false;
        if (view.viewConfig.loadingStyle == ViewConfigs_1.LoadingStyle.FullScreen) {
            // this.spriteProgress.fillStart = 1;
            // this.labelProgress.string = "100%";
            this.SetProgress(1);
        }
        if (view.layer == ViewConfigs_1.LayerOrderNum.UINormal) {
            view.node.setParent(this.UINormal);
        }
        else if (view.layer == ViewConfigs_1.LayerOrderNum.UIPopup) {
            view.node.setParent(this.UIPopup);
            //TODO: add mask
            ccC_1.default.loadRes("Prefab/ButtonMask", cc.Prefab, function (errloadMask, perfabMask) {
                if (errloadMask) {
                    cc.error("err  " + errloadMask.message || errloadMask);
                    return;
                }
                var nodeMask = cc.instantiate(perfabMask);
                nodeMask.setParent(view.node);
                nodeMask.setSiblingIndex(0);
                nodeMask.setPosition(0, 0);
                nodeMask.name = "PopUIMask";
                nodeMask.getComponent(cc.Widget).updateAlignment();
                Util_1.default.SetClickAction(nodeMask.getComponent(cc.Button), function () {
                    if (view.removeMaskClick == false)
                        view.Hide();
                });
            });
        }
        else if (view.layer == ViewConfigs_1.LayerOrderNum.UITop) {
            view.node.setParent(this.UITop);
        }
        else if (view.layer == ViewConfigs_1.LayerOrderNum.UITopper) {
            view.node.setParent(this.UITopper);
        }
        view.node.setPosition(0, 0);
        view.OnAwake();
        view.SetButtonClicks();
        getPrefabCallback(true, "");
        view.isLoadingAsync = false;
    };
    ViewManager.SetProgress = function (progress) {
        this.spriteProgress.fillStart = progress;
        this.labelProgress.string = (Math.floor(progress * 100)).toString() + "%";
        this.LoadingEff.position = new cc.Vec2(-378 + 756 * progress, 0);
    };
    ViewManager.CreateViewObj = function (view, getPrefabCallback) {
        var _this = this;
        view.isLoadingAsync = true;
        var timerID;
        if (view.viewConfig.loadingStyle != ViewConfigs_1.LoadingStyle.None) {
            this.LoadingMask.active = true;
            //加载1秒还没完成就需要显示加载条
            timerID = TimerManager_1.default.GetInstance().CallActionDelay(function () {
                if (view.isLoadingAsync == true) {
                    if (view.viewConfig.loadingStyle == ViewConfigs_1.LoadingStyle.FullScreen) {
                        _this.bigLoading.active = true;
                        // this.spriteProgress.fillStart = 0;
                        // this.labelProgress.string = "0%";
                        /*
                        var imagePath = "MainGame/textures/Login/DL_LOGO";
                        ccC.loadRes(imagePath, cc.SpriteFrame, (err: Error, texture: any) =>{
                            if (err) {
                                cc.error("err  " + err.message || err);
                                return;
                            }
                            this.Loading_LOGO.spriteFrame = texture;
                        });
                        */
                        _this.SetProgress(0);
                    }
                    else {
                        _this.smallLoading.active = true;
                    }
                }
            }, 1, null, 0, 0, true);
        }
        //view prefab占总加载比的最大比例
        var mainMaxProgress;
        mainMaxProgress = 0.9 / (view.dependentRes.length + 1);
        if (mainMaxProgress < 0.4) {
            mainMaxProgress = 0.4;
        }
        var mainProgress = 0;
        var dependentProgressDic = {};
        var finishStateDic = {};
        var currentProgress = 0;
        var progressAddTimer = null;
        //每个依赖占的比例
        var perMaxProgress = (0.9 - mainMaxProgress) / view.dependentRes.length;
        var funcCheckFinish = function () {
            var allfinish = true;
            for (var path in finishStateDic) {
                if (finishStateDic[path] == false) {
                    allfinish = false;
                    break;
                }
            }
            if (allfinish) {
                TimerManager_1.default.GetInstance().DeleteTimer(progressAddTimer);
                _this.AllLoadFinish(view, getPrefabCallback, timerID);
            }
        };
        var funcUpdateProgress = function () {
            if (view.viewConfig.loadingStyle == ViewConfigs_1.LoadingStyle.FullScreen) {
                var allDependentProgress = 0;
                for (var dependentPath in dependentProgressDic) {
                    allDependentProgress += dependentProgressDic[dependentPath];
                }
                var progress = allDependentProgress + mainProgress;
                if (progress > currentProgress) {
                    currentProgress = progress;
                }
                // this.spriteProgress.fillStart = currentProgress;
                // this.labelProgress.string = (Math.floor(currentProgress * 100)).toString() + "%";
                _this.SetProgress(currentProgress);
                if (currentProgress > 0.98) {
                    TimerManager_1.default.GetInstance().DeleteTimer(progressAddTimer);
                }
            }
        };
        var cnt = 0;
        if (view.viewConfig.loadingStyle == ViewConfigs_1.LoadingStyle.FullScreen) {
            progressAddTimer = TimerManager_1.default.GetInstance().CallActionDelay(function () {
                cnt++;
                var step = 0.1 / (cnt * cnt);
                if (step > 0.01) {
                    step = 0.01;
                }
                else if (step < 0.002) {
                    step = 0.002;
                }
                currentProgress += step;
                if (currentProgress > 0.95) {
                    currentProgress = 0.95;
                }
                funcUpdateProgress();
            }, 0.5, null, 120, 0, true);
        }
        var _loop_1 = function (i) {
            var dependentPath = view.dependentRes[i];
            dependentProgressDic[dependentPath] = 0;
            finishStateDic[dependentPath] = false;
            ccC_1.default.loadResProgressWithoutType(dependentPath, function (completedCount, totalCount, item) {
                dependentProgressDic[dependentPath] = perMaxProgress * completedCount / totalCount;
                if (view.isLoadingAsync == true)
                    funcUpdateProgress();
            }, function (err, perfab) {
                dependentProgressDic[dependentPath] = perMaxProgress;
                finishStateDic[dependentPath] = true;
                if (view.isLoadingAsync == true)
                    funcCheckFinish();
            });
        };
        for (var i = 0; i < view.dependentRes.length; i++) {
            _loop_1(i);
        }
        finishStateDic[view.viewConfig.prefabPath] = false;
        ccC_1.default.loadResProgress(view.viewConfig.prefabPath, cc.Prefab, function (completedCount, totalCount, item) {
            mainProgress = completedCount / totalCount * mainMaxProgress;
            if (view.isLoadingAsync == true)
                funcUpdateProgress();
        }, function (err, perfab) {
            if (err != null) {
                var errMsg = "加载 view prefab 错误:" + err.message;
                getPrefabCallback(false, errMsg);
                cc.error(errMsg);
                if (view.viewConfig.loadingStyle != ViewConfigs_1.LoadingStyle.None) {
                    _this.bigLoading.active = false;
                    _this.smallLoading.active = false;
                    _this.LoadingMask.active = false;
                }
                view.isLoadingAsync = false;
                _this.loadingErr.active = true;
                _this.loadingErr.opacity = 255;
                var tweener = XTween_1.default.DoValue(_this.loadingErr, function (value) {
                    _this.loadingErr.opacity = value * 255;
                }, 1, 0, 1, 1, false, XTweenCurv_1.XTweenCurvType.Liner, null, 2);
                tweener.SetFinishCallback(function () {
                    _this.loadingErr.active = false;
                });
                tweener.Play();
                return;
            }
            var node = cc.instantiate(perfab);
            node.name = view.name;
            view.node = node;
            _this.SetTransformDic(node, view.transformCache);
            _this.viewWithNodes.push(view);
            finishStateDic[view.viewConfig.prefabPath] = true;
            mainProgress = mainMaxProgress;
            funcCheckFinish();
        });
    };
    ViewManager.SetShowView = function (view, showviewCallback) {
        var funcCallback = function (success, errMsg) {
            if (success == true) {
                view.node.active = true;
                view.isShow = true;
                view.node.setSiblingIndex(view.node.parent.childrenCount - 1);
                showviewCallback(true, "");
                if (view.onShowViewCallback != null) {
                    view.onShowViewCallback();
                }
                view.OnShowView();
            }
            else {
                showviewCallback(false, errMsg);
            }
        };
        if (view.node == null) {
            this.CreateViewObj(view, funcCallback);
        }
        else {
            funcCallback(true, "");
        }
    };
    ViewManager.GetView = function (viewName) {
        var _this = this;
        var view = this.dicViews[viewName];
        if (view == null) {
            view = MVCRegister_1.MVCRegister.dicViews[viewName]();
            if (view == null) {
                cc.error("viewName " + viewName + " 未注册");
                return null;
            }
            this.dicViews[viewName] = view;
        }
        // let view = MVCRegister.dicViews[viewName]();
        // if(view == null)
        // {
        //     cc.error("viewName " + viewName + " 未注册");
        //     return null;
        // }
        view.name = viewName;
        view.showCallback = function (callback) {
            if (view.isShow == true) {
                callback(true, "");
                return;
            }
            // cc.error("viewName    " + viewName);
            var viewConfig = ViewConfigs_1.default.GetViewConfig(viewName);
            if (viewConfig == null) {
                var errMsg = "viewConfig 配置为空 viewName:" + viewName;
                callback(false, errMsg);
                cc.error(errMsg);
                return;
            }
            var lastView = null;
            if (_this.viewNormalPopupStackArray.length != 0) {
                lastView = _this.viewNormalPopupStackArray[_this.viewNormalPopupStackArray.length - 1];
            }
            view.viewConfig = viewConfig;
            view.layer = viewConfig.layer;
            _this.SetShowView(view, function (success, errMsg) {
                if (success == false) {
                    callback(false, errMsg);
                    return;
                }
                if (lastView != null && (view.layer == ViewConfigs_1.LayerOrderNum.UINormal || view.layer == ViewConfigs_1.LayerOrderNum.UIPopup)) {
                    _this.DeActiveViewFuncs(lastView);
                }
                if (view.layer == ViewConfigs_1.LayerOrderNum.UINormal) {
                    for (var i = _this.viewNormalPopupStackArray.length - 1; i >= 0; i--) {
                        var viewInStack = _this.viewNormalPopupStackArray[i];
                        if (viewInStack.isShow == true) {
                            _this.SetHideView(viewInStack);
                        }
                    }
                }
                else if (view.layer == ViewConfigs_1.LayerOrderNum.UIPopup) {
                    for (var i = _this.viewNormalPopupStackArray.length - 1; i >= 0; i--) {
                        var viewInStack = _this.viewNormalPopupStackArray[i];
                        if (viewInStack.isShow == true && viewInStack.layer == ViewConfigs_1.LayerOrderNum.UIPopup) {
                            _this.SetHideView(viewInStack);
                        }
                    }
                }
                if (view.layer == ViewConfigs_1.LayerOrderNum.UINormal || view.layer == ViewConfigs_1.LayerOrderNum.UIPopup) {
                    _this.viewNormalPopupStackArray.push(view);
                }
                else {
                    // this.viewTopStackArray.push(view);
                }
                if (view.layer == ViewConfigs_1.LayerOrderNum.UINormal || view.layer == ViewConfigs_1.LayerOrderNum.UIPopup) {
                    _this.ActiveViewFuncs(view);
                }
                callback(true, "");
                if (view.layer == ViewConfigs_1.LayerOrderNum.UIPopup) {
                    _this.DoAnimation(view);
                }
            });
        };
        view.hideCallback = function () {
            if (view.layer == ViewConfigs_1.LayerOrderNum.UINormal || view.layer == ViewConfigs_1.LayerOrderNum.UIPopup) {
                _this.DeActiveViewFuncs(view);
            }
            if (_this.viewNormalPopupStackArray.length == 1
                && view.layer != ViewConfigs_1.LayerOrderNum.UITop
                && view.layer != ViewConfigs_1.LayerOrderNum.UITopper) {
                return;
            }
            if (view.layer == ViewConfigs_1.LayerOrderNum.UINormal) {
                //如果view不在栈顶，就要先隐藏栈上的其他pop层view
                var deactivePop = false;
                if (_this.viewNormalPopupStackArray[_this.viewNormalPopupStackArray.length - 1] != view) {
                    for (var i = _this.viewNormalPopupStackArray.length - 1; i >= 0; i--) {
                        if (_this.viewNormalPopupStackArray[i] == view) {
                            break;
                        }
                        var popView = _this.viewNormalPopupStackArray[i];
                        if (deactivePop == false) {
                            deactivePop = true;
                            _this.DeActiveViewFuncs(popView);
                        }
                        _this.SetHideView(popView);
                        Util_1.default.RemoveArray(_this.viewNormalPopupStackArray, i);
                    }
                }
                _this.SetHideView(view);
                _this.viewNormalPopupStackArray.pop();
                for (var i = _this.viewNormalPopupStackArray.length - 1; i >= 0; i--) {
                    var viewInStack = _this.viewNormalPopupStackArray[i];
                    _this.SetShowView(viewInStack, function (success, errmsg) {
                        if (success == false) {
                            cc.error("显示失败1 errmsg " + errmsg);
                        }
                    });
                    if (viewInStack.layer == ViewConfigs_1.LayerOrderNum.UINormal)
                        break;
                }
            }
            else if (view.layer == ViewConfigs_1.LayerOrderNum.UIPopup) {
                _this.SetHideView(view);
                _this.viewNormalPopupStackArray.pop();
                var lastView = _this.viewNormalPopupStackArray[_this.viewNormalPopupStackArray.length - 1];
                //pop层的view消失  只会引起pop层的view的显示
                if (lastView.layer == ViewConfigs_1.LayerOrderNum.UIPopup) {
                    _this.SetShowView(lastView, function (success, errmsg) {
                        if (success == false) {
                            cc.error("显示失败2 errmsg " + errmsg);
                        }
                    });
                }
            }
            else {
                _this.SetHideView(view);
                // this.viewTopStackArray.pop();
            }
            if (view.layer == ViewConfigs_1.LayerOrderNum.UINormal || view.layer == ViewConfigs_1.LayerOrderNum.UIPopup) {
                var lastView = _this.viewNormalPopupStackArray[_this.viewNormalPopupStackArray.length - 1];
                _this.ActiveViewFuncs(lastView);
            }
        };
        return view;
    };
    ViewManager.DoAnimation = function (view) {
        var window = cc.find("Window", view.node);
        if (window == null) {
            window = cc.find("window", view.node);
        }
        if (window == null)
            return;
        window.scaleX = 0.8;
        window.scaleY = 0.8;
        var action = cc.sequence(cc.scaleTo(0.08, 1.1, 1.1), cc.scaleTo(0.08, 1, 1));
        window.runAction(action);
    };
    ViewManager.ActiveViewFuncs = function (view) {
        if (view.isFocus == true) {
            return;
        }
        view.isFocus = true;
        view.OnFocus();
    };
    ViewManager.DeActiveViewFuncs = function (view) {
        if (view.isFocus == false) {
            return;
        }
        view.isFocus = false;
        view.OnDisFocus();
    };
    ViewManager.SetViewDestroy = function (view) {
        // cc.error("SetViewDestroy " + view.name);
        if (view.node == null)
            return;
        this.SetHideView(view);
        view.OnDestroy();
        view.node.destroy();
        view.node = null;
    };
    ViewManager.DestroyAllView = function () {
        for (var i = 0; i < this.viewWithNodes.length; i++) {
            var view = this.viewWithNodes[i];
            // if(view.layer == LayerOrderNum.UITop)
            //     continue;
            var findUnDestroy = false;
            for (var j = 0; j < this.UnDestroyViews.length; j++) {
                if (view.name == this.UnDestroyViews[j]) {
                    findUnDestroy = true;
                    break;
                }
            }
            if (findUnDestroy == true) {
                continue;
            }
            else {
                this.SetViewDestroy(view);
            }
        }
    };
    ViewManager.ClearAllViewStack = function () {
        this.viewNormalPopupStackArray = [];
        for (var viewName in this.dicViews) {
            var findUnDestroy = false;
            for (var j = 0; j < this.UnDestroyViews.length; j++) {
                if (viewName == this.UnDestroyViews[j]) {
                    findUnDestroy = true;
                    break;
                }
            }
            //如果不在非删列表里就删掉
            if (findUnDestroy == false) {
                delete (this.dicViews[viewName]);
                this.dicViews[viewName] = null;
            }
        }
    };
    ViewManager.viewNormalPopupStackArray = [];
    // private static viewTopStackArray:Array<View> = [];
    ViewManager.UnDestroyViews = [MVCRegister_1.ViewNames.ViewToast, MVCRegister_1.ViewNames.ViewDialogNormal, MVCRegister_1.ViewNames.ViewOpenNetworking];
    ViewManager.dicViews = {};
    ViewManager.viewWithNodes = [];
    return ViewManager;
}());
exports.default = ViewManager;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Modules/Controllers/ControllerOpenNetworking.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '525c8rUmCFE3q41GjjtS8gs', 'ControllerOpenNetworking');
// Scripts/Modules/Controllers/ControllerOpenNetworking.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Controller_1 = require("../../MVCFramework/Controller");
var MessageNames_1 = require("../MessageNames");
var MVCRegister_1 = require("../MVCRegister");
var ControllerOpenNetworking = /** @class */ (function (_super) {
    __extends(ControllerOpenNetworking, _super);
    function ControllerOpenNetworking() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ControllerOpenNetworking.prototype.Init = function () {
    };
    ControllerOpenNetworking.prototype.OnReceiveMessage = function (msg, msgBody) {
        var _this = this;
        if (msg == MessageNames_1.default.OpenNetworkLoading) {
            if (this.view == null) {
                this.view = this.GetView(MVCRegister_1.ViewNames.ViewOpenNetworking);
            }
            if (msgBody["status"] == true) {
                this.view.Show(function () {
                    _this.view.Refresh(msgBody["content"]);
                });
            }
            else {
                this.view.Hide();
            }
        }
    };
    return ControllerOpenNetworking;
}(Controller_1.default));
exports.default = ControllerOpenNetworking;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTW9kdWxlc1xcQ29udHJvbGxlcnNcXENvbnRyb2xsZXJPcGVuTmV0d29ya2luZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0REFBdUQ7QUFDdkQsZ0RBQTJDO0FBRTNDLDhDQUEyQztBQUUzQztJQUFzRCw0Q0FBVTtJQUFoRTs7SUE4QkEsQ0FBQztJQTNCVSx1Q0FBSSxHQUFYO0lBR0EsQ0FBQztJQUVNLG1EQUFnQixHQUF2QixVQUF3QixHQUFVLEVBQUMsT0FBVztRQUE5QyxpQkFvQkM7UUFsQkcsSUFBRyxHQUFHLElBQUksc0JBQVksQ0FBQyxrQkFBa0IsRUFDekM7WUFDSSxJQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxFQUNwQjtnQkFDSSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQVMsQ0FBQyxrQkFBa0IsQ0FBdUIsQ0FBQzthQUNoRjtZQUNELElBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksRUFDNUI7Z0JBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7b0JBQ1gsS0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFDLENBQUMsQ0FBQyxDQUFDO2FBQ047aUJBRUQ7Z0JBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNwQjtTQUVKO0lBQ0wsQ0FBQztJQUVMLCtCQUFDO0FBQUQsQ0E5QkEsQUE4QkMsQ0E5QnFELG9CQUFVLEdBOEIvRCIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb250cm9sbGVyIGZyb20gXCIuLi8uLi9NVkNGcmFtZXdvcmsvQ29udHJvbGxlclwiO1xuaW1wb3J0IE1lc3NhZ2VOYW1lcyBmcm9tIFwiLi4vTWVzc2FnZU5hbWVzXCI7XG5pbXBvcnQgVmlld09wZW5OZXR3b3JraW5nIGZyb20gXCIuLi9WaWV3cy9WaWV3T3Blbk5ldHdvcmtpbmdcIjtcbmltcG9ydCB7IFZpZXdOYW1lcyB9IGZyb20gXCIuLi9NVkNSZWdpc3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250cm9sbGVyT3Blbk5ldHdvcmtpbmcgZXh0ZW5kcyBDb250cm9sbGVyIFxue1xuICAgIHByaXZhdGUgdmlldzpWaWV3T3Blbk5ldHdvcmtpbmc7XG4gICAgcHVibGljIEluaXQoKVxuICAgIHtcblxuICAgIH1cblxuICAgIHB1YmxpYyBPblJlY2VpdmVNZXNzYWdlKG1zZzpzdHJpbmcsbXNnQm9keTphbnkpXG4gICAge1xuICAgICAgICBpZihtc2cgPT0gTWVzc2FnZU5hbWVzLk9wZW5OZXR3b3JrTG9hZGluZylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYodGhpcy52aWV3ID09IG51bGwpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3ID0gdGhpcy5HZXRWaWV3KFZpZXdOYW1lcy5WaWV3T3Blbk5ldHdvcmtpbmcpIGFzIFZpZXdPcGVuTmV0d29ya2luZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG1zZ0JvZHlbXCJzdGF0dXNcIl0gPT0gdHJ1ZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuU2hvdygoKT0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuUmVmcmVzaChtc2dCb2R5W1wiY29udGVudFwiXSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LkhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfVxuXG59XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Network/Socket/TCPNetwork.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b221d8nw29BeIYwDPRT/9x5', 'TCPNetwork');
// Scripts/Network/Socket/TCPNetwork.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TCPSession_1 = require("./TCPSession");
// import Global from "../../Global/Global";
/*tcp对话编号 用SessionID来区分*/
var TCPSessionID;
(function (TCPSessionID) {
    TCPSessionID[TCPSessionID["Hall"] = 1] = "Hall";
    // Battle = 2,
})(TCPSessionID = exports.TCPSessionID || (exports.TCPSessionID = {}));
//管理session集合字典的单例 向外提供访问session的接口哦
var TCPNetwork = /** @class */ (function () {
    function TCPNetwork() {
        //回话字典
        this.sessions = {};
        //监听id
        this.listenID = 0;
        ///一个会话session绑定他的新gameType
        // public SetCurrentGameType(sessionID,gameType)
        // {
        //     if(this.sessions[sessionID] != null)
        //     {
        //         this.sessions[sessionID].SetCurrentGameType(gameType);
        //     }
        // }
        ///一个会话session刷新他的ip和port
        // public RefreshIPAndPort(sessionID,ip, port)
        // {
        //     if(this.sessions[sessionID] != null)
        //     {
        //         this.sessions[sessionID].RefreshIPAndPort(ip, port);
        //     }
        // }
        ///握手失败之后的重连操作(比如登陆)
        // public ReConnectWhenHandShakeFail(sessionID)
        // {
        //     if(this.sessions[sessionID] != null)
        //     {
        //         this.sessions[sessionID].ReConnectWhenHandShakeFail();
        //     }
        // }
        //设置
        // public SetUidToker(sessionID,uid,token)
        // {
        //     if(this.sessions[sessionID] != null)
        //     {
        //         this.sessions[sessionID].SetUidToker(uid,token);
        //     }
        // }
    }
    //
    TCPNetwork.GetInstance = function () {
        if (this.m_Instance == null) {
            this.m_Instance = new TCPNetwork();
        }
        return this.m_Instance;
    };
    //退出或者重登时候清理（关闭）玩家的网络session对话//
    TCPNetwork.prototype.Clean = function () {
        for (var sessionID in this.sessions) {
            this.sessions[sessionID].Clean();
        }
        this.sessions = {};
        this.listenID = 0;
    };
    //实例化session对话
    TCPNetwork.prototype.Init = function (sessionID) {
        if (this.sessions[sessionID] != null) {
            cc.error("sessionID " + sessionID + " 已经初始化");
            return;
        }
        this.sessions[sessionID] = new TCPSession_1.default();
        this.sessions[sessionID].Init(sessionID);
    };
    //连接服务器-》成功 失败回调。
    TCPNetwork.prototype.Connect = function (sessionID, ip, port, funcSuccess, funcFail) {
        // if(Global.showLog == true)
        //     cc.log("$$IP=" + ip + "PORT="+port);
        if (this.sessions[sessionID] != null) {
            this.sessions[sessionID].Connect(ip, port, funcSuccess, funcFail);
        }
    };
    //退出服务器->
    TCPNetwork.prototype.Disconnect = function (sessionID) {
        if (this.sessions[sessionID] != null) {
            this.sessions[sessionID].Disconnect();
        }
    };
    //双向协议(发送接收)(协议9003成功发送则会收到协议9003返回的数据)
    TCPNetwork.prototype.Send = function (sessionID, msgID, data, successCallback, failCallback, hideNetworkingLoading) {
        if (hideNetworkingLoading === void 0) { hideNetworkingLoading = false; }
        if (this.sessions[sessionID] != null) {
            this.sessions[sessionID].Send(msgID, data, successCallback, failCallback, hideNetworkingLoading);
        }
    };
    //根据小游戏类型==双向协议(发送接收)(协议9003成功发送则会收到协议9003返回的数据)
    // public SendWithGameType(gameType,sessionID,msgID,data,successCallback,failCallback = null,hideNetworkingLoading = false)
    // {
    //     if(this.sessions[sessionID] != null)
    //     {
    //         this.sessions[sessionID].SendWithGameType(gameType,msgID,data,successCallback,failCallback,hideNetworkingLoading);
    //     }
    // }
    //单向协议(只发送 不管接收)
    TCPNetwork.prototype.SendOneWay = function (sessionID, msgID, data) {
        if (this.sessions[sessionID] != null) {
            this.sessions[sessionID].SendOneWay(msgID, data);
        }
    };
    //根据小游戏类型==发送单向协议(只发送 不管接收)
    // public SendOneWayWithGameType(gameType,sessionID,msgID,data)
    // {
    //     if(this.sessions[sessionID] != null)
    //     {
    //         this.sessions[sessionID].SendOneWayWithGameType(gameType,msgID,data);
    //     }
    // }
    //某个session对话 监听某个协议id
    TCPNetwork.prototype.ListenMsg = function (sessionID, msgID, func) {
        if (this.sessions[sessionID] != null) {
            this.sessions[sessionID].ListenMsg(msgID, func);
        }
    };
    //根据游戏类型划分消息id//
    // public ListenMsgWithGameType(gameType,sessionID,msgID,func)
    // {
    //     if(this.sessions[sessionID] != null)
    //     {
    //         this.sessions[sessionID].ListenMsgWithGameType(gameType,msgID,func);
    //     }
    // }
    ///重新发送挂起来的消息？//
    TCPNetwork.prototype.ResendHangOnMsg = function (sessionID) {
        if (this.sessions[sessionID] != null) {
            this.sessions[sessionID].ResendHangOnMsg();
        }
    };
    return TCPNetwork;
}());
exports.default = TCPNetwork;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/JsTool/qrcode.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'deee9cBSTVIIYDbxheJKArK', 'qrcode');
// Scripts/JsTool/qrcode.js

"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

//---------------------------------------------------------------------
// QRCode for JavaScript
//
// Copyright (c) 2009 Kazuhiko Arase
//
// URL: http://www.d-project.com/
//
// Licensed under the MIT license:
//   http://www.opensource.org/licenses/mit-license.php
//
// The word "QR Code" is registered trademark of 
// DENSO WAVE INCORPORATED
//   http://www.denso-wave.com/qrcode/faqpatent-e.html
//
//---------------------------------------------------------------------
//---------------------------------------------------------------------
// QR8bitByte
//---------------------------------------------------------------------
(function () {
  'use strict';

  function QR8bitByte(data) {
    this.mode = QRMode.MODE_8BIT_BYTE;
    this.data = data;
  }

  QR8bitByte.prototype = {
    getLength: function getLength(buffer) {
      return this.data.length;
    },
    write: function write(buffer) {
      for (var i = 0; i < this.data.length; i++) {
        // not JIS ...
        buffer.put(this.data.charCodeAt(i), 8);
      }
    }
  }; //---------------------------------------------------------------------
  // QRCode
  //---------------------------------------------------------------------

  var QRCode = function QRCode(typeNumber, errorCorrectLevel) {
    this.typeNumber = typeNumber;
    this.errorCorrectLevel = errorCorrectLevel;
    this.modules = null;
    this.moduleCount = 0;
    this.dataCache = null;
    this.dataList = new Array();
  };

  if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === 'object' && module.exports) {
    module.exports = QRCode;
  }

  QRCode.prototype = {
    addData: function addData(data) {
      var newData = new QR8bitByte(data);
      this.dataList.push(newData);
      this.dataCache = null;
    },
    isDark: function isDark(row, col) {
      if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {
        throw new Error(row + "," + col);
      }

      return this.modules[row][col];
    },
    getModuleCount: function getModuleCount() {
      return this.moduleCount;
    },
    make: function make() {
      // Calculate automatically typeNumber if provided is < 1
      if (this.typeNumber < 1) {
        var typeNumber = 1;

        for (typeNumber = 1; typeNumber < 40; typeNumber++) {
          var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);
          var buffer = new QRBitBuffer();
          var totalDataCount = 0;

          for (var i = 0; i < rsBlocks.length; i++) {
            totalDataCount += rsBlocks[i].dataCount;
          }

          for (var i = 0; i < this.dataList.length; i++) {
            var data = this.dataList[i];
            buffer.put(data.mode, 4);
            buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber));
            data.write(buffer);
          }

          if (buffer.getLengthInBits() <= totalDataCount * 8) break;
        }

        this.typeNumber = typeNumber;
      }

      this.makeImpl(false, this.getBestMaskPattern());
    },
    makeImpl: function makeImpl(test, maskPattern) {
      this.moduleCount = this.typeNumber * 4 + 17;
      this.modules = new Array(this.moduleCount);

      for (var row = 0; row < this.moduleCount; row++) {
        this.modules[row] = new Array(this.moduleCount);

        for (var col = 0; col < this.moduleCount; col++) {
          this.modules[row][col] = null; //(col + row) % 3;
        }
      }

      this.setupPositionProbePattern(0, 0);
      this.setupPositionProbePattern(this.moduleCount - 7, 0);
      this.setupPositionProbePattern(0, this.moduleCount - 7);
      this.setupPositionAdjustPattern();
      this.setupTimingPattern();
      this.setupTypeInfo(test, maskPattern);

      if (this.typeNumber >= 7) {
        this.setupTypeNumber(test);
      }

      if (this.dataCache == null) {
        this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);
      }

      this.mapData(this.dataCache, maskPattern);
    },
    setupPositionProbePattern: function setupPositionProbePattern(row, col) {
      for (var r = -1; r <= 7; r++) {
        if (row + r <= -1 || this.moduleCount <= row + r) continue;

        for (var c = -1; c <= 7; c++) {
          if (col + c <= -1 || this.moduleCount <= col + c) continue;

          if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {
            this.modules[row + r][col + c] = true;
          } else {
            this.modules[row + r][col + c] = false;
          }
        }
      }
    },
    getBestMaskPattern: function getBestMaskPattern() {
      var minLostPoint = 0;
      var pattern = 0;

      for (var i = 0; i < 8; i++) {
        this.makeImpl(true, i);
        var lostPoint = QRUtil.getLostPoint(this);

        if (i == 0 || minLostPoint > lostPoint) {
          minLostPoint = lostPoint;
          pattern = i;
        }
      }

      return pattern;
    },
    createMovieClip: function createMovieClip(target_mc, instance_name, depth) {
      var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);
      var cs = 1;
      this.make();

      for (var row = 0; row < this.modules.length; row++) {
        var y = row * cs;

        for (var col = 0; col < this.modules[row].length; col++) {
          var x = col * cs;
          var dark = this.modules[row][col];

          if (dark) {
            qr_mc.beginFill(0, 100);
            qr_mc.moveTo(x, y);
            qr_mc.lineTo(x + cs, y);
            qr_mc.lineTo(x + cs, y + cs);
            qr_mc.lineTo(x, y + cs);
            qr_mc.endFill();
          }
        }
      }

      return qr_mc;
    },
    setupTimingPattern: function setupTimingPattern() {
      for (var r = 8; r < this.moduleCount - 8; r++) {
        if (this.modules[r][6] != null) {
          continue;
        }

        this.modules[r][6] = r % 2 == 0;
      }

      for (var c = 8; c < this.moduleCount - 8; c++) {
        if (this.modules[6][c] != null) {
          continue;
        }

        this.modules[6][c] = c % 2 == 0;
      }
    },
    setupPositionAdjustPattern: function setupPositionAdjustPattern() {
      var pos = QRUtil.getPatternPosition(this.typeNumber);

      for (var i = 0; i < pos.length; i++) {
        for (var j = 0; j < pos.length; j++) {
          var row = pos[i];
          var col = pos[j];

          if (this.modules[row][col] != null) {
            continue;
          }

          for (var r = -2; r <= 2; r++) {
            for (var c = -2; c <= 2; c++) {
              if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {
                this.modules[row + r][col + c] = true;
              } else {
                this.modules[row + r][col + c] = false;
              }
            }
          }
        }
      }
    },
    setupTypeNumber: function setupTypeNumber(test) {
      var bits = QRUtil.getBCHTypeNumber(this.typeNumber);

      for (var i = 0; i < 18; i++) {
        var mod = !test && (bits >> i & 1) == 1;
        this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;
      }

      for (var i = 0; i < 18; i++) {
        var mod = !test && (bits >> i & 1) == 1;
        this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;
      }
    },
    setupTypeInfo: function setupTypeInfo(test, maskPattern) {
      var data = this.errorCorrectLevel << 3 | maskPattern;
      var bits = QRUtil.getBCHTypeInfo(data); // vertical		

      for (var i = 0; i < 15; i++) {
        var mod = !test && (bits >> i & 1) == 1;

        if (i < 6) {
          this.modules[i][8] = mod;
        } else if (i < 8) {
          this.modules[i + 1][8] = mod;
        } else {
          this.modules[this.moduleCount - 15 + i][8] = mod;
        }
      } // horizontal


      for (var i = 0; i < 15; i++) {
        var mod = !test && (bits >> i & 1) == 1;

        if (i < 8) {
          this.modules[8][this.moduleCount - i - 1] = mod;
        } else if (i < 9) {
          this.modules[8][15 - i - 1 + 1] = mod;
        } else {
          this.modules[8][15 - i - 1] = mod;
        }
      } // fixed module


      this.modules[this.moduleCount - 8][8] = !test;
    },
    mapData: function mapData(data, maskPattern) {
      var inc = -1;
      var row = this.moduleCount - 1;
      var bitIndex = 7;
      var byteIndex = 0;

      for (var col = this.moduleCount - 1; col > 0; col -= 2) {
        if (col == 6) col--;

        while (true) {
          for (var c = 0; c < 2; c++) {
            if (this.modules[row][col - c] == null) {
              var dark = false;

              if (byteIndex < data.length) {
                dark = (data[byteIndex] >>> bitIndex & 1) == 1;
              }

              var mask = QRUtil.getMask(maskPattern, row, col - c);

              if (mask) {
                dark = !dark;
              }

              this.modules[row][col - c] = dark;
              bitIndex--;

              if (bitIndex == -1) {
                byteIndex++;
                bitIndex = 7;
              }
            }
          }

          row += inc;

          if (row < 0 || this.moduleCount <= row) {
            row -= inc;
            inc = -inc;
            break;
          }
        }
      }
    }
  };
  QRCode.PAD0 = 0xEC;
  QRCode.PAD1 = 0x11;

  QRCode.createData = function (typeNumber, errorCorrectLevel, dataList) {
    var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);
    var buffer = new QRBitBuffer();

    for (var i = 0; i < dataList.length; i++) {
      var data = dataList[i];
      buffer.put(data.mode, 4);
      buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber));
      data.write(buffer);
    } // calc num max data.


    var totalDataCount = 0;

    for (var i = 0; i < rsBlocks.length; i++) {
      totalDataCount += rsBlocks[i].dataCount;
    }

    if (buffer.getLengthInBits() > totalDataCount * 8) {
      throw new Error("code length overflow. (" + buffer.getLengthInBits() + ">" + totalDataCount * 8 + ")");
    } // end code


    if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
      buffer.put(0, 4);
    } // padding


    while (buffer.getLengthInBits() % 8 != 0) {
      buffer.putBit(false);
    } // padding


    while (true) {
      if (buffer.getLengthInBits() >= totalDataCount * 8) {
        break;
      }

      buffer.put(QRCode.PAD0, 8);

      if (buffer.getLengthInBits() >= totalDataCount * 8) {
        break;
      }

      buffer.put(QRCode.PAD1, 8);
    }

    return QRCode.createBytes(buffer, rsBlocks);
  };

  QRCode.createBytes = function (buffer, rsBlocks) {
    var offset = 0;
    var maxDcCount = 0;
    var maxEcCount = 0;
    var dcdata = new Array(rsBlocks.length);
    var ecdata = new Array(rsBlocks.length);

    for (var r = 0; r < rsBlocks.length; r++) {
      var dcCount = rsBlocks[r].dataCount;
      var ecCount = rsBlocks[r].totalCount - dcCount;
      maxDcCount = Math.max(maxDcCount, dcCount);
      maxEcCount = Math.max(maxEcCount, ecCount);
      dcdata[r] = new Array(dcCount);

      for (var i = 0; i < dcdata[r].length; i++) {
        dcdata[r][i] = 0xff & buffer.buffer[i + offset];
      }

      offset += dcCount;
      var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
      var rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);
      var modPoly = rawPoly.mod(rsPoly);
      ecdata[r] = new Array(rsPoly.getLength() - 1);

      for (var i = 0; i < ecdata[r].length; i++) {
        var modIndex = i + modPoly.getLength() - ecdata[r].length;
        ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;
      }
    }

    var totalCodeCount = 0;

    for (var i = 0; i < rsBlocks.length; i++) {
      totalCodeCount += rsBlocks[i].totalCount;
    }

    var data = new Array(totalCodeCount);
    var index = 0;

    for (var i = 0; i < maxDcCount; i++) {
      for (var r = 0; r < rsBlocks.length; r++) {
        if (i < dcdata[r].length) {
          data[index++] = dcdata[r][i];
        }
      }
    }

    for (var i = 0; i < maxEcCount; i++) {
      for (var r = 0; r < rsBlocks.length; r++) {
        if (i < ecdata[r].length) {
          data[index++] = ecdata[r][i];
        }
      }
    }

    return data;
  }; //---------------------------------------------------------------------
  // QRMode
  //---------------------------------------------------------------------


  var QRMode = {
    MODE_NUMBER: 1 << 0,
    MODE_ALPHA_NUM: 1 << 1,
    MODE_8BIT_BYTE: 1 << 2,
    MODE_KANJI: 1 << 3
  }; //---------------------------------------------------------------------
  // QRErrorCorrectLevel
  //---------------------------------------------------------------------

  var QRErrorCorrectLevel = {
    L: 1,
    M: 0,
    Q: 3,
    H: 2
  }; //---------------------------------------------------------------------
  // QRMaskPattern
  //---------------------------------------------------------------------

  var QRMaskPattern = {
    PATTERN000: 0,
    PATTERN001: 1,
    PATTERN010: 2,
    PATTERN011: 3,
    PATTERN100: 4,
    PATTERN101: 5,
    PATTERN110: 6,
    PATTERN111: 7
  }; //---------------------------------------------------------------------
  // QRUtil
  //---------------------------------------------------------------------

  var QRUtil = {
    PATTERN_POSITION_TABLE: [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]],
    G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,
    G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,
    G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,
    getBCHTypeInfo: function getBCHTypeInfo(data) {
      var d = data << 10;

      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
        d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);
      }

      return (data << 10 | d) ^ QRUtil.G15_MASK;
    },
    getBCHTypeNumber: function getBCHTypeNumber(data) {
      var d = data << 12;

      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
        d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);
      }

      return data << 12 | d;
    },
    getBCHDigit: function getBCHDigit(data) {
      var digit = 0;

      while (data != 0) {
        digit++;
        data >>>= 1;
      }

      return digit;
    },
    getPatternPosition: function getPatternPosition(typeNumber) {
      return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
    },
    getMask: function getMask(maskPattern, i, j) {
      switch (maskPattern) {
        case QRMaskPattern.PATTERN000:
          return (i + j) % 2 == 0;

        case QRMaskPattern.PATTERN001:
          return i % 2 == 0;

        case QRMaskPattern.PATTERN010:
          return j % 3 == 0;

        case QRMaskPattern.PATTERN011:
          return (i + j) % 3 == 0;

        case QRMaskPattern.PATTERN100:
          return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;

        case QRMaskPattern.PATTERN101:
          return i * j % 2 + i * j % 3 == 0;

        case QRMaskPattern.PATTERN110:
          return (i * j % 2 + i * j % 3) % 2 == 0;

        case QRMaskPattern.PATTERN111:
          return (i * j % 3 + (i + j) % 2) % 2 == 0;

        default:
          throw new Error("bad maskPattern:" + maskPattern);
      }
    },
    getErrorCorrectPolynomial: function getErrorCorrectPolynomial(errorCorrectLength) {
      var a = new QRPolynomial([1], 0);

      for (var i = 0; i < errorCorrectLength; i++) {
        a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));
      }

      return a;
    },
    getLengthInBits: function getLengthInBits(mode, type) {
      if (1 <= type && type < 10) {
        // 1 - 9
        switch (mode) {
          case QRMode.MODE_NUMBER:
            return 10;

          case QRMode.MODE_ALPHA_NUM:
            return 9;

          case QRMode.MODE_8BIT_BYTE:
            return 8;

          case QRMode.MODE_KANJI:
            return 8;

          default:
            throw new Error("mode:" + mode);
        }
      } else if (type < 27) {
        // 10 - 26
        switch (mode) {
          case QRMode.MODE_NUMBER:
            return 12;

          case QRMode.MODE_ALPHA_NUM:
            return 11;

          case QRMode.MODE_8BIT_BYTE:
            return 16;

          case QRMode.MODE_KANJI:
            return 10;

          default:
            throw new Error("mode:" + mode);
        }
      } else if (type < 41) {
        // 27 - 40
        switch (mode) {
          case QRMode.MODE_NUMBER:
            return 14;

          case QRMode.MODE_ALPHA_NUM:
            return 13;

          case QRMode.MODE_8BIT_BYTE:
            return 16;

          case QRMode.MODE_KANJI:
            return 12;

          default:
            throw new Error("mode:" + mode);
        }
      } else {
        throw new Error("type:" + type);
      }
    },
    getLostPoint: function getLostPoint(qrCode) {
      var moduleCount = qrCode.getModuleCount();
      var lostPoint = 0; // LEVEL1

      for (var row = 0; row < moduleCount; row++) {
        for (var col = 0; col < moduleCount; col++) {
          var sameCount = 0;
          var dark = qrCode.isDark(row, col);

          for (var r = -1; r <= 1; r++) {
            if (row + r < 0 || moduleCount <= row + r) {
              continue;
            }

            for (var c = -1; c <= 1; c++) {
              if (col + c < 0 || moduleCount <= col + c) {
                continue;
              }

              if (r == 0 && c == 0) {
                continue;
              }

              if (dark == qrCode.isDark(row + r, col + c)) {
                sameCount++;
              }
            }
          }

          if (sameCount > 5) {
            lostPoint += 3 + sameCount - 5;
          }
        }
      } // LEVEL2


      for (var row = 0; row < moduleCount - 1; row++) {
        for (var col = 0; col < moduleCount - 1; col++) {
          var count = 0;
          if (qrCode.isDark(row, col)) count++;
          if (qrCode.isDark(row + 1, col)) count++;
          if (qrCode.isDark(row, col + 1)) count++;
          if (qrCode.isDark(row + 1, col + 1)) count++;

          if (count == 0 || count == 4) {
            lostPoint += 3;
          }
        }
      } // LEVEL3


      for (var row = 0; row < moduleCount; row++) {
        for (var col = 0; col < moduleCount - 6; col++) {
          if (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {
            lostPoint += 40;
          }
        }
      }

      for (var col = 0; col < moduleCount; col++) {
        for (var row = 0; row < moduleCount - 6; row++) {
          if (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {
            lostPoint += 40;
          }
        }
      } // LEVEL4


      var darkCount = 0;

      for (var col = 0; col < moduleCount; col++) {
        for (var row = 0; row < moduleCount; row++) {
          if (qrCode.isDark(row, col)) {
            darkCount++;
          }
        }
      }

      var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
      lostPoint += ratio * 10;
      return lostPoint;
    }
  }; //---------------------------------------------------------------------
  // QRMath
  //---------------------------------------------------------------------

  var QRMath = {
    glog: function glog(n) {
      if (n < 1) {
        throw new Error("glog(" + n + ")");
      }

      return QRMath.LOG_TABLE[n];
    },
    gexp: function gexp(n) {
      while (n < 0) {
        n += 255;
      }

      while (n >= 256) {
        n -= 255;
      }

      return QRMath.EXP_TABLE[n];
    },
    EXP_TABLE: new Array(256),
    LOG_TABLE: new Array(256)
  };

  for (var i = 0; i < 8; i++) {
    QRMath.EXP_TABLE[i] = 1 << i;
  }

  for (var i = 8; i < 256; i++) {
    QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];
  }

  for (var i = 0; i < 255; i++) {
    QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;
  } //---------------------------------------------------------------------
  // QRPolynomial
  //---------------------------------------------------------------------


  function QRPolynomial(num, shift) {
    if (num.length == undefined) {
      throw new Error(num.length + "/" + shift);
    }

    var offset = 0;

    while (offset < num.length && num[offset] == 0) {
      offset++;
    }

    this.num = new Array(num.length - offset + shift);

    for (var i = 0; i < num.length - offset; i++) {
      this.num[i] = num[i + offset];
    }
  }

  QRPolynomial.prototype = {
    get: function get(index) {
      return this.num[index];
    },
    getLength: function getLength() {
      return this.num.length;
    },
    multiply: function multiply(e) {
      var num = new Array(this.getLength() + e.getLength() - 1);

      for (var i = 0; i < this.getLength(); i++) {
        for (var j = 0; j < e.getLength(); j++) {
          num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i)) + QRMath.glog(e.get(j)));
        }
      }

      return new QRPolynomial(num, 0);
    },
    mod: function mod(e) {
      if (this.getLength() - e.getLength() < 0) {
        return this;
      }

      var ratio = QRMath.glog(this.get(0)) - QRMath.glog(e.get(0));
      var num = new Array(this.getLength());

      for (var i = 0; i < this.getLength(); i++) {
        num[i] = this.get(i);
      }

      for (var i = 0; i < e.getLength(); i++) {
        num[i] ^= QRMath.gexp(QRMath.glog(e.get(i)) + ratio);
      } // recursive call


      return new QRPolynomial(num, 0).mod(e);
    }
  }; //---------------------------------------------------------------------
  // QRRSBlock
  //---------------------------------------------------------------------

  function QRRSBlock(totalCount, dataCount) {
    this.totalCount = totalCount;
    this.dataCount = dataCount;
  }

  QRRSBlock.RS_BLOCK_TABLE = [// L
  // M
  // Q
  // H
  // 1
  [1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], // 2
  [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], // 3
  [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], // 4		
  [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], // 5
  [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], // 6
  [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], // 7		
  [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], // 8
  [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], // 9
  [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], // 10		
  [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], // 11
  [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], // 12
  [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], // 13
  [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], // 14
  [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], // 15
  [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], // 16
  [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], // 17
  [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], // 18
  [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], // 19
  [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], // 20
  [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], // 21
  [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], // 22
  [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], // 23
  [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], // 24
  [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], // 25
  [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], // 26
  [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], // 27
  [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], // 28
  [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], // 29
  [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], // 30
  [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], // 31
  [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], // 32
  [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], // 33
  [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], // 34
  [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], // 35
  [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], // 36
  [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], // 37
  [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], // 38
  [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], // 39
  [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], // 40
  [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];

  QRRSBlock.getRSBlocks = function (typeNumber, errorCorrectLevel) {
    var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);

    if (rsBlock == undefined) {
      throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + errorCorrectLevel);
    }

    var length = rsBlock.length / 3;
    var list = new Array();

    for (var i = 0; i < length; i++) {
      var count = rsBlock[i * 3 + 0];
      var totalCount = rsBlock[i * 3 + 1];
      var dataCount = rsBlock[i * 3 + 2];

      for (var j = 0; j < count; j++) {
        list.push(new QRRSBlock(totalCount, dataCount));
      }
    }

    return list;
  };

  QRRSBlock.getRsBlockTable = function (typeNumber, errorCorrectLevel) {
    switch (errorCorrectLevel) {
      case QRErrorCorrectLevel.L:
        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];

      case QRErrorCorrectLevel.M:
        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];

      case QRErrorCorrectLevel.Q:
        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];

      case QRErrorCorrectLevel.H:
        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];

      default:
        return undefined;
    }
  }; //---------------------------------------------------------------------
  // QRBitBuffer
  //---------------------------------------------------------------------


  function QRBitBuffer() {
    this.buffer = new Array();
    this.length = 0;
  }

  QRBitBuffer.prototype = {
    get: function get(index) {
      var bufIndex = Math.floor(index / 8);
      return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;
    },
    put: function put(num, length) {
      for (var i = 0; i < length; i++) {
        this.putBit((num >>> length - i - 1 & 1) == 1);
      }
    },
    getLengthInBits: function getLengthInBits() {
      return this.length;
    },
    putBit: function putBit(bit) {
      var bufIndex = Math.floor(this.length / 8);

      if (this.buffer.length <= bufIndex) {
        this.buffer.push(0);
      }

      if (bit) {
        this.buffer[bufIndex] |= 0x80 >>> this.length % 8;
      }

      this.length++;
    }
  };
})();

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Modules/ViewConfigs.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'cfd4e3flmNIKZjUVQAt2jLW', 'ViewConfigs');
// Scripts/Modules/ViewConfigs.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MVCRegister_1 = require("./MVCRegister");
var ViewConfigs = /** @class */ (function () {
    function ViewConfigs() {
    }
    ViewConfigs.Init = function () {
        this.dicViewConfigs = {};
        //------------>  在这里添加 viewconfig
        this.dicViewConfigs[MVCRegister_1.ViewNames.ViewOpenNetworking] = new ViewConfigData(MVCRegister_1.ViewNames.ViewOpenNetworking, LayerOrderNum.UITop, "/Prefab/UIOpenNetworking", LoadingStyle.None);
        this.dicViewConfigs[MVCRegister_1.ViewNames.ViewDialogNormal] = new ViewConfigData(MVCRegister_1.ViewNames.ViewDialogNormal, LayerOrderNum.UIPopup, "/Prefab/UIDialogNormal", LoadingStyle.PopWindow);
        this.dicViewConfigs[MVCRegister_1.ViewNames.ViewToast] = new ViewConfigData(MVCRegister_1.ViewNames.ViewToast, LayerOrderNum.UITop, "/Prefab/UIToast", LoadingStyle.None);
        this.dicViewConfigs[MVCRegister_1.ViewNames.ViewApp] = new ViewConfigData(MVCRegister_1.ViewNames.ViewApp, LayerOrderNum.UINormal, "/Prefab/UIAppStart", LoadingStyle.None);
    };
    ViewConfigs.GetViewConfig = function (viewName) {
        return this.dicViewConfigs[viewName];
    };
    ViewConfigs.dicViewConfigs = {};
    return ViewConfigs;
}());
exports.default = ViewConfigs;
//表数据里面的layer字段值
/**
 * UITopper 和 UITop 特性一样，只是层级高一级
 */
var LayerOrderNum;
(function (LayerOrderNum) {
    LayerOrderNum[LayerOrderNum["UINormal"] = 1] = "UINormal";
    LayerOrderNum[LayerOrderNum["UIPopup"] = 2] = "UIPopup";
    LayerOrderNum[LayerOrderNum["UITop"] = 3] = "UITop";
    LayerOrderNum[LayerOrderNum["UITopper"] = 4] = "UITopper";
})(LayerOrderNum = exports.LayerOrderNum || (exports.LayerOrderNum = {}));
//界面加载显示形式
var LoadingStyle;
(function (LoadingStyle) {
    LoadingStyle[LoadingStyle["FullScreen"] = 1] = "FullScreen";
    LoadingStyle[LoadingStyle["PopWindow"] = 2] = "PopWindow";
    LoadingStyle[LoadingStyle["None"] = 3] = "None"; //不带加载,通常为top层所用
})(LoadingStyle = exports.LoadingStyle || (exports.LoadingStyle = {}));
var ViewConfigData = /** @class */ (function () {
    /**
     *
     * @param viewName viewName
     * @param layer 层级
     * @param prefabPath prefabPath
     * @param loadingStyle 是否显示加载界面，一般资源量多的需要显示加载界面
     */
    function ViewConfigData(viewName, layer, prefabPath, loadingStyle) {
        this.viewName = viewName;
        this.layer = layer;
        this.prefabPath = prefabPath;
        this.loadingStyle = loadingStyle;
    }
    return ViewConfigData;
}());
exports.ViewConfigData = ViewConfigData;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTW9kdWxlc1xcVmlld0NvbmZpZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw2Q0FBMEM7QUFFMUM7SUFBQTtJQWdCQSxDQUFDO0lBYmlCLGdCQUFJLEdBQWxCO1FBQ0ksSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFFekIsaUNBQWlDO1FBQ2pDLElBQUksQ0FBQyxjQUFjLENBQUMsdUJBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLElBQUksY0FBYyxDQUFDLHVCQUFTLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLEtBQUssRUFBRSwwQkFBMEIsRUFBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEssSUFBSSxDQUFDLGNBQWMsQ0FBQyx1QkFBUyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsSUFBSSxjQUFjLENBQUMsdUJBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxhQUFhLENBQUMsT0FBTyxFQUFFLHdCQUF3QixFQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6SyxJQUFJLENBQUMsY0FBYyxDQUFDLHVCQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxjQUFjLENBQUMsdUJBQVMsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLEtBQUssRUFBRSxpQkFBaUIsRUFBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0ksSUFBSSxDQUFDLGNBQWMsQ0FBQyx1QkFBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksY0FBYyxDQUFDLHVCQUFTLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxRQUFRLEVBQUUsb0JBQW9CLEVBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25KLENBQUM7SUFFYSx5QkFBYSxHQUEzQixVQUE0QixRQUFRO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBZGMsMEJBQWMsR0FBMkMsRUFBRSxDQUFDO0lBZS9FLGtCQUFDO0NBaEJELEFBZ0JDLElBQUE7a0JBaEJvQixXQUFXO0FBa0JoQyxnQkFBZ0I7QUFDaEI7O0dBRUc7QUFDSCxJQUFZLGFBS1g7QUFMRCxXQUFZLGFBQWE7SUFDckIseURBQVksQ0FBQTtJQUNaLHVEQUFXLENBQUE7SUFDWCxtREFBUyxDQUFBO0lBQ1QseURBQVksQ0FBQTtBQUNoQixDQUFDLEVBTFcsYUFBYSxHQUFiLHFCQUFhLEtBQWIscUJBQWEsUUFLeEI7QUFFRCxVQUFVO0FBQ1YsSUFBWSxZQUlYO0FBSkQsV0FBWSxZQUFZO0lBQ3BCLDJEQUFjLENBQUE7SUFDZCx5REFBYSxDQUFBO0lBQ2IsK0NBQVEsQ0FBQSxDQUFBLGdCQUFnQjtBQUM1QixDQUFDLEVBSlcsWUFBWSxHQUFaLG9CQUFZLEtBQVosb0JBQVksUUFJdkI7QUFFRDtJQU1JOzs7Ozs7T0FNRztJQUNILHdCQUFZLFFBQWdCLEVBQUUsS0FBb0IsRUFBRSxVQUFrQixFQUFDLFlBQXlCO1FBQzVGLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQ3JDLENBQUM7SUFDTCxxQkFBQztBQUFELENBbkJBLEFBbUJDLElBQUE7QUFuQlksd0NBQWMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3TmFtZXMgfSBmcm9tIFwiLi9NVkNSZWdpc3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaWV3Q29uZmlncyB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgZGljVmlld0NvbmZpZ3M6IHsgW3ZpZXdOYW1lOiBzdHJpbmddOiBWaWV3Q29uZmlnRGF0YSB9ID0ge307XG5cbiAgICBwdWJsaWMgc3RhdGljIEluaXQoKSB7XG4gICAgICAgIHRoaXMuZGljVmlld0NvbmZpZ3MgPSB7fTtcblxuICAgICAgICAvLy0tLS0tLS0tLS0tLT4gIOWcqOi/memHjOa3u+WKoCB2aWV3Y29uZmlnXG4gICAgICAgIHRoaXMuZGljVmlld0NvbmZpZ3NbVmlld05hbWVzLlZpZXdPcGVuTmV0d29ya2luZ10gPSBuZXcgVmlld0NvbmZpZ0RhdGEoVmlld05hbWVzLlZpZXdPcGVuTmV0d29ya2luZywgTGF5ZXJPcmRlck51bS5VSVRvcCwgXCIvUHJlZmFiL1VJT3Blbk5ldHdvcmtpbmdcIixMb2FkaW5nU3R5bGUuTm9uZSk7XG4gICAgICAgIHRoaXMuZGljVmlld0NvbmZpZ3NbVmlld05hbWVzLlZpZXdEaWFsb2dOb3JtYWxdID0gbmV3IFZpZXdDb25maWdEYXRhKFZpZXdOYW1lcy5WaWV3RGlhbG9nTm9ybWFsLCBMYXllck9yZGVyTnVtLlVJUG9wdXAsIFwiL1ByZWZhYi9VSURpYWxvZ05vcm1hbFwiLExvYWRpbmdTdHlsZS5Qb3BXaW5kb3cpO1xuICAgICAgICB0aGlzLmRpY1ZpZXdDb25maWdzW1ZpZXdOYW1lcy5WaWV3VG9hc3RdID0gbmV3IFZpZXdDb25maWdEYXRhKFZpZXdOYW1lcy5WaWV3VG9hc3QsIExheWVyT3JkZXJOdW0uVUlUb3AsIFwiL1ByZWZhYi9VSVRvYXN0XCIsTG9hZGluZ1N0eWxlLk5vbmUpO1xuICAgICAgICB0aGlzLmRpY1ZpZXdDb25maWdzW1ZpZXdOYW1lcy5WaWV3QXBwXSA9IG5ldyBWaWV3Q29uZmlnRGF0YShWaWV3TmFtZXMuVmlld0FwcCwgTGF5ZXJPcmRlck51bS5VSU5vcm1hbCwgXCIvUHJlZmFiL1VJQXBwU3RhcnRcIixMb2FkaW5nU3R5bGUuTm9uZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBHZXRWaWV3Q29uZmlnKHZpZXdOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpY1ZpZXdDb25maWdzW3ZpZXdOYW1lXTtcbiAgICB9XG59XG5cbi8v6KGo5pWw5o2u6YeM6Z2i55qEbGF5ZXLlrZfmrrXlgLxcbi8qKlxuICogVUlUb3BwZXIg5ZKMIFVJVG9wIOeJueaAp+S4gOagt++8jOWPquaYr+Wxgue6p+mrmOS4gOe6p1xuICovXG5leHBvcnQgZW51bSBMYXllck9yZGVyTnVtIHtcbiAgICBVSU5vcm1hbCA9IDEsXG4gICAgVUlQb3B1cCA9IDIsXG4gICAgVUlUb3AgPSAzLFxuICAgIFVJVG9wcGVyID0gNCxcbn1cblxuLy/nlYzpnaLliqDovb3mmL7npLrlvaLlvI9cbmV4cG9ydCBlbnVtIExvYWRpbmdTdHlsZSB7XG4gICAgRnVsbFNjcmVlbiA9IDEsLy/lhajlsY/luKbliqDovb3mnaFcbiAgICBQb3BXaW5kb3cgPSAyLC8v5by556qX5Yqg6L29XG4gICAgTm9uZSA9IDMvL+S4jeW4puWKoOi9vSzpgJrluLjkuLp0b3DlsYLmiYDnlKhcbn1cblxuZXhwb3J0IGNsYXNzIFZpZXdDb25maWdEYXRhIHtcbiAgICBwdWJsaWMgdmlld05hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgbGF5ZXI6IExheWVyT3JkZXJOdW07XG4gICAgcHVibGljIHByZWZhYlBhdGg6IHN0cmluZztcbiAgICBwdWJsaWMgbG9hZGluZ1N0eWxlOkxvYWRpbmdTdHlsZTtcblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB2aWV3TmFtZSB2aWV3TmFtZVxuICAgICAqIEBwYXJhbSBsYXllciDlsYLnuqdcbiAgICAgKiBAcGFyYW0gcHJlZmFiUGF0aCBwcmVmYWJQYXRoXG4gICAgICogQHBhcmFtIGxvYWRpbmdTdHlsZSDmmK/lkKbmmL7npLrliqDovb3nlYzpnaLvvIzkuIDoiKzotYTmupDph4/lpJrnmoTpnIDopoHmmL7npLrliqDovb3nlYzpnaJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih2aWV3TmFtZTogc3RyaW5nLCBsYXllcjogTGF5ZXJPcmRlck51bSwgcHJlZmFiUGF0aDogc3RyaW5nLGxvYWRpbmdTdHlsZTpMb2FkaW5nU3R5bGUpIHtcbiAgICAgICAgdGhpcy52aWV3TmFtZSA9IHZpZXdOYW1lO1xuICAgICAgICB0aGlzLmxheWVyID0gbGF5ZXI7XG4gICAgICAgIHRoaXMucHJlZmFiUGF0aCA9IHByZWZhYlBhdGg7XG4gICAgICAgIHRoaXMubG9hZGluZ1N0eWxlID0gbG9hZGluZ1N0eWxlO1xuICAgIH1cbn1cbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Main.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '62157IF3RBGSYvXCHtaiJS6', 'Main');
// Scripts/Main.ts

"use strict";
/***********************************************************************************
 * 银行充值App
 ***********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var JsGetUrlParms_1 = require("./JsTool/JsGetUrlParms");
var MessageNames_1 = require("./Modules/MessageNames");
var MessageCenter_1 = require("./MVCFramework/MessageCenter");
var MVCFramework_1 = require("./MVCFramework/MVCFramework");
var AudioManager_1 = require("./Manager/AudioManager");
var OpenNetworkingUI_1 = require("./Tools/OpenNetworkingUI");
var ImageTool_1 = require("./JsTool/ImageTool");
var TCPNetwork_1 = require("./Network/Socket/TCPNetwork");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Main = /** @class */ (function (_super) {
    __extends(Main, _super);
    function Main() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Main.prototype.onLoad = function () {
        JsGetUrlParms_1.JsGetUrlParms.SetUrlParmsToWindow();
        AudioManager_1.default.GetInstance().Init();
        MVCFramework_1.default.Init();
        TCPNetwork_1.default.GetInstance().Init(TCPNetwork_1.TCPSessionID.Hall);
        //会从app带过来这5个参数
        cc.log(window["ip"], window["port"], window["token"], window["selfId"], window["proxyId"]);
        MessageCenter_1.default.SendMessage(MessageNames_1.default.StartLogin);
        OpenNetworkingUI_1.default.Show();
        ImageTool_1.ImageTool.Init();
    };
    Main = __decorate([
        ccclass
    ], Main);
    return Main;
}(cc.Component));
exports.default = Main;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O3FGQUVxRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRXJGLHdEQUF1RDtBQUN2RCx1REFBa0Q7QUFDbEQsOERBQXlEO0FBQ3pELDREQUF1RDtBQUN2RCx1REFBa0Q7QUFDbEQsNkRBQXdEO0FBQ3hELGdEQUErQztBQUMvQywwREFBdUU7QUFFakUsSUFBQSxrQkFBbUMsRUFBbEMsb0JBQU8sRUFBRSxzQkFBeUIsQ0FBQztBQUcxQztJQUFrQyx3QkFBWTtJQUE5Qzs7SUFpQkEsQ0FBQztJQWZHLHFCQUFNLEdBQU47UUFFSSw2QkFBYSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDcEMsc0JBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQyxzQkFBWSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3BCLG9CQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLHlCQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFakQsZUFBZTtRQUNmLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBRTNGLHVCQUFhLENBQUMsV0FBVyxDQUFDLHNCQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkQsMEJBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDeEIscUJBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBZmdCLElBQUk7UUFEeEIsT0FBTztPQUNhLElBQUksQ0FpQnhCO0lBQUQsV0FBQztDQWpCRCxBQWlCQyxDQWpCaUMsRUFBRSxDQUFDLFNBQVMsR0FpQjdDO2tCQWpCb0IsSUFBSSIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICog6ZO26KGM5YWF5YC8QXBwXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7IEpzR2V0VXJsUGFybXMgfSBmcm9tIFwiLi9Kc1Rvb2wvSnNHZXRVcmxQYXJtc1wiO1xuaW1wb3J0IE1lc3NhZ2VOYW1lcyBmcm9tIFwiLi9Nb2R1bGVzL01lc3NhZ2VOYW1lc1wiO1xuaW1wb3J0IE1lc3NhZ2VDZW50ZXIgZnJvbSBcIi4vTVZDRnJhbWV3b3JrL01lc3NhZ2VDZW50ZXJcIjtcbmltcG9ydCBNVkNGcmFtZXdvcmsgZnJvbSBcIi4vTVZDRnJhbWV3b3JrL01WQ0ZyYW1ld29ya1wiO1xuaW1wb3J0IEF1ZGlvTWFuYWdlciBmcm9tIFwiLi9NYW5hZ2VyL0F1ZGlvTWFuYWdlclwiO1xuaW1wb3J0IE9wZW5OZXR3b3JraW5nVUkgZnJvbSBcIi4vVG9vbHMvT3Blbk5ldHdvcmtpbmdVSVwiO1xuaW1wb3J0IHsgSW1hZ2VUb29sIH0gZnJvbSBcIi4vSnNUb29sL0ltYWdlVG9vbFwiO1xuaW1wb3J0IFRDUE5ldHdvcmssIHsgVENQU2Vzc2lvbklEIH0gZnJvbSBcIi4vTmV0d29yay9Tb2NrZXQvVENQTmV0d29ya1wiO1xuXG5jb25zdCB7Y2NjbGFzcywgcHJvcGVydHl9ID0gY2MuX2RlY29yYXRvcjtcblxuQGNjY2xhc3NcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1haW4gZXh0ZW5kcyBjYy5Db21wb25lbnQge1xuXG4gICAgb25Mb2FkICgpIFxuICAgIHsgICBcbiAgICAgICAgSnNHZXRVcmxQYXJtcy5TZXRVcmxQYXJtc1RvV2luZG93KCk7XG4gICAgICAgIEF1ZGlvTWFuYWdlci5HZXRJbnN0YW5jZSgpLkluaXQoKTtcbiAgICAgICAgTVZDRnJhbWV3b3JrLkluaXQoKTtcbiAgICAgICAgVENQTmV0d29yay5HZXRJbnN0YW5jZSgpLkluaXQoVENQU2Vzc2lvbklELkhhbGwpO1xuXG4gICAgICAgIC8v5Lya5LuOYXBw5bim6L+H5p2l6L+ZNeS4quWPguaVsFxuICAgICAgICBjYy5sb2cod2luZG93W1wiaXBcIl0sIHdpbmRvd1tcInBvcnRcIl0sIHdpbmRvd1tcInRva2VuXCJdLCB3aW5kb3dbXCJzZWxmSWRcIl0sIHdpbmRvd1tcInByb3h5SWRcIl0pO1xuXG4gICAgICAgIE1lc3NhZ2VDZW50ZXIuU2VuZE1lc3NhZ2UoTWVzc2FnZU5hbWVzLlN0YXJ0TG9naW4pO1xuICAgICAgICBPcGVuTmV0d29ya2luZ1VJLlNob3coKTtcbiAgICAgICAgSW1hZ2VUb29sLkluaXQoKTsgICAgICAgIFxuICAgIH1cblxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Modules/Models/ModelApp.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '01b9f12GlVHx7LqvWYR07BS', 'ModelApp');
// Scripts/Modules/Models/ModelApp.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Model_1 = require("../../MVCFramework/Model");
var TCPNetwork_1 = require("../../Network/Socket/TCPNetwork");
var MessageNames_1 = require("../MessageNames");
var Toast_1 = require("../../Tools/Toast");
var TimerManager_1 = require("../../Components/TimerManager");
var Ping_1 = require("../../Protos/Ping");
var MessageDefine_1 = require("../../Protos/MessageDefine");
var Language_1 = require("../../Global/Language");
var BankProxy_1 = require("../../Protos/BankProxy");
var MessageDefine_BankProxy_1 = require("../../Protos/MessageDefine_BankProxy");
var ModelChat = /** @class */ (function (_super) {
    __extends(ModelChat, _super);
    function ModelChat() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.date = new Date();
        return _this;
    }
    ModelChat.prototype.Init = function () {
    };
    ModelChat.prototype.Clean = function () {
    };
    ModelChat.prototype.SetSelfPlayerID = function (playerId) {
        this.selfPlayerId = playerId;
    };
    ModelChat.prototype.SetbankProxyId = function (proxyId) {
        this.ProxyId = proxyId;
    };
    ModelChat.prototype.SetBankType = function (banktype) {
        this.CurrentBanktype = banktype;
    };
    ModelChat.prototype.GetBankType = function () {
        return this.CurrentBanktype;
    };
    ModelChat.prototype.SetOrderNo = function (orderNo) {
        this.OrderNo = orderNo;
    };
    ModelChat.prototype.GetOrderNoe = function () {
        return this.OrderNo;
    };
    // 连接和登录
    ModelChat.prototype.StartLogin = function () {
        var _this = this;
        TCPNetwork_1.default.GetInstance().Connect(TCPNetwork_1.TCPSessionID.Hall, window["ip"], window["port"], function () {
            cc.log("连接服务器成功");
            _this.InitPing();
            // 链接成功，开始尝试登录
            var req = BankProxy_1.LoginReq.create();
            req.playerId = _this.selfPlayerId;
            var reqData = BankProxy_1.LoginReq.encode(req).finish();
            TCPNetwork_1.default.GetInstance().Send(TCPNetwork_1.TCPSessionID.Hall, MessageDefine_BankProxy_1.BankProxyMsgDefine.MSG_BankProxy_Login, reqData, function (data) {
                var resData = BankProxy_1.LoginRes.decode(data);
                if (resData.success) {
                    cc.log("登录服务器成功");
                    _this.SendMessage(MessageNames_1.default.ShowAppStartView);
                }
                else {
                    cc.log("连接服务器失败:", resData.tips);
                    Toast_1.default.Show(resData.tips);
                }
            }, function () {
            });
        }, function () {
            Toast_1.default.Show(Language_1.default.text4);
        });
    };
    ///请求代理信息
    ModelChat.prototype.ReqProxyInfo = function () {
        var _this = this;
        TCPNetwork_1.default.GetInstance().Connect(TCPNetwork_1.TCPSessionID.Hall, window["ip"], window["port"], function () {
            cc.log("连接服务器成功");
            _this.InitPing();
            // 链接成功，开始尝试登录
            var req = BankProxy_1.ProxyInfoReq.create();
            req.bankProxyId = _this.ProxyId;
            var reqData = BankProxy_1.ProxyInfoReq.encode(req).finish();
            TCPNetwork_1.default.GetInstance().Send(TCPNetwork_1.TCPSessionID.Hall, MessageDefine_BankProxy_1.BankProxyMsgDefine.MSG_BankProxy_ProxyInfoReq, reqData, function (data) {
                var resData = BankProxy_1.ProxyInfoRsp.decode(data);
                _this.SendMessage(MessageNames_1.default.ShowProxyInfo);
            }, function () {
            });
        }, function () {
            Toast_1.default.Show(Language_1.default.text4);
        });
    };
    //	MSG_BankProxy_SubmitDepositReq 	= 15103;		//提交存入数额
    ModelChat.prototype.ReqSubmitDeposit = function (banktype, amount) {
        var _this = this;
        cc.log("提交存入数额");
        TCPNetwork_1.default.GetInstance().Connect(TCPNetwork_1.TCPSessionID.Hall, window["ip"], window["port"], function () {
            cc.log("连接服务器成功");
            _this.InitPing();
            // 链接成功，开始尝试登录
            var req = BankProxy_1.SubmitDepositReq.create();
            req.bankProxyId = _this.ProxyId;
            req.playerId = _this.selfPlayerId;
            req.bankType = banktype;
            req.depositAmount = amount;
            var reqData = BankProxy_1.SubmitDepositReq.encode(req).finish();
            TCPNetwork_1.default.GetInstance().Send(TCPNetwork_1.TCPSessionID.Hall, MessageDefine_BankProxy_1.BankProxyMsgDefine.MSG_BankProxy_SubmitDepositReq, reqData, function (data) {
                var resData = BankProxy_1.SubmitDepositRsp.decode(data);
                _this.SendMessage(MessageNames_1.default.SubmitDeposit);
            }, function () {
            });
        }, function () {
            Toast_1.default.Show(Language_1.default.text4);
        });
    };
    //desc:备注信息
    ModelChat.prototype.ReqSubmitOrder = function (orderNo, imageData, desc) {
        var _this = this;
        TCPNetwork_1.default.GetInstance().Connect(TCPNetwork_1.TCPSessionID.Hall, window["ip"], window["port"], function () {
            cc.log("连接服务器成功");
            _this.InitPing();
            // 链接成功，开始尝试登录
            var req = BankProxy_1.SubmitOrderReq.create();
            req.orderNo = orderNo;
            req.imageData = imageData;
            req.desc = desc;
            var reqData = BankProxy_1.SubmitOrderReq.encode(req).finish();
            TCPNetwork_1.default.GetInstance().Send(TCPNetwork_1.TCPSessionID.Hall, MessageDefine_BankProxy_1.BankProxyMsgDefine.MSG_BankProxy_SubmitOrderReq, reqData, function (data) {
                var resData = BankProxy_1.SubmitOrderRsp.decode(data);
                if (resData.success) {
                    cc.log("提交成功");
                    _this.SendMessage(MessageNames_1.default.SubmitOrder);
                }
                else {
                    cc.log("提交失败:", resData.tips);
                    Toast_1.default.Show(resData.tips);
                }
            }, function () {
            });
        }, function () {
            Toast_1.default.Show(Language_1.default.text4);
        });
    };
    ModelChat.prototype.InitPing = function () {
        var _this = this;
        TimerManager_1.default.GetInstance().DeleteTimer(this.pingTimer);
        this.lastSendPingTime = Date.now();
        this.pingTimer = TimerManager_1.default.GetInstance().CallActionDelay(function () {
            var timeNow = Date.now();
            if (timeNow - _this.lastSendPingTime > 3000) {
                _this.SendPing(function () {
                    // this.ResetPingChecker();
                });
                _this.lastSendPingTime = timeNow;
            }
        }, 5, null, -1, 5, true);
    };
    ModelChat.prototype.SendPing = function (funcSuccess) {
        var req = Ping_1.PingReq.create();
        req.timestamp = this.date.getDate();
        var senddata = Ping_1.PingReq.encode(req).finish();
        TCPNetwork_1.default.GetInstance().Send(TCPNetwork_1.TCPSessionID.Hall, MessageDefine_1.PingMsgDefine.MSG_PING, senddata, function (data) {
            funcSuccess();
        }, function (errmsg) {
        }, true);
    };
    return ModelChat;
}(Model_1.default));
exports.default = ModelChat;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Modules/Views/PayEn/BounsItem.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '1ff88Dk7wVP1LsoIVNwfgG+', 'BounsItem');
// Scripts/Modules/Views/PayEn/BounsItem.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../../../Tools/Util");
var BounsItem = /** @class */ (function () {
    function BounsItem() {
    }
    BounsItem.prototype.Init = function (node, data, onclickCallback) {
        var _this = this;
        this.node = node;
        this.node.active = true;
        this.data = data;
        this.button = this.node.getComponent(cc.Button);
        this.Free_amount = this.node.getChildByName("Free_amount").getComponent(cc.Label);
        this.Free_amount.string = "100";
        Util_1.default.SetClickAction(this.button, function () {
            onclickCallback(Number(_this.Free_amount.string));
        });
    };
    BounsItem.prototype.RemoveSelf = function () {
        this.node.removeFromParent();
    };
    return BounsItem;
}());
exports.default = BounsItem;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTW9kdWxlc1xcVmlld3NcXFBheUVuXFxCb3Vuc0l0ZW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0Q0FBdUM7QUFFdkM7SUFBQTtJQW1CQSxDQUFDO0lBZFUsd0JBQUksR0FBWCxVQUFZLElBQWEsRUFBRSxJQUFTLEVBQUUsZUFBMkM7UUFBakYsaUJBVUM7UUFURyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNoQyxjQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDN0IsZUFBZSxDQUFDLE1BQU0sQ0FBQyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ00sOEJBQVUsR0FBakI7UUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDakMsQ0FBQztJQUNMLGdCQUFDO0FBQUQsQ0FuQkEsQUFtQkMsSUFBQSIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVdGlsIGZyb20gXCIuLi8uLi8uLi9Ub29scy9VdGlsXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb3Vuc0l0ZW0ge1xyXG4gICAgcHJpdmF0ZSBub2RlOiBjYy5Ob2RlO1xyXG4gICAgcHJpdmF0ZSBkYXRhOiBhbnk7XHJcbiAgICBwcml2YXRlIGJ1dHRvbjogY2MuQnV0dG9uO1xyXG4gICAgcHJpdmF0ZSBGcmVlX2Ftb3VudDogY2MuTGFiZWw7XHJcbiAgICBwdWJsaWMgSW5pdChub2RlOiBjYy5Ob2RlLCBkYXRhOiBhbnksIG9uY2xpY2tDYWxsYmFjazogKGJhbmtUeXBlOiBudW1iZXIpID0+IHZvaWQpIHtcclxuICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xyXG4gICAgICAgIHRoaXMubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5idXR0b24gPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KGNjLkJ1dHRvbik7XHJcbiAgICAgICAgdGhpcy5GcmVlX2Ftb3VudCA9IHRoaXMubm9kZS5nZXRDaGlsZEJ5TmFtZShcIkZyZWVfYW1vdW50XCIpLmdldENvbXBvbmVudChjYy5MYWJlbCk7XHJcbiAgICAgICAgdGhpcy5GcmVlX2Ftb3VudC5zdHJpbmcgPSBcIjEwMFwiO1xyXG4gICAgICAgIFV0aWwuU2V0Q2xpY2tBY3Rpb24odGhpcy5idXR0b24sICgpID0+IHtcclxuICAgICAgICAgICAgb25jbGlja0NhbGxiYWNrKE51bWJlcih0aGlzLkZyZWVfYW1vdW50LnN0cmluZykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIFJlbW92ZVNlbGYoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLnJlbW92ZUZyb21QYXJlbnQoKTtcclxuICAgIH1cclxufSJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/Util.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'a65529DplNC15o6oC8yHAlA', 'Util');
// Scripts/Tools/Util.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ButtonListener_1 = require("../Components/ButtonListener");
var PageViewListener_1 = require("../Components/PageViewListener");
var ScrollViewListener_1 = require("../Components/ScrollViewListener");
var SliderListener_1 = require("../Components/SliderListener");
var EditBoxListener_1 = require("../Components/EditBoxListener");
var TimerManager_1 = require("../Components/TimerManager");
var JSOpenUrl_1 = require("../JsTool/JSOpenUrl");
var ccC_1 = require("./ccC");
var NodeUtil_1 = require("./NodeUtil");
// import Global from "../Global/Global";
var Util = /** @class */ (function () {
    function Util() {
    }
    //customData,audioName 是可选参数，可不填.   customData只能填string类型
    Util.SetClickAction = function (button, callback, audioName, customData) {
        var buttonListener = button.getComponent(ButtonListener_1.default);
        if (buttonListener == null) {
            buttonListener = button.addComponent(ButtonListener_1.default);
        }
        //TODO:设置音效相关 audioName
        buttonListener.Init();
        buttonListener.SetData(customData);
        buttonListener.SetAudioName(audioName);
        buttonListener.SetOnClickCallback(callback);
    };
    Util.SetPageViewScrollEvent = function (pageView, callback) {
        var pageViewListener = pageView.getComponent(PageViewListener_1.default);
        if (pageViewListener == null)
            pageViewListener = pageView.addComponent(PageViewListener_1.default);
        pageViewListener.SetScrollEventAction(callback);
    };
    Util.SetSliderValueChangeEvent = function (slider, callback) {
        var sliderListener = slider.getComponent(SliderListener_1.default);
        if (sliderListener == null) {
            sliderListener = slider.addComponent(SliderListener_1.default);
        }
        sliderListener.SetSliderValueChangeCallback(callback);
    };
    Util.SetScrollViewScrollEvent = function (scrollView, callback) {
        var scrollViewListener = scrollView.getComponent(ScrollViewListener_1.default);
        if (scrollViewListener == null)
            scrollViewListener = scrollView.addComponent(ScrollViewListener_1.default);
        scrollViewListener.SetScrollEventAction(callback);
    };
    /**
     * 输入框聚焦事件
     * @param editBox
     * @param callback
     * @param customData
     */
    Util.AddEditDidBeganEvent = function (editBox, callback, customData) {
        if (customData === void 0) { customData = ""; }
        var editBoxListener = editBox.getComponent(EditBoxListener_1.default);
        if (editBoxListener == null)
            editBoxListener = editBox.addComponent(EditBoxListener_1.default);
        editBoxListener.AddEditDidBeganHandler(callback, customData);
    };
    /**
     * 输入框内容改变事件
     * @param editBox
     * @param callback
     * @param customData
     */
    Util.AddEditTextChangedEvent = function (editBox, callback, customData) {
        if (customData === void 0) { customData = ""; }
        var editBoxListener = editBox.getComponent(EditBoxListener_1.default);
        if (editBoxListener == null)
            editBoxListener = editBox.addComponent(EditBoxListener_1.default);
        editBoxListener.AddTextChangedHandler(callback, customData);
    };
    /**
     * 输入框失焦事件
     * @param editBox
     * @param callback
     * @param customData
     */
    Util.AddEditDidEndedHandler = function (editBox, callback, customData) {
        if (customData === void 0) { customData = ""; }
        var editBoxListener = editBox.getComponent(EditBoxListener_1.default);
        if (editBoxListener == null)
            editBoxListener = editBox.addComponent(EditBoxListener_1.default);
        editBoxListener.AddEditDidEndedHandler(callback, customData);
    };
    /**
     * 按下return
     * @param editBox
     * @param callback
     * @param customData
     */
    Util.AddEditingReturnHandler = function (editBox, callback, customData) {
        if (customData === void 0) { customData = ""; }
        var editBoxListener = editBox.getComponent(EditBoxListener_1.default);
        if (editBoxListener == null)
            editBoxListener = editBox.addComponent(EditBoxListener_1.default);
        editBoxListener.AddEditingReturnHandler(callback, customData);
    };
    /**
     * 格式化字符串 例子 Util.StringFormat("aaa %s1 bbb %s2 ccc %s3","111","222","333");
     * @param [stringOrigin] 原字符串
     * @param [stringReplaces] 替换的字符串
     */
    Util.StringFormat = function (stringOrigin) {
        var stringReplaces = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            stringReplaces[_i - 1] = arguments[_i];
        }
        for (var i = 0; i < stringReplaces.length; i++) {
            stringOrigin = stringOrigin.replace("%s" + (i + 1), stringReplaces[i]);
        }
        return stringOrigin;
    };
    /**
     * 把单位分输出为元，如 1000 返回 10.
     * @param [count] 多少分
     * @param [showDot00] 如果末尾是.00，true 是保留，false是去掉
     */
    Util.formatGoldText = function (count, showDot00) {
        if (showDot00 === void 0) { showDot00 = true; }
        if (count == null) {
            return count = "0";
        }
        var tmp = 0;
        if (typeof (count) == "string") {
            tmp = parseFloat(count);
        }
        else {
            tmp = count;
        }
        tmp /= 100;
        var ret = tmp.toFixed(2);
        if (showDot00 == false) {
            if (ret.length > 3 && (ret.substring(ret.length - 3, ret.length) == ".00")) {
                ret = ret.substring(0, ret.length - 3);
            }
        }
        return ret;
    };
    /**
     * 设置图集
     * @param sprite
     * @param atlas
     * @param spriteName
     * @param finishCallback
     */
    Util.SetSpriteFrame = function (sprite, atlasPath, spriteName, finishCallback) {
        // cc.error("atlasPath  " + atlasPath);
        // ccC.loadResDir(atlasPath, cc.SpriteFrame, (err, assets:cc.SpriteFrame[])=>{
        //     if (err) {
        //         cc.error("err  " + err.message || err);
        //         return;
        //     }
        //     for (let i = 0; i < assets.length; i++)
        //     {
        //         if (assets[i].name == spriteName)
        //         {
        //             sprite.spriteFrame = assets[i];
        //             if (finishCallback != null)
        //                 finishCallback();
        //             break;
        //         }
        //     }
        // });
        ccC_1.default.loadRes(atlasPath, cc.SpriteAtlas, function (err, res) {
            if (err) {
                cc.error("err  " + err.message || err);
                return;
            }
            sprite.spriteFrame = res.getSpriteFrame(spriteName);
        });
    };
    /**
     * 设置网络头像
     * @param imgHeadObj 显示头像的GameObject
     * @param headUrl 头像地址
     * @param isSetNativeSize 是否设置原始尺寸
     */
    Util.SetHeadNetIcon = function (imgHeadObj, headUrl, successCallback) {
        var _this = this;
        if (successCallback === void 0) { successCallback = null; }
        if (headUrl == undefined || headUrl == null || headUrl.length == 0)
            headUrl = "GYZY_TX_M_1";
        var spHeadImage = imgHeadObj;
        var spriteFrame = headUrl;
        var posIndex = headUrl.lastIndexOf(".");
        if (posIndex > 0) {
            spriteFrame = headUrl.substring(0, posIndex - 1);
        }
        var assetPath = "MainGame/Atlas/Head";
        if (this.netImageCache[spriteFrame] == null) {
            ccC_1.default.loadRes(assetPath, cc.SpriteAtlas, function (err, atlas) {
                if (err) {
                    cc.error("err  " + err.message || err);
                    return;
                }
                var atlass = atlas;
                imgHeadObj.spriteFrame = atlass.getSpriteFrame(spriteFrame);
                _this.netImageCache[spriteFrame] = atlass.getSpriteFrame(spriteFrame);
                if (successCallback != null) {
                    successCallback();
                }
            });
        }
        else {
            imgHeadObj.spriteFrame = this.netImageCache[spriteFrame];
        }
    };
    /**
     * 设置头像框
     * @param image
     * @param spritName
     */
    Util.SetHeadBox = function (image, spritName) {
        var _this = this;
        if (spritName == null || spritName.length == 0 || spritName == "default")
            spritName = "GYZY_TXK";
        var assetPath = "MainGame/Atlas/Head";
        if (this.netImageCache[spritName] == null) {
            ccC_1.default.loadRes(assetPath, cc.SpriteAtlas, function (err, atlas) {
                if (err) {
                    cc.error("err  " + err.message || err);
                    return;
                }
                var atlass = atlas;
                image.spriteFrame = atlass.getSpriteFrame(spritName);
                ;
                _this.netImageCache[spritName] = atlass.getSpriteFrame(spritName);
            });
        }
        else {
            image.spriteFrame = this.netImageCache[spritName];
        }
    };
    Util.SetHeadIcon = function (sprite, headUrl) {
        if (headUrl == undefined || headUrl == null || headUrl.length == 0)
            headUrl = "GYZY_TX_M_1";
        var path = "Textures/Head/" + headUrl;
        NodeUtil_1.default.SetSpriteFrame(sprite, path);
    };
    //播放spine动画回调接口
    Util.PlaySpineEffect = function (spine, listener, name, loop, hideOnComplete) {
        if (listener === void 0) { listener = null; }
        if (name === void 0) { name = "1"; }
        if (loop === void 0) { loop = false; }
        if (hideOnComplete === void 0) { hideOnComplete = true; }
        if (spine == null) {
            // if(Global.showLog == true)
            cc.error("spine 动画为空");
            return;
        }
        spine.node.active = false;
        spine.node.active = true;
        spine.setAnimation(0, name, loop);
        spine.setCompleteListener(function () {
            if (hideOnComplete) {
                spine.node.active = false;
            }
            if (listener != null) {
                listener();
            }
        });
    };
    /**
     * 删除指定数组中指定下标或者元素数据,
     # 不支持删除纯数字组成的数组，
     ## 因为第二个参数如果传入的是 number 类型，默认会将其认为是数组下标。
     * @param array 需要修改的数组
     * @param obj 指定下标或者元素
     */
    Util.RemoveArray = function (array, obj) {
        var temp;
        if (typeof (obj) == 'number') {
            return array.splice(obj, 1);
        }
        else {
            temp = array.indexOf(obj);
            if (temp > -1) {
                return array.splice(temp, 1);
            }
        }
        return null;
    };
    /**
     * 根据用户头像判定是否为男性
     * @param headName 用户头像文件名
     */
    Util.GetGenderByName = function (headName) {
        if (headName == null)
            return true;
        return headName.indexOf('_M_') !== -1;
    };
    /**
     * 判断字符串是否是合法的邮箱
     */
    Util.IsRightEmail = function (str) {
        var reg = new RegExp(/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/);
        if (reg.test(str))
            return true;
        return false;
    };
    /**
     * 判断是否是合法的手机号
     */
    Util.IsRightMobile = function (str) {
        var reg = new RegExp(/^1[0123456789]\d{9}$/);
        if (reg.test(str))
            return true;
        return false;
    };
    /**
     * 根据音效路径获取声音名称，不包括后缀
     */
    //  public static GetAudioNameByPath(audioPath:string){
    //      if(audioPath==null||audioPath==""){
    //          return "";
    //      }
    //      let pathList=audioPath.split("/",5)
    //  }
    /**
     * 返回一个函数
     */
    Util.handler2 = function (selfTable, method, buttonCustom) {
        return function () {
            return method(selfTable, buttonCustom);
        };
    };
    Util.handle = function (obj, method) {
        return function () {
            return method(obj);
        };
    };
    Util.PerformWithDelay = function (time, callBack, timerArray, autoDel) {
        if (timerArray === void 0) { timerArray = null; }
        if (autoDel === void 0) { autoDel = true; }
        var timerID = "";
        timerID = TimerManager_1.default.GetInstance().CallActionDelay(function () {
            if (callBack != null) {
                callBack();
            }
            if (autoDel && timerArray != null) {
                TimerManager_1.default.GetInstance().DeleteTimer(timerID);
                Util.RemoveArray(timerArray, timerID);
            }
        }, time);
        if (timerArray != null) {
            timerArray.push(timerID);
        }
        return timerID;
    };
    Util.GetOrCreateItem = function (parentContainer, index) {
        var childNode = null;
        if (index < parentContainer.childrenCount) {
            //cc.error( parentContainer.children[index]);
            childNode = parentContainer.children[index];
        }
        else {
            //cc.error( parentContainer.children[0]);
            childNode = cc.instantiate(parentContainer.children[0]);
            childNode.parent = parentContainer;
        }
        childNode.active = true;
        return childNode;
    };
    Util.GetDicLength = function (dic) {
        var count = 0;
        for (var key in dic) {
            if (dic.hasOwnProperty(key)) {
                count++;
            }
        }
        return count;
    };
    Util.OpenUrl = function (url) {
        if (cc.sys.isBrowser == false) {
            JSOpenUrl_1.JSOpenUrl.DirectOpen(url);
        }
        else {
            if (cc.sys.isMobile == false) {
                JSOpenUrl_1.JSOpenUrl.BlankOpen(url);
            }
            else {
                if (cc.sys.os == cc.sys.OS_IOS) {
                    //内嵌webview
                    // if(cc.sys.browserType == cc.sys.BROWSER_TYPE_UNKNOWN)
                    // {
                    //     JSOpenUrl.JustOpen(url);
                    // }
                    // else
                    // {
                    //     //ios各种浏览器
                    //     JSOpenUrl.BlankOpen(url);
                    // }
                    JSOpenUrl_1.JSOpenUrl.BlankOpen(url);
                }
                else if (cc.sys.os == cc.sys.OS_ANDROID) {
                    //安卓
                    JSOpenUrl_1.JSOpenUrl.BlankOpen(url);
                }
                else {
                    JSOpenUrl_1.JSOpenUrl.DirectOpen(url);
                }
            }
        }
    };
    /**
     * 格式化日期，
     * @param date Date对象
     * @param formatStr 可以是-，也可以是/
     * @param hasHMS 是否包含时分秒
     */
    Util.FormatDate = function (date, formatStr, hasHMS) {
        if (formatStr === void 0) { formatStr = "-"; }
        if (hasHMS === void 0) { hasHMS = false; }
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var monthStr = month >= 10 ? month : "0" + month;
        var day = date.getDate();
        var dayStr = day >= 10 ? day : "0" + day;
        var dateStr = year + formatStr + monthStr + formatStr + dayStr;
        if (hasHMS) {
            dateStr += (" " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds());
        }
        return dateStr;
    };
    Util.netImageCache = {};
    return Util;
}());
exports.default = Util;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Protos/MessageDefine.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '846632Y7OtOPpvKO92U5hJw', 'MessageDefine');
// Scripts/Protos/MessageDefine.js

/*eslint-disable,block-scoped-var,id-length,no-control-regex,no-magic-numbers,no-prototype-builtins,no-redeclare,no-shadow,no-var,sort-vars*/
"use strict";

var $protobuf = require("./protobuf"); // Common aliases


var $Reader = $protobuf.Reader,
    $Writer = $protobuf.Writer,
    $util = $protobuf.util; // Exported root namespace

var $root = $protobuf.roots.MessageDefine || ($protobuf.roots.MessageDefine = {});
/**
 * NetMsgDefine enum.
 * @exports NetMsgDefine
 * @enum {string}
 * @property {number} HANDSHAKE=1 HANDSHAKE value
 * @property {number} MSG_OVER_LAP=2 MSG_OVER_LAP value
 */

$root.NetMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[1] = "HANDSHAKE"] = 1;
  values[valuesById[2] = "MSG_OVER_LAP"] = 2;
  return values;
}();
/**
 * PingMsgDefine enum.
 * @exports PingMsgDefine
 * @enum {string}
 * @property {number} MSG_PING=1001 MSG_PING value
 */


$root.PingMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[1001] = "MSG_PING"] = 1001;
  return values;
}();
/**
 * LoginMsgDefine enum.
 * @exports LoginMsgDefine
 * @enum {string}
 * @property {number} MSG_LOGIN_HALL=1000 MSG_LOGIN_HALL value
 * @property {number} MSG_RECONNECT_STATUS=1002 MSG_RECONNECT_STATUS value
 * @property {number} MSG_RECONNECT_BATTLE=1003 MSG_RECONNECT_BATTLE value
 * @property {number} MSG_RECONNECT=1004 MSG_RECONNECT value
 * @property {number} MSG_MINI_GAME_RECONNECT_NOTIFY=1005 MSG_MINI_GAME_RECONNECT_NOTIFY value
 * @property {number} MSG_GAME_STATUS_RESPONSE=1006 MSG_GAME_STATUS_RESPONSE value
 */


$root.LoginMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[1000] = "MSG_LOGIN_HALL"] = 1000;
  values[valuesById[1002] = "MSG_RECONNECT_STATUS"] = 1002;
  values[valuesById[1003] = "MSG_RECONNECT_BATTLE"] = 1003;
  values[valuesById[1004] = "MSG_RECONNECT"] = 1004;
  values[valuesById[1005] = "MSG_MINI_GAME_RECONNECT_NOTIFY"] = 1005;
  values[valuesById[1006] = "MSG_GAME_STATUS_RESPONSE"] = 1006;
  return values;
}();
/**
 * CurrencyMsgDefine enum.
 * @exports CurrencyMsgDefine
 * @enum {string}
 * @property {number} SM_SYNC_CURRENCY=2001 SM_SYNC_CURRENCY value
 * @property {number} SM_SYNC_HALL_CURRENCY=2002 SM_SYNC_HALL_CURRENCY value
 */


$root.CurrencyMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[2001] = "SM_SYNC_CURRENCY"] = 2001;
  values[valuesById[2002] = "SM_SYNC_HALL_CURRENCY"] = 2002;
  return values;
}();
/**
 * RankMsgDefine enum.
 * @exports RankMsgDefine
 * @enum {string}
 * @property {number} CM_GET_RANK_INFO_DATA=3000 CM_GET_RANK_INFO_DATA value
 * @property {number} CM_GET_RANK_LIST_DATA=3001 CM_GET_RANK_LIST_DATA value
 */


$root.RankMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[3000] = "CM_GET_RANK_INFO_DATA"] = 3000;
  values[valuesById[3001] = "CM_GET_RANK_LIST_DATA"] = 3001;
  return values;
}();
/**
 * MailMsgDefine enum.
 * @exports MailMsgDefine
 * @enum {string}
 * @property {number} CM_PUSH_MAIL_DATA=4001 CM_PUSH_MAIL_DATA value
 * @property {number} SM_PUSH_MAIL_DATA=4002 SM_PUSH_MAIL_DATA value
 * @property {number} SM_UPDATE_MAIL_DATA=4003 SM_UPDATE_MAIL_DATA value
 * @property {number} CM_READ_MAIL=4004 CM_READ_MAIL value
 * @property {number} CM_GET_MAIL_ATTACHMENT=4005 CM_GET_MAIL_ATTACHMENT value
 * @property {number} CM_DELETE_MAIL=4006 CM_DELETE_MAIL value
 */


$root.MailMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[4001] = "CM_PUSH_MAIL_DATA"] = 4001;
  values[valuesById[4002] = "SM_PUSH_MAIL_DATA"] = 4002;
  values[valuesById[4003] = "SM_UPDATE_MAIL_DATA"] = 4003;
  values[valuesById[4004] = "CM_READ_MAIL"] = 4004;
  values[valuesById[4005] = "CM_GET_MAIL_ATTACHMENT"] = 4005;
  values[valuesById[4006] = "CM_DELETE_MAIL"] = 4006;
  return values;
}();
/**
 * ItemMsgDefine enum.
 * @exports ItemMsgDefine
 * @enum {string}
 * @property {number} SM_ITEM_LOGIN_PUSH=5001 SM_ITEM_LOGIN_PUSH value
 * @property {number} SM_UPDATE_ITEMS=5002 SM_UPDATE_ITEMS value
 * @property {number} MSG_USE_ITEM=5003 MSG_USE_ITEM value
 */


$root.ItemMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[5001] = "SM_ITEM_LOGIN_PUSH"] = 5001;
  values[valuesById[5002] = "SM_UPDATE_ITEMS"] = 5002;
  values[valuesById[5003] = "MSG_USE_ITEM"] = 5003;
  return values;
}();
/**
 * PlayerRoleMsgDefine enum.
 * @exports PlayerRoleMsgDefine
 * @enum {string}
 * @property {number} SM_PUSH_ROLE_DATA=6001 SM_PUSH_ROLE_DATA value
 * @property {number} MSG_MODIFY_NICKNAME=6002 MSG_MODIFY_NICKNAME value
 * @property {number} MSG_MODIFY_HEAD_INFO=6003 MSG_MODIFY_HEAD_INFO value
 * @property {number} MSG_BIND_SIGN=6004 MSG_BIND_SIGN value
 * @property {number} MSG_UPLOAD_HEAD_IMAGE=6005 MSG_UPLOAD_HEAD_IMAGE value
 * @property {number} MSG_CHANGE_HEAD_BOX=6006 MSG_CHANGE_HEAD_BOX value
 * @property {number} MSG_SAFE_BOX_GET_BOX_INFO=6007 MSG_SAFE_BOX_GET_BOX_INFO value
 * @property {number} MSG_SAFE_BOX_TAKE_OUT_BOX_MONEY=6008 MSG_SAFE_BOX_TAKE_OUT_BOX_MONEY value
 * @property {number} MSG_SAFE_BOX_SAVE_BOX_MONEY=6009 MSG_SAFE_BOX_SAVE_BOX_MONEY value
 * @property {number} MSG_ANNOUN_GET_INFO=6010 MSG_ANNOUN_GET_INFO value
 * @property {number} MSG_ANNOUN_READ=6011 MSG_ANNOUN_READ value
 * @property {number} MSG_PUSH_ANNOUN_RED_POINT=6012 MSG_PUSH_ANNOUN_RED_POINT value
 * @property {number} MSG_PUSH_Bankruptcy_info=6013 MSG_PUSH_Bankruptcy_info value
 * @property {number} MSG_REQ_Bankruptcy_Remain=6016 MSG_REQ_Bankruptcy_Remain value
 * @property {number} MSG_REQ_Bankruptcy=6014 MSG_REQ_Bankruptcy value
 * @property {number} MSG_Server_Game_RQE_Bankruptcy_INFO=6015 MSG_Server_Game_RQE_Bankruptcy_INFO value
 * @property {number} MSM_PUSH_ZhuCeSongJin=6017 MSM_PUSH_ZhuCeSongJin value
 * @property {number} MSG_REQ_ZhuCeSongJin=6018 MSG_REQ_ZhuCeSongJin value
 * @property {number} MSG_REQ_XinShouJin=6019 MSG_REQ_XinShouJin value
 * @property {number} MSG_REQ_UP_XinShouJin=6020 MSG_REQ_UP_XinShouJin value
 * @property {number} MSM_PUSH_XinShouJinAndStep=6021 MSM_PUSH_XinShouJinAndStep value
 * @property {number} MSG_BINDING_MOBILE_NUM=6022 MSG_BINDING_MOBILE_NUM value
 * @property {number} MSG_PUSH_HEAD_FRAME_LIST=6023 MSG_PUSH_HEAD_FRAME_LIST value
 * @property {number} MSG_PUSH_BATTERY_LIST=6024 MSG_PUSH_BATTERY_LIST value
 */


$root.PlayerRoleMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[6001] = "SM_PUSH_ROLE_DATA"] = 6001;
  values[valuesById[6002] = "MSG_MODIFY_NICKNAME"] = 6002;
  values[valuesById[6003] = "MSG_MODIFY_HEAD_INFO"] = 6003;
  values[valuesById[6004] = "MSG_BIND_SIGN"] = 6004;
  values[valuesById[6005] = "MSG_UPLOAD_HEAD_IMAGE"] = 6005;
  values[valuesById[6006] = "MSG_CHANGE_HEAD_BOX"] = 6006;
  values[valuesById[6007] = "MSG_SAFE_BOX_GET_BOX_INFO"] = 6007;
  values[valuesById[6008] = "MSG_SAFE_BOX_TAKE_OUT_BOX_MONEY"] = 6008;
  values[valuesById[6009] = "MSG_SAFE_BOX_SAVE_BOX_MONEY"] = 6009;
  values[valuesById[6010] = "MSG_ANNOUN_GET_INFO"] = 6010;
  values[valuesById[6011] = "MSG_ANNOUN_READ"] = 6011;
  values[valuesById[6012] = "MSG_PUSH_ANNOUN_RED_POINT"] = 6012;
  values[valuesById[6013] = "MSG_PUSH_Bankruptcy_info"] = 6013;
  values[valuesById[6016] = "MSG_REQ_Bankruptcy_Remain"] = 6016;
  values[valuesById[6014] = "MSG_REQ_Bankruptcy"] = 6014;
  values[valuesById[6015] = "MSG_Server_Game_RQE_Bankruptcy_INFO"] = 6015;
  values[valuesById[6017] = "MSM_PUSH_ZhuCeSongJin"] = 6017;
  values[valuesById[6018] = "MSG_REQ_ZhuCeSongJin"] = 6018;
  values[valuesById[6019] = "MSG_REQ_XinShouJin"] = 6019;
  values[valuesById[6020] = "MSG_REQ_UP_XinShouJin"] = 6020;
  values[valuesById[6021] = "MSM_PUSH_XinShouJinAndStep"] = 6021;
  values[valuesById[6022] = "MSG_BINDING_MOBILE_NUM"] = 6022;
  values[valuesById[6023] = "MSG_PUSH_HEAD_FRAME_LIST"] = 6023;
  values[valuesById[6024] = "MSG_PUSH_BATTERY_LIST"] = 6024;
  return values;
}();
/**
 * PayClientMsgDefine enum.
 * @exports PayClientMsgDefine
 * @enum {string}
 * @property {number} MSG_BEFORE_PAY_NORMAL=8001 MSG_BEFORE_PAY_NORMAL value
 * @property {number} MSG_BEFORE_PAY_FIRST=8002 MSG_BEFORE_PAY_FIRST value
 * @property {number} MSG_REQ_RECHARGE_LIST=8003 MSG_REQ_RECHARGE_LIST value
 * @property {number} MSG_REQ_RECHARGE=8004 MSG_REQ_RECHARGE value
 * @property {number} MSG_REQ_REFRESH_PROXY=8005 MSG_REQ_REFRESH_PROXY value
 * @property {number} MSG_RSP_ACCOUNTGETMONEY=8006 MSG_RSP_ACCOUNTGETMONEY value
 * @property {number} MSG_REQ_CONFIRMGETMONEY=8007 MSG_REQ_CONFIRMGETMONEY value
 * @property {number} MSG_REQ_CHARGE_CHAT_SERVER_INFO=8008 MSG_REQ_CHARGE_CHAT_SERVER_INFO value
 * @property {number} MSG_RES_CHARGE_RECORD=8009 MSG_RES_CHARGE_RECORD value
 * @property {number} MSG_REQ_Evaluation=8010 MSG_REQ_Evaluation value
 */


$root.PayClientMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[8001] = "MSG_BEFORE_PAY_NORMAL"] = 8001;
  values[valuesById[8002] = "MSG_BEFORE_PAY_FIRST"] = 8002;
  values[valuesById[8003] = "MSG_REQ_RECHARGE_LIST"] = 8003;
  values[valuesById[8004] = "MSG_REQ_RECHARGE"] = 8004;
  values[valuesById[8005] = "MSG_REQ_REFRESH_PROXY"] = 8005;
  values[valuesById[8006] = "MSG_RSP_ACCOUNTGETMONEY"] = 8006;
  values[valuesById[8007] = "MSG_REQ_CONFIRMGETMONEY"] = 8007;
  values[valuesById[8008] = "MSG_REQ_CHARGE_CHAT_SERVER_INFO"] = 8008;
  values[valuesById[8009] = "MSG_RES_CHARGE_RECORD"] = 8009;
  values[valuesById[8010] = "MSG_REQ_Evaluation"] = 8010;
  return values;
}();
/**
 * PayServerMsgDefine enum.
 * @exports PayServerMsgDefine
 * @enum {string}
 * @property {number} MSG_PAY=8101 MSG_PAY value
 * @property {number} MSG_IAP_VERIFY=8102 MSG_IAP_VERIFY value
 * @property {number} MSG_NOTIFY_IAP_VERIFY_FINISH=8103 MSG_NOTIFY_IAP_VERIFY_FINISH value
 * @property {number} MSG_IAP_PAY_SERVER_VERIFY=8104 MSG_IAP_PAY_SERVER_VERIFY value
 * @property {number} MSG_IAP_PAY_SERVER_VERIFY_RESULT=8105 MSG_IAP_PAY_SERVER_VERIFY_RESULT value
 * @property {number} MSG_CREATE_ORDER=8106 MSG_CREATE_ORDER value
 */


$root.PayServerMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[8101] = "MSG_PAY"] = 8101;
  values[valuesById[8102] = "MSG_IAP_VERIFY"] = 8102;
  values[valuesById[8103] = "MSG_NOTIFY_IAP_VERIFY_FINISH"] = 8103;
  values[valuesById[8104] = "MSG_IAP_PAY_SERVER_VERIFY"] = 8104;
  values[valuesById[8105] = "MSG_IAP_PAY_SERVER_VERIFY_RESULT"] = 8105;
  values[valuesById[8106] = "MSG_CREATE_ORDER"] = 8106;
  return values;
}();
/**
 * BiLogMsgDefine enum.
 * @exports BiLogMsgDefine
 * @enum {string}
 * @property {number} MSG_BILOG=8201 MSG_BILOG value
 */


$root.BiLogMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[8201] = "MSG_BILOG"] = 8201;
  return values;
}();
/**
 * ShareDataMsgDefine enum.
 * @exports ShareDataMsgDefine
 * @enum {string}
 * @property {number} MSG_SHARE_BRAND_ROAD_DATA=8202 MSG_SHARE_BRAND_ROAD_DATA value
 * @property {number} MSG_SHARE_ROOM_STATUS=8203 MSG_SHARE_ROOM_STATUS value
 * @property {number} MSG_ARCADECATCHFISH_CHANGE_STOCK=8204 MSG_ARCADECATCHFISH_CHANGE_STOCK value
 * @property {number} MSG_REQ_ALL_ROAD=8205 MSG_REQ_ALL_ROAD value
 * @property {number} MSG_Rsp_ALL_ROAD=8206 MSG_Rsp_ALL_ROAD value
 */


$root.ShareDataMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[8202] = "MSG_SHARE_BRAND_ROAD_DATA"] = 8202;
  values[valuesById[8203] = "MSG_SHARE_ROOM_STATUS"] = 8203;
  values[valuesById[8204] = "MSG_ARCADECATCHFISH_CHANGE_STOCK"] = 8204;
  values[valuesById[8205] = "MSG_REQ_ALL_ROAD"] = 8205;
  values[valuesById[8206] = "MSG_Rsp_ALL_ROAD"] = 8206;
  return values;
}();
/**
 * LegendMsgDefine enum.
 * @exports LegendMsgDefine
 * @enum {string}
 * @property {number} MSG_LEGEND=8205 MSG_LEGEND value
 */


$root.LegendMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[8205] = "MSG_LEGEND"] = 8205;
  return values;
}();
/**
 * GMMsgDefine enum.
 * @exports GMMsgDefine
 * @enum {string}
 * @property {number} MSG_GM_BROADCAST=8301 MSG_GM_BROADCAST value
 * @property {number} MSG_GM_NOTIFY_ROLE_LOGIN=8302 MSG_GM_NOTIFY_ROLE_LOGIN value
 * @property {number} MSG_GM_SEND_GMEMAIL=8303 MSG_GM_SEND_GMEMAIL value
 * @property {number} MSG_GM_SEND_ANNOUN=8304 MSG_GM_SEND_ANNOUN value
 * @property {number} MSG_GM_MODIFY_CURRENCY=8305 MSG_GM_MODIFY_CURRENCY value
 * @property {number} MSG_GM_RELOAD_ANNOUNCEMENT=8306 MSG_GM_RELOAD_ANNOUNCEMENT value
 */


$root.GMMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[8301] = "MSG_GM_BROADCAST"] = 8301;
  values[valuesById[8302] = "MSG_GM_NOTIFY_ROLE_LOGIN"] = 8302;
  values[valuesById[8303] = "MSG_GM_SEND_GMEMAIL"] = 8303;
  values[valuesById[8304] = "MSG_GM_SEND_ANNOUN"] = 8304;
  values[valuesById[8305] = "MSG_GM_MODIFY_CURRENCY"] = 8305;
  values[valuesById[8306] = "MSG_GM_RELOAD_ANNOUNCEMENT"] = 8306;
  return values;
}();
/**
 * ChatMsgDefine enum.
 * @exports ChatMsgDefine
 * @enum {string}
 * @property {number} MSG_SEND_BROADCAST=8400 MSG_SEND_BROADCAST value
 * @property {number} MSG_BROADCAST=8401 MSG_BROADCAST value
 * @property {number} MSG_CHAT=8402 MSG_CHAT value
 * @property {number} MSG_READ_CHAT=8403 MSG_READ_CHAT value
 * @property {number} MSG_MAKE_READ=8404 MSG_MAKE_READ value
 * @property {number} MSG_PUSH_CHAT=8405 MSG_PUSH_CHAT value
 */


$root.ChatMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[8400] = "MSG_SEND_BROADCAST"] = 8400;
  values[valuesById[8401] = "MSG_BROADCAST"] = 8401;
  values[valuesById[8402] = "MSG_CHAT"] = 8402;
  values[valuesById[8403] = "MSG_READ_CHAT"] = 8403;
  values[valuesById[8404] = "MSG_MAKE_READ"] = 8404;
  values[valuesById[8405] = "MSG_PUSH_CHAT"] = 8405;
  return values;
}();
/**
 * ChatServerMsgDefine enum.
 * @exports ChatServerMsgDefine
 * @enum {string}
 * @property {number} MID_CHAT_MSG=8450 MID_CHAT_MSG value
 */


$root.ChatServerMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[8450] = "MID_CHAT_MSG"] = 8450;
  return values;
}();
/**
 * HallMsgDefine enum.
 * @exports HallMsgDefine
 * @enum {string}
 * @property {number} MSG_PUSH_HALL_DATA=8500 MSG_PUSH_HALL_DATA value
 * @property {number} MSG_OPEN_PLAY_LIST_REQ=8501 MSG_OPEN_PLAY_LIST_REQ value
 * @property {number} MSG_PLAY_GAME=8502 MSG_PLAY_GAME value
 * @property {number} MSG_PUSH_MATCH_RESULT=8503 MSG_PUSH_MATCH_RESULT value
 * @property {number} MSG_CANCEL_PLAY=8504 MSG_CANCEL_PLAY value
 * @property {number} MSG_LOGINHALL_POPMENU=8505 MSG_LOGINHALL_POPMENU value
 * @property {number} MSG_PUSH_MOUDULE_STATUS=8506 MSG_PUSH_MOUDULE_STATUS value
 * @property {number} MSG_PUSH_CHANNEL_ASSET=8507 MSG_PUSH_CHANNEL_ASSET value
 */


$root.HallMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[8500] = "MSG_PUSH_HALL_DATA"] = 8500;
  values[valuesById[8501] = "MSG_OPEN_PLAY_LIST_REQ"] = 8501;
  values[valuesById[8502] = "MSG_PLAY_GAME"] = 8502;
  values[valuesById[8503] = "MSG_PUSH_MATCH_RESULT"] = 8503;
  values[valuesById[8504] = "MSG_CANCEL_PLAY"] = 8504;
  values[valuesById[8505] = "MSG_LOGINHALL_POPMENU"] = 8505;
  values[valuesById[8506] = "MSG_PUSH_MOUDULE_STATUS"] = 8506;
  values[valuesById[8507] = "MSG_PUSH_CHANNEL_ASSET"] = 8507;
  return values;
}();
/**
 * LoginPopupMsgDefine enum.
 * @exports LoginPopupMsgDefine
 * @enum {string}
 * @property {number} MSG_LOGIN_POP_UP=8800 MSG_LOGIN_POP_UP value
 * @property {number} MSG_CLOSE_POP_UP=8801 MSG_CLOSE_POP_UP value
 */


$root.LoginPopupMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[8800] = "MSG_LOGIN_POP_UP"] = 8800;
  values[valuesById[8801] = "MSG_CLOSE_POP_UP"] = 8801;
  return values;
}();
/**
 * MatchServerMsgDefine enum.
 * @exports MatchServerMsgDefine
 * @enum {string}
 * @property {number} MSG_MATCH_REQ=9000 MSG_MATCH_REQ value
 * @property {number} MSG_CANCEL_MATCH_REQ=9001 MSG_CANCEL_MATCH_REQ value
 * @property {number} MSG_GAME_TO_MATCH_RESULT_RESPONSE=9002 MSG_GAME_TO_MATCH_RESULT_RESPONSE value
 * @property {number} MSG_MATCH_TO_HALL_RESULT_RESPONSE=9003 MSG_MATCH_TO_HALL_RESULT_RESPONSE value
 * @property {number} MSG_MATCH_TO_GAME_START_REQUEST=9004 MSG_MATCH_TO_GAME_START_REQUEST value
 * @property {number} MSG_GAME_TO_MATCH_GAME_FINISH=9005 MSG_GAME_TO_MATCH_GAME_FINISH value
 * @property {number} MSG_GAME_TO_MATCH_GET_ROBOT=9006 MSG_GAME_TO_MATCH_GET_ROBOT value
 * @property {number} MSG_MATCH_TO_GAME_RETURN_ROBOT=9007 MSG_MATCH_TO_GAME_RETURN_ROBOT value
 * @property {number} MSG_GAME_TO_GAME_GIVEBACK_ROBOT=9008 MSG_GAME_TO_GAME_GIVEBACK_ROBOT value
 * @property {number} MSG_GAME_TO_HALL_BACK_HALL=9009 MSG_GAME_TO_HALL_BACK_HALL value
 * @property {number} MSG_LOGIN_GAME=9010 MSG_LOGIN_GAME value
 * @property {number} MSG_Config_Battle_Status=9011 MSG_Config_Battle_Status value
 * @property {number} MSG_SYNC_CURRENCY=9012 MSG_SYNC_CURRENCY value
 * @property {number} MSG_SYNC_SETTLEMENT=9013 MSG_SYNC_SETTLEMENT value
 */


$root.MatchServerMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[9000] = "MSG_MATCH_REQ"] = 9000;
  values[valuesById[9001] = "MSG_CANCEL_MATCH_REQ"] = 9001;
  values[valuesById[9002] = "MSG_GAME_TO_MATCH_RESULT_RESPONSE"] = 9002;
  values[valuesById[9003] = "MSG_MATCH_TO_HALL_RESULT_RESPONSE"] = 9003;
  values[valuesById[9004] = "MSG_MATCH_TO_GAME_START_REQUEST"] = 9004;
  values[valuesById[9005] = "MSG_GAME_TO_MATCH_GAME_FINISH"] = 9005;
  values[valuesById[9006] = "MSG_GAME_TO_MATCH_GET_ROBOT"] = 9006;
  values[valuesById[9007] = "MSG_MATCH_TO_GAME_RETURN_ROBOT"] = 9007;
  values[valuesById[9008] = "MSG_GAME_TO_GAME_GIVEBACK_ROBOT"] = 9008;
  values[valuesById[9009] = "MSG_GAME_TO_HALL_BACK_HALL"] = 9009;
  values[valuesById[9010] = "MSG_LOGIN_GAME"] = 9010;
  values[valuesById[9011] = "MSG_Config_Battle_Status"] = 9011;
  values[valuesById[9012] = "MSG_SYNC_CURRENCY"] = 9012;
  values[valuesById[9013] = "MSG_SYNC_SETTLEMENT"] = 9013;
  return values;
}();
/**
 * WithdrawMsgDefine enum.
 * @exports WithdrawMsgDefine
 * @enum {string}
 * @property {number} MSG_REQ_TAKE_MONEY_Withdraw=9601 MSG_REQ_TAKE_MONEY_Withdraw value
 * @property {number} MSG_REQ_TAKE_MONEY_RECORD_Withdraw=9602 MSG_REQ_TAKE_MONEY_RECORD_Withdraw value
 * @property {number} MSG_REQ_BIND_ZHIFUBO_Withdraw=9603 MSG_REQ_BIND_ZHIFUBO_Withdraw value
 * @property {number} MSG_REQ_GET_ZHIFUBO_INFO_Withdraw=9604 MSG_REQ_GET_ZHIFUBO_INFO_Withdraw value
 * @property {number} MSG_REQ_BIND_BANKCA_Withdraw=9605 MSG_REQ_BIND_BANKCA_Withdraw value
 * @property {number} MSG_REQ_GET_BANKCA_INFO_Withdraw=9606 MSG_REQ_GET_BANKCA_INFO_Withdraw value
 * @property {number} MSG_REQ_GET_CAN_USE_BANK_INFOS_Withdraw=9607 MSG_REQ_GET_CAN_USE_BANK_INFOS_Withdraw value
 * @property {number} MSG_REQ_GET_WITHDRAW_PASSAGE=9608 MSG_REQ_GET_WITHDRAW_PASSAGE value
 */


$root.WithdrawMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[9601] = "MSG_REQ_TAKE_MONEY_Withdraw"] = 9601;
  values[valuesById[9602] = "MSG_REQ_TAKE_MONEY_RECORD_Withdraw"] = 9602;
  values[valuesById[9603] = "MSG_REQ_BIND_ZHIFUBO_Withdraw"] = 9603;
  values[valuesById[9604] = "MSG_REQ_GET_ZHIFUBO_INFO_Withdraw"] = 9604;
  values[valuesById[9605] = "MSG_REQ_BIND_BANKCA_Withdraw"] = 9605;
  values[valuesById[9606] = "MSG_REQ_GET_BANKCA_INFO_Withdraw"] = 9606;
  values[valuesById[9607] = "MSG_REQ_GET_CAN_USE_BANK_INFOS_Withdraw"] = 9607;
  values[valuesById[9608] = "MSG_REQ_GET_WITHDRAW_PASSAGE"] = 9608;
  return values;
}();
/**
 * BrocastMsgDefine enum.
 * @exports BrocastMsgDefine
 * @enum {string}
 * @property {number} MSG_PUSH_Brocast_INFO=9701 MSG_PUSH_Brocast_INFO value
 * @property {number} MSG_Game_Send_Brocast=9702 MSG_Game_Send_Brocast value
 * @property {number} MSG_Send_TEXT_Brocast=9703 MSG_Send_TEXT_Brocast value
 */


$root.BrocastMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[9701] = "MSG_PUSH_Brocast_INFO"] = 9701;
  values[valuesById[9702] = "MSG_Game_Send_Brocast"] = 9702;
  values[valuesById[9703] = "MSG_Send_TEXT_Brocast"] = 9703;
  return values;
}();
/**
 * GameCommonMsgDefine enum.
 * @exports GameCommonMsgDefine
 * @enum {string}
 * @property {number} MSG_KICK_OUT_GAME_ROOM=9401 MSG_KICK_OUT_GAME_ROOM value
 * @property {number} MSG_ALREADY_PLAY_GAME=9402 MSG_ALREADY_PLAY_GAME value
 * @property {number} MSG_KICK_OUT_TO_LOGIN=9403 MSG_KICK_OUT_TO_LOGIN value
 */


$root.GameCommonMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[9401] = "MSG_KICK_OUT_GAME_ROOM"] = 9401;
  values[valuesById[9402] = "MSG_ALREADY_PLAY_GAME"] = 9402;
  values[valuesById[9403] = "MSG_KICK_OUT_TO_LOGIN"] = 9403;
  return values;
}();
/**
 * WithDrawServerMsgDefine enum.
 * @exports WithDrawServerMsgDefine
 * @enum {string}
 * @property {number} MSG_WithDraw_CREATE_ORDER=11101 MSG_WithDraw_CREATE_ORDER value
 * @property {number} MSG_WithDraw_CREATE_RSP=11102 MSG_WithDraw_CREATE_RSP value
 */


$root.WithDrawServerMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[11101] = "MSG_WithDraw_CREATE_ORDER"] = 11101;
  values[valuesById[11102] = "MSG_WithDraw_CREATE_RSP"] = 11102;
  return values;
}();
/**
 * VipMsgDefine enum.
 * @exports VipMsgDefine
 * @enum {string}
 * @property {number} MSG_REQ_VIP_INFO=20001 MSG_REQ_VIP_INFO value
 * @property {number} MSG_PUSH_VIP_INFO_UPDATE=20002 MSG_PUSH_VIP_INFO_UPDATE value
 * @property {number} MSG_REQ_INTEGRAL_EXCHANGE_INFO=20003 MSG_REQ_INTEGRAL_EXCHANGE_INFO value
 * @property {number} MSG_REQ_INTEGRAL_DETAIL=20004 MSG_REQ_INTEGRAL_DETAIL value
 * @property {number} MSG_REQ_INTEGRAL_EXCHANGE=20005 MSG_REQ_INTEGRAL_EXCHANGE value
 * @property {number} MSG_PUSH_INTEGRAL_UPDATE=20006 MSG_PUSH_INTEGRAL_UPDATE value
 * @property {number} MSG_REQ_VIP_QQ_CUSTOMER_SERVER=20007 MSG_REQ_VIP_QQ_CUSTOMER_SERVER value
 * @property {number} MSG_REQ__REBATE_INFO=20008 MSG_REQ__REBATE_INFO value
 * @property {number} MSG_REQ_GET_REBATE_REWARD=20009 MSG_REQ_GET_REBATE_REWARD value
 * @property {number} MSG_REQ_RED_ENVELOPE=20010 MSG_REQ_RED_ENVELOPE value
 * @property {number} MSG_REQ_ON_RED_ENVELOPE=20011 MSG_REQ_ON_RED_ENVELOPE value
 * @property {number} MSG_REQ_TREASURE_INFO=20012 MSG_REQ_TREASURE_INFO value
 * @property {number} MSG_REQ_TREASURE=20013 MSG_REQ_TREASURE value
 * @property {number} MSG_REQ_MISSION_INFO=20014 MSG_REQ_MISSION_INFO value
 * @property {number} MSG_REQ_GET_ACTIVE_REWARD=20015 MSG_REQ_GET_ACTIVE_REWARD value
 * @property {number} MSG_REQ_VIPPRIVATE_LIST=20016 MSG_REQ_VIPPRIVATE_LIST value
 * @property {number} MSG_REQ_LUCK_BAY=20017 MSG_REQ_LUCK_BAY value
 * @property {number} MSG_REQ_OPEN_LUCK_BAY=20018 MSG_REQ_OPEN_LUCK_BAY value
 * @property {number} MSG_REQ_GET_OTHER_BAY=20019 MSG_REQ_GET_OTHER_BAY value
 */


$root.VipMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[20001] = "MSG_REQ_VIP_INFO"] = 20001;
  values[valuesById[20002] = "MSG_PUSH_VIP_INFO_UPDATE"] = 20002;
  values[valuesById[20003] = "MSG_REQ_INTEGRAL_EXCHANGE_INFO"] = 20003;
  values[valuesById[20004] = "MSG_REQ_INTEGRAL_DETAIL"] = 20004;
  values[valuesById[20005] = "MSG_REQ_INTEGRAL_EXCHANGE"] = 20005;
  values[valuesById[20006] = "MSG_PUSH_INTEGRAL_UPDATE"] = 20006;
  values[valuesById[20007] = "MSG_REQ_VIP_QQ_CUSTOMER_SERVER"] = 20007;
  values[valuesById[20008] = "MSG_REQ__REBATE_INFO"] = 20008;
  values[valuesById[20009] = "MSG_REQ_GET_REBATE_REWARD"] = 20009;
  values[valuesById[20010] = "MSG_REQ_RED_ENVELOPE"] = 20010;
  values[valuesById[20011] = "MSG_REQ_ON_RED_ENVELOPE"] = 20011;
  values[valuesById[20012] = "MSG_REQ_TREASURE_INFO"] = 20012;
  values[valuesById[20013] = "MSG_REQ_TREASURE"] = 20013;
  values[valuesById[20014] = "MSG_REQ_MISSION_INFO"] = 20014;
  values[valuesById[20015] = "MSG_REQ_GET_ACTIVE_REWARD"] = 20015;
  values[valuesById[20016] = "MSG_REQ_VIPPRIVATE_LIST"] = 20016;
  values[valuesById[20017] = "MSG_REQ_LUCK_BAY"] = 20017;
  values[valuesById[20018] = "MSG_REQ_OPEN_LUCK_BAY"] = 20018;
  values[valuesById[20019] = "MSG_REQ_GET_OTHER_BAY"] = 20019;
  return values;
}();
/**
 * PromoterMsgDefine enum.
 * @exports PromoterMsgDefine
 * @enum {string}
 * @property {number} MSG_REQ_LEVEL_INFO=21001 MSG_REQ_LEVEL_INFO value
 * @property {number} MSG_REQ_PLAYERS_INCOME_INFO=21002 MSG_REQ_PLAYERS_INCOME_INFO value
 * @property {number} MSG_REQ_INCOME_INFO=21003 MSG_REQ_INCOME_INFO value
 * @property {number} MSG_REQ_DAY_INCOME_INFO=21005 MSG_REQ_DAY_INCOME_INFO value
 * @property {number} MSG_REQ_MINE_TEAM_INFO=21006 MSG_REQ_MINE_TEAM_INFO value
 * @property {number} MSG_REQ_REWARDS_INFO=21007 MSG_REQ_REWARDS_INFO value
 * @property {number} MSG_REQ_APPLY_DEPOSIT_RECORD=21008 MSG_REQ_APPLY_DEPOSIT_RECORD value
 * @property {number} MSG_REQ_APPLY_DEPOSIT=21009 MSG_REQ_APPLY_DEPOSIT value
 * @property {number} MSG_REQ_UPLOAD_LEADER_ID=21010 MSG_REQ_UPLOAD_LEADER_ID value
 * @property {number} GM_TO_HALL_MSG_UPLOAD_LEADER_ID=21012 GM_TO_HALL_MSG_UPLOAD_LEADER_ID value
 * @property {number} MSG_Game_Send_Promoter_info=21011 MSG_Game_Send_Promoter_info value
 */


$root.PromoterMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[21001] = "MSG_REQ_LEVEL_INFO"] = 21001;
  values[valuesById[21002] = "MSG_REQ_PLAYERS_INCOME_INFO"] = 21002;
  values[valuesById[21003] = "MSG_REQ_INCOME_INFO"] = 21003;
  values[valuesById[21005] = "MSG_REQ_DAY_INCOME_INFO"] = 21005;
  values[valuesById[21006] = "MSG_REQ_MINE_TEAM_INFO"] = 21006;
  values[valuesById[21007] = "MSG_REQ_REWARDS_INFO"] = 21007;
  values[valuesById[21008] = "MSG_REQ_APPLY_DEPOSIT_RECORD"] = 21008;
  values[valuesById[21009] = "MSG_REQ_APPLY_DEPOSIT"] = 21009;
  values[valuesById[21010] = "MSG_REQ_UPLOAD_LEADER_ID"] = 21010;
  values[valuesById[21012] = "GM_TO_HALL_MSG_UPLOAD_LEADER_ID"] = 21012;
  values[valuesById[21011] = "MSG_Game_Send_Promoter_info"] = 21011;
  return values;
}();
/**
 * GameToHallMsgDefine enum.
 * @exports GameToHallMsgDefine
 * @enum {string}
 * @property {number} MSG_REPORT_GAME_EVENT_TO_HALL=200001001 MSG_REPORT_GAME_EVENT_TO_HALL value
 * @property {number} MSG_REPORT_GAME_MISSION_EVENT_TO_HALL=200001002 MSG_REPORT_GAME_MISSION_EVENT_TO_HALL value
 */


$root.GameToHallMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[200001001] = "MSG_REPORT_GAME_EVENT_TO_HALL"] = 200001001;
  values[valuesById[200001002] = "MSG_REPORT_GAME_MISSION_EVENT_TO_HALL"] = 200001002;
  return values;
}();
/**
 * GMCmdMsgDefine enum.
 * @exports GMCmdMsgDefine
 * @enum {string}
 * @property {number} CLIENT_GM_COMMAND=100000000 CLIENT_GM_COMMAND value
 */


$root.GMCmdMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[100000000] = "CLIENT_GM_COMMAND"] = 100000000;
  return values;
}();
/**
 * CommonMsgDefine enum.
 * @exports CommonMsgDefine
 * @enum {string}
 * @property {number} SM_SEND_COMMON_TIPS=200000001 SM_SEND_COMMON_TIPS value
 * @property {number} CM_SEND_COMMON_BUTTON_SCRIPT=200000002 CM_SEND_COMMON_BUTTON_SCRIPT value
 * @property {number} SM_SEND_COMMON_UPPER_TIPS=200000003 SM_SEND_COMMON_UPPER_TIPS value
 * @property {number} SM_SEND_DEFAULT_RESULT_TIPS=200000004 SM_SEND_DEFAULT_RESULT_TIPS value
 */


$root.CommonMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[200000001] = "SM_SEND_COMMON_TIPS"] = 200000001;
  values[valuesById[200000002] = "CM_SEND_COMMON_BUTTON_SCRIPT"] = 200000002;
  values[valuesById[200000003] = "SM_SEND_COMMON_UPPER_TIPS"] = 200000003;
  values[valuesById[200000004] = "SM_SEND_DEFAULT_RESULT_TIPS"] = 200000004;
  return values;
}();

module.exports = $root;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/Base/XTweenerIF.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '32fc0enulVIG7H7i47wstD8', 'XTweenerIF');
// Scripts/Tools/XTween/Base/XTweenerIF.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFhUd2VlblxcQmFzZVxcWFR3ZWVuZXJJRi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgWFR3ZWVuZXJTdGF0ZSB9IGZyb20gXCIuL1hUd2Vlbkdsb2JhbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBpbnRlcmZhY2UgWFR3ZWVuZXJJRlxue1xuICAgIFNldFR3ZWVuZXJEYXRhKGRhdGEpO1xuICAgIEdldFR3ZWVuZXJEYXRhKCk7XG4gICAgU2V0RGVsYXkoZGVsYXk6bnVtYmVyKTtcbiAgICBHZXREZWxheSgpO1xuICAgIFBsYXkoKTtcbiAgICBGaW5pc2goc2hvdWxkQ2FsbGJhY2s6Ym9vbGVhbik7XG4gICAgUGF1c2UoKTtcbiAgICBSZXN1bWUoKTtcbiAgICBTZXRTcGVlZChzcGVlZDpudW1iZXIpO1xuICAgIFNldFN0YXJ0Q2FsbGJhY2soc3RhcnRDYWxsYmFjazooKT0+dm9pZCk7XG4gICAgU2V0RmluaXNoQ2FsbGJhY2soZmluaXNoQ2FsbGJhY2s6KCk9PnZvaWQpO1xuICAgIEdldFN0YXRlKCk6WFR3ZWVuZXJTdGF0ZTtcbiAgICBTZXRDb250cm9sQnlQYXJlbnQoKTtcbiAgICBVcGRhdGUoZGVsdGFUaW1lOm51bWJlcik7XG4gICAgR2V0VHlwZU1hcmsoKTpzdHJpbmc7XG4gICAgR2V0Q29udHJvbEJ5UGFyZW50KCk6Ym9vbGVhbjtcbiAgICBCZVJlcGxhY2VkKCk7XG4gICAgT25FbmFibGUoKTtcbiAgICBPbkRpc2FibGUoKTtcbiAgICBPbkRlc3Ryb3koKTtcbn1cbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Components/PageViewListener.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '262f7e0YJhOoZSjRa7luEFU', 'PageViewListener');
// Scripts/Components/PageViewListener.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var PageViewListener = /** @class */ (function (_super) {
    __extends(PageViewListener, _super);
    function PageViewListener() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PageViewListener.prototype.SetScrollEventAction = function (callback) {
        this.scrollEventAction = callback;
    };
    PageViewListener.prototype.onLoad = function () {
        this.scrollEventHandler = new cc.Component.EventHandler();
        this.scrollEventHandler.target = this.node;
        this.scrollEventHandler.component = "PageViewListener";
        this.scrollEventHandler.handler = "OnScrollCallback";
        this.pageView = this.node.getComponent(cc.PageView);
        this.pageView.scrollEvents.push(this.scrollEventHandler);
    };
    PageViewListener.prototype.OnScrollCallback = function (pageView, eventType, customEventData) {
        if (this.scrollEventAction != null)
            this.scrollEventAction(pageView, eventType, customEventData);
    };
    PageViewListener = __decorate([
        ccclass
    ], PageViewListener);
    return PageViewListener;
}(cc.Component));
exports.default = PageViewListener;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcQ29tcG9uZW50c1xcUGFnZVZpZXdMaXN0ZW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBTSxJQUFBLGtCQUFtQyxFQUFsQyxvQkFBTyxFQUFFLHNCQUF5QixDQUFDO0FBRzFDO0lBQThDLG9DQUFZO0lBQTFEOztJQTJCQSxDQUFDO0lBckJVLCtDQUFvQixHQUEzQixVQUE0QixRQUFnRjtRQUV4RyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsUUFBUSxDQUFDO0lBQ3RDLENBQUM7SUFFRCxpQ0FBTSxHQUFOO1FBRUksSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMxRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDM0MsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQztRQUN2RCxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxHQUFHLGtCQUFrQixDQUFDO1FBRXJELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsMkNBQWdCLEdBQWhCLFVBQWlCLFFBQW9CLEVBQUUsU0FBK0IsRUFBRSxlQUFzQjtRQUUxRixJQUFJLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxJQUFJO1lBQzlCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUExQmdCLGdCQUFnQjtRQURwQyxPQUFPO09BQ2EsZ0JBQWdCLENBMkJwQztJQUFELHVCQUFDO0NBM0JELEFBMkJDLENBM0I2QyxFQUFFLENBQUMsU0FBUyxHQTJCekQ7a0JBM0JvQixnQkFBZ0IiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7Y2NjbGFzcywgcHJvcGVydHl9ID0gY2MuX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2VWaWV3TGlzdGVuZXIgZXh0ZW5kcyBjYy5Db21wb25lbnQgXHJcbntcclxuICAgIHByaXZhdGUgcGFnZVZpZXc6Y2MuUGFnZVZpZXc7XHJcbiAgICBwcml2YXRlIHNjcm9sbEV2ZW50SGFuZGxlcjpjYy5Db21wb25lbnQuRXZlbnRIYW5kbGVyO1xyXG4gICAgcHJpdmF0ZSBzY3JvbGxFdmVudEFjdGlvbjoocGFnZVZpZXc6Y2MuUGFnZVZpZXcsIGV2ZW50VHlwZTpjYy5QYWdlVmlldy5FdmVudFR5cGUsIGRhdGE6YW55KT0+dm9pZDtcclxuXHJcbiAgICBwdWJsaWMgU2V0U2Nyb2xsRXZlbnRBY3Rpb24oY2FsbGJhY2s6KHBhZ2VWaWV3OmNjLlBhZ2VWaWV3LCBldmVudFR5cGU6Y2MuUGFnZVZpZXcuRXZlbnRUeXBlLCBkYXRhOmFueSk9PnZvaWQpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5zY3JvbGxFdmVudEFjdGlvbiA9IGNhbGxiYWNrO1xyXG4gICAgfVxyXG5cclxuICAgIG9uTG9hZCgpIFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsRXZlbnRIYW5kbGVyID0gbmV3IGNjLkNvbXBvbmVudC5FdmVudEhhbmRsZXIoKTtcclxuICAgICAgICB0aGlzLnNjcm9sbEV2ZW50SGFuZGxlci50YXJnZXQgPSB0aGlzLm5vZGU7XHJcbiAgICAgICAgdGhpcy5zY3JvbGxFdmVudEhhbmRsZXIuY29tcG9uZW50ID0gXCJQYWdlVmlld0xpc3RlbmVyXCI7XHJcbiAgICAgICAgdGhpcy5zY3JvbGxFdmVudEhhbmRsZXIuaGFuZGxlciA9IFwiT25TY3JvbGxDYWxsYmFja1wiO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMucGFnZVZpZXcgPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KGNjLlBhZ2VWaWV3KTtcclxuICAgICAgICB0aGlzLnBhZ2VWaWV3LnNjcm9sbEV2ZW50cy5wdXNoKHRoaXMuc2Nyb2xsRXZlbnRIYW5kbGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBPblNjcm9sbENhbGxiYWNrKHBhZ2VWaWV3OmNjLlBhZ2VWaWV3LCBldmVudFR5cGU6Y2MuUGFnZVZpZXcuRXZlbnRUeXBlLCBjdXN0b21FdmVudERhdGE6c3RyaW5nKSBcclxuICAgIHtcclxuICAgICAgICBpZiAodGhpcy5zY3JvbGxFdmVudEFjdGlvbiAhPSBudWxsKVxyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbEV2ZW50QWN0aW9uKHBhZ2VWaWV3LCBldmVudFR5cGUsIGN1c3RvbUV2ZW50RGF0YSk7XHJcbiAgICB9XHJcbn1cclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/migration/use_v2.0.x_cc.Toggle_event.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '51c03Th/vVDAJLROlosP3p/', 'use_v2.0.x_cc.Toggle_event');
// migration/use_v2.0.x_cc.Toggle_event.js

"use strict";

/*
 * This script is automatically generated by Cocos Creator and is only compatible with projects prior to v2.1.0.
 * You do not need to manually add this script in any other project.
 * If you don't use cc.Toggle in your project, you can delete this script directly.
 * If your project is hosted in VCS such as git, submit this script together.
 *
 * 此脚本由 Cocos Creator 自动生成，仅用于兼容 v2.1.0 之前版本的工程，
 * 你无需在任何其它项目中手动添加此脚本。
 * 如果你的项目中没用到 Toggle，可直接删除该脚本。
 * 如果你的项目有托管于 git 等版本库，请将此脚本一并上传。
 */
if (cc.Toggle) {
  // Whether the 'toggle' and 'checkEvents' events are fired when 'toggle.check() / toggle.uncheck()' is called in the code
  // 在代码中调用 'toggle.check() / toggle.uncheck()' 时是否触发 'toggle' 与 'checkEvents' 事件
  cc.Toggle._triggerEventInScript_check = true;
}

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcbWlncmF0aW9uXFx1c2VfdjIuMC54X2NjLlRvZ2dsZV9ldmVudC5qcyJdLCJuYW1lcyI6WyJjYyIsIlRvZ2dsZSIsIl90cmlnZ2VyRXZlbnRJblNjcmlwdF9jaGVjayJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7QUFZQSxJQUFJQSxFQUFFLENBQUNDLE1BQVAsRUFBZTtBQUNYO0FBQ0E7QUFDQUQsRUFBQUEsRUFBRSxDQUFDQyxNQUFILENBQVVDLDJCQUFWLEdBQXdDLElBQXhDO0FBQ0giLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBUaGlzIHNjcmlwdCBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBDb2NvcyBDcmVhdG9yIGFuZCBpcyBvbmx5IGNvbXBhdGlibGUgd2l0aCBwcm9qZWN0cyBwcmlvciB0byB2Mi4xLjAuXG4gKiBZb3UgZG8gbm90IG5lZWQgdG8gbWFudWFsbHkgYWRkIHRoaXMgc2NyaXB0IGluIGFueSBvdGhlciBwcm9qZWN0LlxuICogSWYgeW91IGRvbid0IHVzZSBjYy5Ub2dnbGUgaW4geW91ciBwcm9qZWN0LCB5b3UgY2FuIGRlbGV0ZSB0aGlzIHNjcmlwdCBkaXJlY3RseS5cbiAqIElmIHlvdXIgcHJvamVjdCBpcyBob3N0ZWQgaW4gVkNTIHN1Y2ggYXMgZ2l0LCBzdWJtaXQgdGhpcyBzY3JpcHQgdG9nZXRoZXIuXG4gKlxuICog5q2k6ISa5pys55SxIENvY29zIENyZWF0b3Ig6Ieq5Yqo55Sf5oiQ77yM5LuF55So5LqO5YW85a65IHYyLjEuMCDkuYvliY3niYjmnKznmoTlt6XnqIvvvIxcbiAqIOS9oOaXoOmcgOWcqOS7u+S9leWFtuWug+mhueebruS4reaJi+WKqOa3u+WKoOatpOiEmuacrOOAglxuICog5aaC5p6c5L2g55qE6aG555uu5Lit5rKh55So5YiwIFRvZ2dsZe+8jOWPr+ebtOaOpeWIoOmZpOivpeiEmuacrOOAglxuICog5aaC5p6c5L2g55qE6aG555uu5pyJ5omY566h5LqOIGdpdCDnrYnniYjmnKzlupPvvIzor7flsIbmraTohJrmnKzkuIDlubbkuIrkvKDjgIJcbiAqL1xuXG5pZiAoY2MuVG9nZ2xlKSB7XG4gICAgLy8gV2hldGhlciB0aGUgJ3RvZ2dsZScgYW5kICdjaGVja0V2ZW50cycgZXZlbnRzIGFyZSBmaXJlZCB3aGVuICd0b2dnbGUuY2hlY2soKSAvIHRvZ2dsZS51bmNoZWNrKCknIGlzIGNhbGxlZCBpbiB0aGUgY29kZVxuICAgIC8vIOWcqOS7o+eggeS4reiwg+eUqCAndG9nZ2xlLmNoZWNrKCkgLyB0b2dnbGUudW5jaGVjaygpJyDml7bmmK/lkKbop6blj5EgJ3RvZ2dsZScg5LiOICdjaGVja0V2ZW50cycg5LqL5Lu2XG4gICAgY2MuVG9nZ2xlLl90cmlnZ2VyRXZlbnRJblNjcmlwdF9jaGVjayA9IHRydWU7XG59XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Global/LocalStorageKey.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f55602YuFZOVo9vKXDvmdHP', 'LocalStorageKey');
// Scripts/Global/LocalStorageKey.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LocalStorageKey = /** @class */ (function () {
    function LocalStorageKey() {
    }
    LocalStorageKey.Deviceid = "Deviceid";
    LocalStorageKey.LoginPhone = "LoginPhone";
    LocalStorageKey.LoginPassword = "LoginPassword";
    LocalStorageKey.RememberAccount = "RememberAccount";
    LocalStorageKey.LoginUid = "LoginUid";
    LocalStorageKey.LoginIP = "LoginIP";
    LocalStorageKey.LoginPort = "LoginPort";
    LocalStorageKey.BgmVolume = "BgmVolume";
    LocalStorageKey.AudioVolume = "AudioVolume";
    return LocalStorageKey;
}());
exports.default = LocalStorageKey;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcR2xvYmFsXFxMb2NhbFN0b3JhZ2VLZXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtJQUFBO0lBWUEsQ0FBQztJQVZpQix3QkFBUSxHQUFHLFVBQVUsQ0FBQztJQUN0QiwwQkFBVSxHQUFHLFlBQVksQ0FBQztJQUMxQiw2QkFBYSxHQUFHLGVBQWUsQ0FBQztJQUNoQywrQkFBZSxHQUFHLGlCQUFpQixDQUFDO0lBQ3BDLHdCQUFRLEdBQUcsVUFBVSxDQUFDO0lBQ3RCLHVCQUFPLEdBQUcsU0FBUyxDQUFDO0lBQ3BCLHlCQUFTLEdBQUcsV0FBVyxDQUFDO0lBRXhCLHlCQUFTLEdBQUcsV0FBVyxDQUFDO0lBQ3hCLDJCQUFXLEdBQUcsYUFBYSxDQUFDO0lBQzlDLHNCQUFDO0NBWkQsQUFZQyxJQUFBO2tCQVpvQixlQUFlIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9jYWxTdG9yYWdlS2V5XG57XG4gICAgcHVibGljIHN0YXRpYyBEZXZpY2VpZCA9IFwiRGV2aWNlaWRcIjtcbiAgICBwdWJsaWMgc3RhdGljIExvZ2luUGhvbmUgPSBcIkxvZ2luUGhvbmVcIjtcbiAgICBwdWJsaWMgc3RhdGljIExvZ2luUGFzc3dvcmQgPSBcIkxvZ2luUGFzc3dvcmRcIjtcbiAgICBwdWJsaWMgc3RhdGljIFJlbWVtYmVyQWNjb3VudCA9IFwiUmVtZW1iZXJBY2NvdW50XCI7XG4gICAgcHVibGljIHN0YXRpYyBMb2dpblVpZCA9IFwiTG9naW5VaWRcIjtcbiAgICBwdWJsaWMgc3RhdGljIExvZ2luSVAgPSBcIkxvZ2luSVBcIjtcbiAgICBwdWJsaWMgc3RhdGljIExvZ2luUG9ydCA9IFwiTG9naW5Qb3J0XCI7XG5cbiAgICBwdWJsaWMgc3RhdGljIEJnbVZvbHVtZSA9IFwiQmdtVm9sdW1lXCI7XG4gICAgcHVibGljIHN0YXRpYyBBdWRpb1ZvbHVtZSA9IFwiQXVkaW9Wb2x1bWVcIjtcbn1cbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Network/Http/HttpRequest.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e03d8M6WVJHt6H2HYm4k7vF', 'HttpRequest');
// Scripts/Network/Http/HttpRequest.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Global_1 = require("../../Global/Global");
var HttpRequest = /** @class */ (function () {
    function HttpRequest() {
    }
    HttpRequest.Get = function (url, successCallback, failCallback, timeout) {
        var xhr = new XMLHttpRequest();
        xhr.timeout = timeout;
        xhr.onreadystatechange = function () {
            // cc.error("xhr.readyState  " + xhr.readyState);
            if (xhr.readyState == 4) {
                if (xhr.status >= 200 && xhr.status < 400) {
                    var response = xhr.responseText;
                    successCallback(response);
                }
                else {
                    failCallback("err code: " + xhr.status + " err msg: " + xhr.statusText);
                }
            }
            // else if(xhr.readyState == 1)
            // {
            //     xhr.setRequestHeader("Access-Control-Allow-Origin","*");
            // }
        };
        xhr.open("GET", url, true);
        xhr.send();
    };
    HttpRequest.Post = function (url, postParm, successCallback, failCallback, timeout, contentType) {
        if (timeout === void 0) { timeout = 10000; }
        if (Global_1.default.showLog == true)
            cc.error("HttpRequest Post url " + url);
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            // cc.error("Post xhr.readyState  " + xhr.readyState);
            if (xhr.readyState == 4) {
                if (xhr.status >= 200 && xhr.status < 400) {
                    var response = xhr.responseText;
                    successCallback(response);
                }
                else {
                    cc.error("err code: " + xhr.status + " err msg: " + xhr.statusText + " xhr.responseText " + xhr.responseText);
                    failCallback("网络请求错误");
                }
            }
        };
        xhr.open("POST", url, true);
        xhr.timeout = timeout;
        xhr.setRequestHeader("Content-Type", contentType == null ? "application/x-www-form-urlencoded" : contentType);
        var jsongStr = JSON.stringify(postParm);
        // cc.error("jsongStr " + jsongStr);
        // let bytes = new TextEncoder().encode(jsongStr);
        // xhr.send(bytes);
        xhr.send(jsongStr);
    };
    return HttpRequest;
}());
exports.default = HttpRequest;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTmV0d29ya1xcSHR0cFxcSHR0cFJlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSw4Q0FBeUM7QUFFekM7SUFBQTtJQStEQSxDQUFDO0lBN0RpQixlQUFHLEdBQWpCLFVBQWtCLEdBQVUsRUFBQyxlQUE4QixFQUFDLFlBQTJCLEVBQUMsT0FBYztRQUVsRyxJQUFJLEdBQUcsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQy9CLEdBQUcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBRXRCLEdBQUcsQ0FBQyxrQkFBa0IsR0FBRztZQUNyQixpREFBaUQ7WUFDakQsSUFBSSxHQUFHLENBQUMsVUFBVSxJQUFJLENBQUMsRUFDdkI7Z0JBQ0ksSUFBRyxHQUFHLENBQUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFDeEM7b0JBQ0ksSUFBSSxRQUFRLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQztvQkFDaEMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUM3QjtxQkFFRDtvQkFDSSxZQUFZLENBQUMsWUFBWSxHQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsWUFBWSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDMUU7YUFDSjtZQUNELCtCQUErQjtZQUMvQixJQUFJO1lBQ0osK0RBQStEO1lBQy9ELElBQUk7UUFDUixDQUFDLENBQUM7UUFDRixHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDM0IsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2YsQ0FBQztJQUVhLGdCQUFJLEdBQWxCLFVBQW1CLEdBQVUsRUFBQyxRQUE0QixFQUFDLGVBQThCLEVBQUMsWUFBMkIsRUFBQyxPQUFvQixFQUFDLFdBQW1CO1FBQXhDLHdCQUFBLEVBQUEsZUFBb0I7UUFFdEksSUFBRyxnQkFBTSxDQUFDLE9BQU8sSUFBSSxJQUFJO1lBQ3JCLEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDNUMsSUFBSSxHQUFHLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztRQUUvQixHQUFHLENBQUMsa0JBQWtCLEdBQUc7WUFDckIsc0RBQXNEO1lBQ3RELElBQUksR0FBRyxDQUFDLFVBQVUsSUFBSSxDQUFDLEVBQ3ZCO2dCQUNJLElBQUcsR0FBRyxDQUFDLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQ3hDO29CQUNJLElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUM7b0JBQ2hDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDN0I7cUJBRUQ7b0JBQ0ksRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUUsR0FBRyxDQUFDLE1BQU0sR0FBRyxZQUFZLEdBQUcsR0FBRyxDQUFDLFVBQVUsR0FBRyxvQkFBb0IsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBQzdHLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDMUI7YUFDSjtRQUNMLENBQUMsQ0FBQztRQUNGLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN0QixHQUFHLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUU3RyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLG9DQUFvQztRQUVwQyxrREFBa0Q7UUFDbEQsbUJBQW1CO1FBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUNMLGtCQUFDO0FBQUQsQ0EvREEsQUErREMsSUFBQSIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjY0MgZnJvbSBcIi4uLy4uL1Rvb2xzL2NjQ1wiO1xuaW1wb3J0IEdsb2JhbCBmcm9tIFwiLi4vLi4vR2xvYmFsL0dsb2JhbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIdHRwUmVxdWVzdFxue1xuICAgIHB1YmxpYyBzdGF0aWMgR2V0KHVybDpzdHJpbmcsc3VjY2Vzc0NhbGxiYWNrOihzdHJpbmcpPT52b2lkLGZhaWxDYWxsYmFjazooc3RyaW5nKT0+dm9pZCx0aW1lb3V0Om51bWJlcilcbiAgICB7XG4gICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgeGhyLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgICBcbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIGNjLmVycm9yKFwieGhyLnJlYWR5U3RhdGUgIFwiICsgeGhyLnJlYWR5U3RhdGUpO1xuICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09IDQpIFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCA0MDApXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSB4aHIucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBmYWlsQ2FsbGJhY2soXCJlcnIgY29kZTogXCIrIHhoci5zdGF0dXMgKyBcIiBlcnIgbXNnOiBcIiArIHhoci5zdGF0dXNUZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbHNlIGlmKHhoci5yZWFkeVN0YXRlID09IDEpXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIixcIipcIik7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgIH07XG4gICAgICAgIHhoci5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XG4gICAgICAgIHhoci5zZW5kKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBQb3N0KHVybDpzdHJpbmcscG9zdFBhcm06e1tuYW1lOnN0cmluZ106YW55fSxzdWNjZXNzQ2FsbGJhY2s6KHN0cmluZyk9PnZvaWQsZmFpbENhbGxiYWNrOihzdHJpbmcpPT52b2lkLHRpbWVvdXQ6bnVtYmVyPTEwMDAwLGNvbnRlbnRUeXBlPzpzdHJpbmcpXG4gICAge1xuICAgICAgICBpZihHbG9iYWwuc2hvd0xvZyA9PSB0cnVlKVxuICAgICAgICAgICAgY2MuZXJyb3IoXCJIdHRwUmVxdWVzdCBQb3N0IHVybCBcIiArIHVybCk7XG4gICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgXG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBjYy5lcnJvcihcIlBvc3QgeGhyLnJlYWR5U3RhdGUgIFwiICsgeGhyLnJlYWR5U3RhdGUpO1xuICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09IDQpIFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCA0MDApXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSB4aHIucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjYy5lcnJvcihcImVyciBjb2RlOiBcIisgeGhyLnN0YXR1cyArIFwiIGVyciBtc2c6IFwiICsgeGhyLnN0YXR1c1RleHQgKyBcIiB4aHIucmVzcG9uc2VUZXh0IFwiICsgeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGZhaWxDYWxsYmFjayhcIue9kee7nOivt+axgumUmeivr1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHhoci5vcGVuKFwiUE9TVFwiLCB1cmwsIHRydWUpO1xuICAgICAgICB4aHIudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsY29udGVudFR5cGUgPT0gbnVsbCA/IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgOiBjb250ZW50VHlwZSk7XG4gICAgICAgIFxuICAgICAgICBsZXQganNvbmdTdHIgPSBKU09OLnN0cmluZ2lmeShwb3N0UGFybSk7XG4gICAgICAgIC8vIGNjLmVycm9yKFwianNvbmdTdHIgXCIgKyBqc29uZ1N0cik7XG5cbiAgICAgICAgLy8gbGV0IGJ5dGVzID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGpzb25nU3RyKTtcbiAgICAgICAgLy8geGhyLnNlbmQoYnl0ZXMpO1xuICAgICAgICB4aHIuc2VuZChqc29uZ1N0cik7XG4gICAgfVxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Modules/Controllers/ControllerToast.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4655dWcZLtBoK6ydM/0sqSD', 'ControllerToast');
// Scripts/Modules/Controllers/ControllerToast.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Controller_1 = require("../../MVCFramework/Controller");
var MessageNames_1 = require("../MessageNames");
var MVCRegister_1 = require("../MVCRegister");
var ControllerToast = /** @class */ (function (_super) {
    __extends(ControllerToast, _super);
    function ControllerToast() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ControllerToast.prototype.Init = function () {
    };
    ControllerToast.prototype.Clean = function () {
    };
    ControllerToast.prototype.OnReceiveMessage = function (msg, msgBody) {
        var _this = this;
        if (msg == MessageNames_1.default.ShowToastUI) {
            if (this.view == null) {
                this.view = this.GetView(MVCRegister_1.ViewNames.ViewToast);
            }
            this.view.Show(function () {
                _this.view.AddToast(msgBody);
            });
        }
    };
    return ControllerToast;
}(Controller_1.default));
exports.default = ControllerToast;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTW9kdWxlc1xcQ29udHJvbGxlcnNcXENvbnRyb2xsZXJUb2FzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0REFBdUQ7QUFFdkQsZ0RBQTJDO0FBQzNDLDhDQUEyQztBQUUzQztJQUE2QyxtQ0FBVTtJQUF2RDs7SUEwQkEsQ0FBQztJQXZCVSw4QkFBSSxHQUFYO0lBR0EsQ0FBQztJQUVNLCtCQUFLLEdBQVo7SUFHQSxDQUFDO0lBRU0sMENBQWdCLEdBQXZCLFVBQXdCLEdBQVUsRUFBQyxPQUFXO1FBQTlDLGlCQVlDO1FBVkcsSUFBRyxHQUFHLElBQUksc0JBQVksQ0FBQyxXQUFXLEVBQ2xDO1lBQ0ksSUFBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksRUFDcEI7Z0JBQ0ksSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLHVCQUFTLENBQUMsU0FBUyxDQUFjLENBQUM7YUFDOUQ7WUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDWCxLQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFpQixDQUFDLENBQUM7WUFDMUMsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7SUFDTCxzQkFBQztBQUFELENBMUJBLEFBMEJDLENBMUI0QyxvQkFBVSxHQTBCdEQiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29udHJvbGxlciBmcm9tIFwiLi4vLi4vTVZDRnJhbWV3b3JrL0NvbnRyb2xsZXJcIjtcbmltcG9ydCBWaWV3VG9hc3QgZnJvbSBcIi4uL1ZpZXdzL1ZpZXdUb2FzdFwiO1xuaW1wb3J0IE1lc3NhZ2VOYW1lcyBmcm9tIFwiLi4vTWVzc2FnZU5hbWVzXCI7XG5pbXBvcnQgeyBWaWV3TmFtZXMgfSBmcm9tIFwiLi4vTVZDUmVnaXN0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udHJvbGxlclRvYXN0IGV4dGVuZHMgQ29udHJvbGxlclxue1xuICAgIHByaXZhdGUgdmlldzpWaWV3VG9hc3Q7XG4gICAgcHVibGljIEluaXQoKVxuICAgIHtcblxuICAgIH1cblxuICAgIHB1YmxpYyBDbGVhbigpXG4gICAge1xuICAgICAgICBcbiAgICB9XG5cbiAgICBwdWJsaWMgT25SZWNlaXZlTWVzc2FnZShtc2c6c3RyaW5nLG1zZ0JvZHk6YW55KVxuICAgIHtcbiAgICAgICAgaWYobXNnID09IE1lc3NhZ2VOYW1lcy5TaG93VG9hc3RVSSlcbiAgICAgICAge1xuICAgICAgICAgICAgaWYodGhpcy52aWV3ID09IG51bGwpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3ID0gdGhpcy5HZXRWaWV3KFZpZXdOYW1lcy5WaWV3VG9hc3QpIGFzIFZpZXdUb2FzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudmlldy5TaG93KCgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LkFkZFRvYXN0KG1zZ0JvZHkgYXMgc3RyaW5nKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Modules/Controllers/ControllerApp.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6d59aw4qbZE2ZjO4Sqc8LWJ', 'ControllerApp');
// Scripts/Modules/Controllers/ControllerApp.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Controller_1 = require("../../MVCFramework/Controller");
var MessageNames_1 = require("../MessageNames");
var MVCRegister_1 = require("../MVCRegister");
var Toast_1 = require("../../Tools/Toast");
var ImageTool_1 = require("../../JsTool/ImageTool");
var Language_1 = require("../../Global/Language");
var ControllerChat = /** @class */ (function (_super) {
    __extends(ControllerChat, _super);
    function ControllerChat() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.testImage = new Image();
        return _this;
    }
    ControllerChat.prototype.Init = function () {
        this.modelApp = this.GetModel(MVCRegister_1.ModelNames.ModelApp);
        this.modelApp.SetSelfPlayerID(window["selfId"]);
        this.modelApp.SetbankProxyId(window["proxyId"]);
    };
    ControllerChat.prototype.Clean = function () {
    };
    ControllerChat.prototype.OnReceiveMessage = function (msg, msgBody) {
        console.log("msg", msg);
        if (msg == MessageNames_1.default.StartLogin) {
            //   this.modelApp.StartLogin();
            this.ShowAppStartView();
        }
        else if (msg == MessageNames_1.default.ShowAppStartView) {
            this.ShowAppStartView();
        }
        else if (msg == MessageNames_1.default.ShowProxyInfo) {
            this.UpDateProxyInfo(msgBody);
        }
        else if (msg == MessageNames_1.default.SubmitDeposit) {
            this.ShowSubmitDeposit(msgBody);
        }
        else if (msg == MessageNames_1.default.SubmitOrder) {
            this.DoneSubmitOrder(msgBody);
        }
    };
    ControllerChat.prototype.UpDateProxyInfo = function (data) {
        if (!data.bankTypes || data.bankTypes.length < 1) {
            return;
        }
        this.viewAppStart.ShowComByType(1);
        //for (let i = 0; i < data.bankTypes.length; i++) {
        this.viewAppStart.UpdataPage(data);
        //}
    };
    ControllerChat.prototype.ShowSubmitDeposit = function (data) {
        this.viewAppStart.ShowComByType(2);
        this.viewAppStart.ShowSubmitInfo(data);
    };
    ControllerChat.prototype.DoneSubmitOrder = function (data) {
        this.viewAppStart.SetEnableButton(false);
    };
    ControllerChat.prototype.ShowAppStartView = function () {
        var _this = this;
        if (this.viewAppStart == null) {
            this.viewAppStart = this.GetView(MVCRegister_1.ViewNames.ViewApp);
            this.viewAppStart.SetOnClick("BtnBack", function () {
                cc.log("退出");
            });
            this.viewAppStart.SetOnClick("BtnSubmit", function () {
                if (_this.viewAppStart.GetEditBoxStr() == null) {
                    Toast_1.default.Show(Language_1.default.Chargetip1);
                    return;
                }
                if (Number(_this.viewAppStart.GetEditBoxStr()) <= 0) {
                    Toast_1.default.Show(Language_1.default.Chargetip2);
                    return;
                }
                cc.log("确认充值", _this.modelApp.GetBankType());
                if (!_this.modelApp.GetBankType()) {
                    Toast_1.default.Show(Language_1.default.Chargetip3);
                    // return;
                }
                _this.viewAppStart.ShowComByType(2);
                var bankType = _this.modelApp.GetBankType();
                var amount = Number(_this.viewAppStart.GetEditBoxStr());
                _this.modelApp.ReqSubmitDeposit(bankType, amount);
                //充值数据
            });
            //界面2逻辑按钮
            this.viewAppStart.SetOnClick("BtnUpload", function () {
                cc.log("上传");
                ImageTool_1.ImageTool.Get(function (imageData) {
                    _this.testImage.onload = function () {
                        if (imageData.length == 0) {
                            Toast_1.default.Show(Language_1.default.Chargetip1);
                            return;
                        }
                        _this.viewAppStart.ShowImageUpload(imageData);
                        _this.viewAppStart.SetEnableButton(true);
                    };
                    _this.testImage.src = imageData;
                });
            });
            this.viewAppStart.SetOnClick("BtnSubmit_info", function () {
                cc.log("确认订单");
                if (_this.viewAppStart.GetEnableButton()) {
                    var order = _this.modelApp.GetOrderNoe();
                    var desc = _this.viewAppStart.GetEditBoxStrBeiZhu();
                    var imageData = _this.testImage.src;
                    _this.modelApp.ReqSubmitOrder(order, imageData, desc);
                }
            });
            this.viewAppStart.SetOnClick("BtnBack_info", function () {
                cc.log("离开info界面");
                _this.viewAppStart.ShowComByType(1);
            });
            this.viewAppStart.addBtnCopyClick();
        }
        this.viewAppStart.SetSelfPlayerID(window["selfId"]);
        this.viewAppStart.Show(function () {
            // 请求协议
            // OpenNetworkingUI.Hide();
            _this.viewAppStart.ShowComByType(1);
            _this.modelApp.ReqProxyInfo();
        });
    };
    return ControllerChat;
}(Controller_1.default));
exports.default = ControllerChat;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Modules/Controllers/ControllerDialogNormal.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '502a7e2qpJOZp9NEaZT99wv', 'ControllerDialogNormal');
// Scripts/Modules/Controllers/ControllerDialogNormal.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Controller_1 = require("../../MVCFramework/Controller");
var MessageNames_1 = require("../MessageNames");
var MVCRegister_1 = require("../MVCRegister");
var ControllerDialogNormal = /** @class */ (function (_super) {
    __extends(ControllerDialogNormal, _super);
    function ControllerDialogNormal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ControllerDialogNormal.prototype.Init = function () {
    };
    ControllerDialogNormal.prototype.Clean = function () {
    };
    ControllerDialogNormal.prototype.OnReceiveMessage = function (msg, msgBody) {
        var _this = this;
        if (msg == MessageNames_1.default.ShowDialog) {
            if (this.view == null) {
                this.view = this.GetView(MVCRegister_1.ViewNames.ViewDialogNormal);
            }
            this.view.Show(function () {
                _this.view.SetData(msgBody);
            });
        }
        // else if(msg == MessageNames.TryToCloseDialogWithContent)
        // {
        //     if(this.view != null && this.view.isShow == true && this.view.LabelContent.string == msgBody)
        //     {
        //         this.view.Hide();
        //     }
        // }
    };
    return ControllerDialogNormal;
}(Controller_1.default));
exports.default = ControllerDialogNormal;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTW9kdWxlc1xcQ29udHJvbGxlcnNcXENvbnRyb2xsZXJEaWFsb2dOb3JtYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNERBQXVEO0FBRXZELGdEQUEyQztBQUMzQyw4Q0FBMkM7QUFHM0M7SUFBb0QsMENBQVU7SUFBOUQ7O0lBbUNBLENBQUM7SUEvQlUscUNBQUksR0FBWDtJQUdBLENBQUM7SUFFTSxzQ0FBSyxHQUFaO0lBR0EsQ0FBQztJQUVNLGlEQUFnQixHQUF2QixVQUF3QixHQUFVLEVBQUMsT0FBVztRQUE5QyxpQkFtQkM7UUFqQkcsSUFBRyxHQUFHLElBQUksc0JBQVksQ0FBQyxVQUFVLEVBQ2pDO1lBQ0ksSUFBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksRUFDcEI7Z0JBQ0ksSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLHVCQUFTLENBQUMsZ0JBQWdCLENBQXFCLENBQUM7YUFDNUU7WUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDWCxLQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFxQixDQUFDLENBQUM7WUFDN0MsQ0FBQyxDQUFDLENBQUM7U0FDTjtRQUNELDJEQUEyRDtRQUMzRCxJQUFJO1FBQ0osb0dBQW9HO1FBQ3BHLFFBQVE7UUFDUiw0QkFBNEI7UUFDNUIsUUFBUTtRQUNSLElBQUk7SUFDUixDQUFDO0lBRUwsNkJBQUM7QUFBRCxDQW5DQSxBQW1DQyxDQW5DbUQsb0JBQVUsR0FtQzdEIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbnRyb2xsZXIgZnJvbSBcIi4uLy4uL01WQ0ZyYW1ld29yay9Db250cm9sbGVyXCI7XG5pbXBvcnQgVmlld0RpYWxvZ05vcm1hbCBmcm9tIFwiLi4vVmlld3MvVmlld0RpYWxvZ05vcm1hbFwiO1xuaW1wb3J0IE1lc3NhZ2VOYW1lcyBmcm9tIFwiLi4vTWVzc2FnZU5hbWVzXCI7XG5pbXBvcnQgeyBWaWV3TmFtZXMgfSBmcm9tIFwiLi4vTVZDUmVnaXN0ZXJcIjtcbmltcG9ydCB7IERpYWxvZ0RhdGEgfSBmcm9tIFwiLi4vLi4vVG9vbHMvRGlhbG9nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xsZXJEaWFsb2dOb3JtYWwgZXh0ZW5kcyBDb250cm9sbGVyIFxue1xuICAgIHByaXZhdGUgdmlldzpWaWV3RGlhbG9nTm9ybWFsO1xuXG4gICAgcHVibGljIEluaXQoKVxuICAgIHtcblxuICAgIH1cblxuICAgIHB1YmxpYyBDbGVhbigpXG4gICAge1xuICAgICAgICBcbiAgICB9XG5cbiAgICBwdWJsaWMgT25SZWNlaXZlTWVzc2FnZShtc2c6c3RyaW5nLG1zZ0JvZHk6YW55KVxuICAgIHtcbiAgICAgICAgaWYobXNnID09IE1lc3NhZ2VOYW1lcy5TaG93RGlhbG9nKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZih0aGlzLnZpZXcgPT0gbnVsbClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcgPSB0aGlzLkdldFZpZXcoVmlld05hbWVzLlZpZXdEaWFsb2dOb3JtYWwpIGFzIFZpZXdEaWFsb2dOb3JtYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnZpZXcuU2hvdygoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5TZXREYXRhKG1zZ0JvZHkgYXMgRGlhbG9nRGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlbHNlIGlmKG1zZyA9PSBNZXNzYWdlTmFtZXMuVHJ5VG9DbG9zZURpYWxvZ1dpdGhDb250ZW50KVxuICAgICAgICAvLyB7XG4gICAgICAgIC8vICAgICBpZih0aGlzLnZpZXcgIT0gbnVsbCAmJiB0aGlzLnZpZXcuaXNTaG93ID09IHRydWUgJiYgdGhpcy52aWV3LkxhYmVsQ29udGVudC5zdHJpbmcgPT0gbXNnQm9keSlcbiAgICAgICAgLy8gICAgIHtcbiAgICAgICAgLy8gICAgICAgICB0aGlzLnZpZXcuSGlkZSgpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9XG4gICAgfVxuXG59XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Modules/MVCRegister.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '21676ViAZxK/oPxOZEkCSpU', 'MVCRegister');
// Scripts/Modules/MVCRegister.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MessageNames_1 = require("./MessageNames");
var ControllerDialogNormal_1 = require("./Controllers/ControllerDialogNormal");
var ViewDialogNormal_1 = require("./Views/ViewDialogNormal");
var ViewToast_1 = require("./Views/ViewToast");
var ControllerToast_1 = require("./Controllers/ControllerToast");
var ViewOpenNetworking_1 = require("./Views/ViewOpenNetworking");
var ControllerOpenNetworking_1 = require("./Controllers/ControllerOpenNetworking");
var ViewApp_1 = require("./Views/ViewApp");
var ControllerApp_1 = require("./Controllers/ControllerApp");
var ModelApp_1 = require("./Models/ModelApp");
//---------->>>>> ModelNames
var ModelNames = /** @class */ (function () {
    function ModelNames() {
    }
    ModelNames.ModelApp = "ModelApp";
    return ModelNames;
}());
exports.ModelNames = ModelNames;
//---------->>>>> ViewNames
var ViewNames = /** @class */ (function () {
    function ViewNames() {
    }
    ViewNames.ViewDialogNormal = "ViewDialogNormal";
    ViewNames.ViewToast = "ViewToast";
    ViewNames.ViewOpenNetworking = "ViewOpenNetworking";
    ViewNames.ViewApp = "ViewApp";
    return ViewNames;
}());
exports.ViewNames = ViewNames;
//---------->>>>> ControllerNames
var ControllerNames = /** @class */ (function () {
    function ControllerNames() {
    }
    ControllerNames.ControllerToast = "ControllerToast";
    ControllerNames.ControllerDialogNormal = "ControllerDialogNormal";
    ControllerNames.ControllerOpenNetworking = "ControllerOpenNetworking";
    ControllerNames.ControllerApp = "ControllerApp";
    return ControllerNames;
}());
exports.ControllerNames = ControllerNames;
var MVCRegister = /** @class */ (function () {
    function MVCRegister() {
    }
    MVCRegister.AddModels = function () {
        this.dicModels = {};
        this.dicModels[ModelNames.ModelApp] = function () {
            return new ModelApp_1.default();
        };
    };
    MVCRegister.AddViews = function () {
        this.dicViews = {};
        //---------->>>>> Register Views HERE
        this.dicViews[ViewNames.ViewDialogNormal] = function () {
            return new ViewDialogNormal_1.default();
        };
        this.dicViews[ViewNames.ViewToast] = function () {
            return new ViewToast_1.default();
        };
        this.dicViews[ViewNames.ViewOpenNetworking] = function () {
            return new ViewOpenNetworking_1.default();
        };
        this.dicViews[ViewNames.ViewApp] = function () {
            return new ViewApp_1.default();
        };
    };
    MVCRegister.AddControllers = function () {
        this.dicControllers = {};
        //---------->>>>> Register Controllers HERE
        this.dicControllers[ControllerNames.ControllerDialogNormal] = function () {
            return new ControllerDialogNormal_1.default();
        };
        this.dicControllers[ControllerNames.ControllerToast] = function () {
            return new ControllerToast_1.default();
        };
        this.dicControllers[ControllerNames.ControllerOpenNetworking] = function () {
            return new ControllerOpenNetworking_1.default();
        };
        this.dicControllers[ControllerNames.ControllerApp] = function () {
            return new ControllerApp_1.default();
        };
    };
    MVCRegister.AddControllerMsgs = function () {
        this.dicControllerMsgListening = {};
        //---------->>>>> Register Listening Messages HERE
        this.dicControllerMsgListening[ControllerNames.ControllerDialogNormal] = [MessageNames_1.default.ShowDialog];
        this.dicControllerMsgListening[ControllerNames.ControllerToast] = [MessageNames_1.default.ShowToastUI];
        this.dicControllerMsgListening[ControllerNames.ControllerOpenNetworking] = [MessageNames_1.default.OpenNetworkLoading];
        this.dicControllerMsgListening[ControllerNames.ControllerApp] = [
            MessageNames_1.default.StartLogin,
        ];
    };
    MVCRegister.Init = function () {
        this.AddModels();
        this.AddViews();
        this.AddControllers();
        this.AddControllerMsgs();
    };
    //--------->  以下内容框架调用
    MVCRegister.dicModels = {};
    MVCRegister.dicViews = {};
    MVCRegister.dicControllers = {};
    MVCRegister.dicControllerMsgListening = {};
    return MVCRegister;
}());
exports.MVCRegister = MVCRegister;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Modules/Views/ViewToast.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '1d1575uhQJAk5CrCB7vxUak', 'ViewToast');
// Scripts/Modules/Views/ViewToast.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var View_1 = require("../../MVCFramework/View");
var ViewToast = /** @class */ (function (_super) {
    __extends(ViewToast, _super);
    function ViewToast() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.unuseToastItem = [];
        _this.toastingObjCnt = 0;
        return _this;
    }
    ViewToast.prototype.OnAwake = function () {
        this.ToastItem = this.FindTransform("ToastItem");
        this.ToastObjs = this.FindTransform("ToastObjs");
    };
    ViewToast.prototype.OnShowView = function () {
    };
    ViewToast.prototype.OnHideView = function () {
    };
    ViewToast.prototype.OnFocus = function () {
    };
    ViewToast.prototype.OnDisFocus = function () {
    };
    ViewToast.prototype.OnDestroy = function () {
        this.unuseToastItem = [];
        this.toastingObjCnt = 0;
    };
    ViewToast.prototype.GetToastItem = function () {
        var ret = null;
        if (this.unuseToastItem.length > 0) {
            ret = this.unuseToastItem.pop();
        }
        if (ret == null) {
            ret = cc.instantiate(this.ToastItem);
            this.ToastObjs.addChild(ret);
            ret.position = cc.Vec2.ZERO;
        }
        ret.active = true;
        ret.opacity = 255;
        ret.position = cc.Vec2.ZERO;
        return ret;
    };
    ViewToast.prototype.AddToast = function (content) {
        // cc.error("content  "+ content);
        this.toastingObjCnt++;
        var toastItem = this.GetToastItem();
        cc.find("LabelContent1", toastItem).getComponent(cc.Label).string = content;
        cc.find("LabelContent1/LabelContent2", toastItem).getComponent(cc.Label).string = content;
        cc.find("LabelContent1/BG", toastItem).getComponent(cc.Widget).updateAlignment();
        var outside = this;
        var finished = cc.callFunc(function () {
            toastItem.active = false;
            outside.unuseToastItem.push(toastItem);
            outside.toastingObjCnt--;
            if (outside.toastingObjCnt <= 0) {
                outside.toastingObjCnt = 0;
                outside.Hide();
            }
        }, this, null);
        var spawn = cc.sequence(cc.moveBy(1, 0, 50), cc.spawn(cc.moveBy(2, 0, 100), cc.sequence(cc.fadeOut(2.0), finished)));
        toastItem.runAction(spawn);
    };
    return ViewToast;
}(View_1.default));
exports.default = ViewToast;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTW9kdWxlc1xcVmlld3NcXFZpZXdUb2FzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxnREFBMkM7QUFFM0M7SUFBdUMsNkJBQUk7SUFBM0M7UUFBQSxxRUFzRkM7UUFqRlcsb0JBQWMsR0FBa0IsRUFBRSxDQUFDO1FBQ25DLG9CQUFjLEdBQUcsQ0FBQyxDQUFDOztJQWdGL0IsQ0FBQztJQTlFVSwyQkFBTyxHQUFkO1FBRUksSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU0sOEJBQVUsR0FBakI7SUFHQSxDQUFDO0lBRU0sOEJBQVUsR0FBakI7SUFHQSxDQUFDO0lBRU0sMkJBQU8sR0FBZDtJQUdBLENBQUM7SUFFTSw4QkFBVSxHQUFqQjtJQUdBLENBQUM7SUFFTSw2QkFBUyxHQUFoQjtRQUVJLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFTyxnQ0FBWSxHQUFwQjtRQUVJLElBQUksR0FBRyxHQUFXLElBQUksQ0FBQztRQUN2QixJQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDakM7WUFDSSxHQUFHLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUNuQztRQUNELElBQUcsR0FBRyxJQUFJLElBQUksRUFDZDtZQUNJLEdBQUcsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM3QixHQUFHLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQy9CO1FBQ0QsR0FBRyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbEIsR0FBRyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7UUFDbEIsR0FBRyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUM1QixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFTSw0QkFBUSxHQUFmLFVBQWdCLE9BQWM7UUFFMUIsa0NBQWtDO1FBQ2xDLElBQUksQ0FBQyxjQUFjLEVBQUcsQ0FBQztRQUN2QixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEMsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUMsU0FBUyxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDO1FBQzNFLEVBQUUsQ0FBQyxJQUFJLENBQUMsNkJBQTZCLEVBQUMsU0FBUyxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDO1FBQ3pGLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUMsU0FBUyxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUVoRixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQztZQUN2QixTQUFTLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUN6QixPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN2QyxPQUFPLENBQUMsY0FBYyxFQUFHLENBQUM7WUFDMUIsSUFBRyxPQUFPLENBQUMsY0FBYyxJQUFJLENBQUMsRUFDOUI7Z0JBQ0ksT0FBTyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7Z0JBQzNCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNsQjtRQUNMLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFZixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxILFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFL0IsQ0FBQztJQUVMLGdCQUFDO0FBQUQsQ0F0RkEsQUFzRkMsQ0F0RnNDLGNBQUksR0FzRjFDIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZpZXcgZnJvbSBcIi4uLy4uL01WQ0ZyYW1ld29yay9WaWV3XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXdUb2FzdCBleHRlbmRzIFZpZXdcbntcbiAgICBwcml2YXRlIFRvYXN0SXRlbTpjYy5Ob2RlO1xuICAgIHByaXZhdGUgVG9hc3RPYmpzOmNjLk5vZGU7XG5cbiAgICBwcml2YXRlIHVudXNlVG9hc3RJdGVtOkFycmF5PGNjLk5vZGU+ID0gW107XG4gICAgcHJpdmF0ZSB0b2FzdGluZ09iakNudCA9IDA7XG5cbiAgICBwdWJsaWMgT25Bd2FrZSgpXG4gICAge1xuICAgICAgICB0aGlzLlRvYXN0SXRlbSA9IHRoaXMuRmluZFRyYW5zZm9ybShcIlRvYXN0SXRlbVwiKTtcbiAgICAgICAgdGhpcy5Ub2FzdE9ianMgPSB0aGlzLkZpbmRUcmFuc2Zvcm0oXCJUb2FzdE9ianNcIik7XG4gICAgfVxuXG4gICAgcHVibGljIE9uU2hvd1ZpZXcoKVxuICAgIHtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHVibGljIE9uSGlkZVZpZXcoKVxuICAgIHtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHVibGljIE9uRm9jdXMoKVxuICAgIHtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHVibGljIE9uRGlzRm9jdXMoKVxuICAgIHtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHVibGljIE9uRGVzdHJveSgpXG4gICAge1xuICAgICAgICB0aGlzLnVudXNlVG9hc3RJdGVtID0gW107XG4gICAgICAgIHRoaXMudG9hc3RpbmdPYmpDbnQgPSAwO1xuICAgIH1cblxuICAgIHByaXZhdGUgR2V0VG9hc3RJdGVtKCk6Y2MuTm9kZVxuICAgIHtcbiAgICAgICAgbGV0IHJldDpjYy5Ob2RlID0gbnVsbDtcbiAgICAgICAgaWYodGhpcy51bnVzZVRvYXN0SXRlbS5sZW5ndGggPiAwKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXQgPSB0aGlzLnVudXNlVG9hc3RJdGVtLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmKHJldCA9PSBudWxsKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXQgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLlRvYXN0SXRlbSk7XG4gICAgICAgICAgICB0aGlzLlRvYXN0T2Jqcy5hZGRDaGlsZChyZXQpO1xuICAgICAgICAgICAgcmV0LnBvc2l0aW9uID0gY2MuVmVjMi5aRVJPO1xuICAgICAgICB9XG4gICAgICAgIHJldC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICByZXQub3BhY2l0eSA9IDI1NTtcbiAgICAgICAgcmV0LnBvc2l0aW9uID0gY2MuVmVjMi5aRVJPO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIHB1YmxpYyBBZGRUb2FzdChjb250ZW50OnN0cmluZylcbiAgICB7XG4gICAgICAgIC8vIGNjLmVycm9yKFwiY29udGVudCAgXCIrIGNvbnRlbnQpO1xuICAgICAgICB0aGlzLnRvYXN0aW5nT2JqQ250ICsrO1xuICAgICAgICBsZXQgdG9hc3RJdGVtID0gdGhpcy5HZXRUb2FzdEl0ZW0oKTtcbiAgICAgICAgY2MuZmluZChcIkxhYmVsQ29udGVudDFcIix0b2FzdEl0ZW0pLmdldENvbXBvbmVudChjYy5MYWJlbCkuc3RyaW5nID0gY29udGVudDtcbiAgICAgICAgY2MuZmluZChcIkxhYmVsQ29udGVudDEvTGFiZWxDb250ZW50MlwiLHRvYXN0SXRlbSkuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSBjb250ZW50O1xuICAgICAgICBjYy5maW5kKFwiTGFiZWxDb250ZW50MS9CR1wiLHRvYXN0SXRlbSkuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkudXBkYXRlQWxpZ25tZW50KCk7XG5cbiAgICAgICAgbGV0IG91dHNpZGUgPSB0aGlzO1xuICAgICAgICB2YXIgZmluaXNoZWQgPSBjYy5jYWxsRnVuYyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0b2FzdEl0ZW0uYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICBvdXRzaWRlLnVudXNlVG9hc3RJdGVtLnB1c2godG9hc3RJdGVtKTtcbiAgICAgICAgICAgIG91dHNpZGUudG9hc3RpbmdPYmpDbnQgLS07XG4gICAgICAgICAgICBpZihvdXRzaWRlLnRvYXN0aW5nT2JqQ250IDw9IDApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb3V0c2lkZS50b2FzdGluZ09iakNudCA9IDA7XG4gICAgICAgICAgICAgICAgb3V0c2lkZS5IaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMsIG51bGwpO1xuXG4gICAgICAgIGxldCBzcGF3biA9IGNjLnNlcXVlbmNlKGNjLm1vdmVCeSgxLCAwLCA1MCksY2Muc3Bhd24oY2MubW92ZUJ5KDIsIDAsIDEwMCksY2Muc2VxdWVuY2UoY2MuZmFkZU91dCgyLjApLGZpbmlzaGVkKSkpO1xuXG4gICAgICAgIHRvYXN0SXRlbS5ydW5BY3Rpb24oc3Bhd24pO1xuICAgICAgICBcbiAgICB9XG5cbn1cbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Protos/MessageDefine_BankProxy.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0a4f6ATZUtNXLtrQKZGUXZN', 'MessageDefine_BankProxy');
// Scripts/Protos/MessageDefine_BankProxy.js

/*eslint-disable,block-scoped-var,id-length,no-control-regex,no-magic-numbers,no-prototype-builtins,no-redeclare,no-shadow,no-var,sort-vars*/
"use strict";

var $protobuf = require("./protobuf"); // Common aliases


var $Reader = $protobuf.Reader,
    $Writer = $protobuf.Writer,
    $util = $protobuf.util; // Exported root namespace

var $root = $protobuf.roots.MessageDefine_BankProxy || ($protobuf.roots.MessageDefine_BankProxy = {});
/**
 * BankProxyMsgDefine enum.
 * @exports BankProxyMsgDefine
 * @enum {string}
 * @property {number} MSG_BankProxy_Login=15101 MSG_BankProxy_Login value
 * @property {number} MSG_BankProxy_ProxyInfoReq=15102 MSG_BankProxy_ProxyInfoReq value
 * @property {number} MSG_BankProxy_SubmitDepositReq=15103 MSG_BankProxy_SubmitDepositReq value
 * @property {number} MSG_BankProxy_SubmitOrderReq=15104 MSG_BankProxy_SubmitOrderReq value
 */

$root.BankProxyMsgDefine = function () {
  var valuesById = {},
      values = Object.create(valuesById);
  values[valuesById[15101] = "MSG_BankProxy_Login"] = 15101;
  values[valuesById[15102] = "MSG_BankProxy_ProxyInfoReq"] = 15102;
  values[valuesById[15103] = "MSG_BankProxy_SubmitDepositReq"] = 15103;
  values[valuesById[15104] = "MSG_BankProxy_SubmitOrderReq"] = 15104;
  return values;
}();

module.exports = $root;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcUHJvdG9zXFxNZXNzYWdlRGVmaW5lX0JhbmtQcm94eS5qcyJdLCJuYW1lcyI6WyIkcHJvdG9idWYiLCJyZXF1aXJlIiwiJFJlYWRlciIsIlJlYWRlciIsIiRXcml0ZXIiLCJXcml0ZXIiLCIkdXRpbCIsInV0aWwiLCIkcm9vdCIsInJvb3RzIiwiTWVzc2FnZURlZmluZV9CYW5rUHJveHkiLCJCYW5rUHJveHlNc2dEZWZpbmUiLCJ2YWx1ZXNCeUlkIiwidmFsdWVzIiwiT2JqZWN0IiwiY3JlYXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTs7QUFFQSxJQUFJQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQXZCLEVBRUE7OztBQUNBLElBQUlDLE9BQU8sR0FBR0YsU0FBUyxDQUFDRyxNQUF4QjtBQUFBLElBQWdDQyxPQUFPLEdBQUdKLFNBQVMsQ0FBQ0ssTUFBcEQ7QUFBQSxJQUE0REMsS0FBSyxHQUFHTixTQUFTLENBQUNPLElBQTlFLEVBRUE7O0FBQ0EsSUFBSUMsS0FBSyxHQUFHUixTQUFTLENBQUNTLEtBQVYsQ0FBZ0JDLHVCQUFoQixLQUE0Q1YsU0FBUyxDQUFDUyxLQUFWLENBQWdCQyx1QkFBaEIsR0FBMEMsRUFBdEYsQ0FBWjtBQUVBOzs7Ozs7Ozs7O0FBU0FGLEtBQUssQ0FBQ0csa0JBQU4sR0FBNEIsWUFBVztBQUNuQyxNQUFJQyxVQUFVLEdBQUcsRUFBakI7QUFBQSxNQUFxQkMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0gsVUFBZCxDQUE5QjtBQUNBQyxFQUFBQSxNQUFNLENBQUNELFVBQVUsQ0FBQyxLQUFELENBQVYsR0FBb0IscUJBQXJCLENBQU4sR0FBb0QsS0FBcEQ7QUFDQUMsRUFBQUEsTUFBTSxDQUFDRCxVQUFVLENBQUMsS0FBRCxDQUFWLEdBQW9CLDRCQUFyQixDQUFOLEdBQTJELEtBQTNEO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBQ0QsVUFBVSxDQUFDLEtBQUQsQ0FBVixHQUFvQixnQ0FBckIsQ0FBTixHQUErRCxLQUEvRDtBQUNBQyxFQUFBQSxNQUFNLENBQUNELFVBQVUsQ0FBQyxLQUFELENBQVYsR0FBb0IsOEJBQXJCLENBQU4sR0FBNkQsS0FBN0Q7QUFDQSxTQUFPQyxNQUFQO0FBQ0gsQ0FQMEIsRUFBM0I7O0FBU0FHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlQsS0FBakIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8qZXNsaW50LWRpc2FibGUsYmxvY2stc2NvcGVkLXZhcixpZC1sZW5ndGgsbm8tY29udHJvbC1yZWdleCxuby1tYWdpYy1udW1iZXJzLG5vLXByb3RvdHlwZS1idWlsdGlucyxuby1yZWRlY2xhcmUsbm8tc2hhZG93LG5vLXZhcixzb3J0LXZhcnMqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkcHJvdG9idWYgPSByZXF1aXJlKFwiLi9wcm90b2J1ZlwiKTtcblxuLy8gQ29tbW9uIGFsaWFzZXNcbnZhciAkUmVhZGVyID0gJHByb3RvYnVmLlJlYWRlciwgJFdyaXRlciA9ICRwcm90b2J1Zi5Xcml0ZXIsICR1dGlsID0gJHByb3RvYnVmLnV0aWw7XG5cbi8vIEV4cG9ydGVkIHJvb3QgbmFtZXNwYWNlXG52YXIgJHJvb3QgPSAkcHJvdG9idWYucm9vdHMuTWVzc2FnZURlZmluZV9CYW5rUHJveHkgfHwgKCRwcm90b2J1Zi5yb290cy5NZXNzYWdlRGVmaW5lX0JhbmtQcm94eSA9IHt9KTtcblxuLyoqXG4gKiBCYW5rUHJveHlNc2dEZWZpbmUgZW51bS5cbiAqIEBleHBvcnRzIEJhbmtQcm94eU1zZ0RlZmluZVxuICogQGVudW0ge3N0cmluZ31cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBNU0dfQmFua1Byb3h5X0xvZ2luPTE1MTAxIE1TR19CYW5rUHJveHlfTG9naW4gdmFsdWVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBNU0dfQmFua1Byb3h5X1Byb3h5SW5mb1JlcT0xNTEwMiBNU0dfQmFua1Byb3h5X1Byb3h5SW5mb1JlcSB2YWx1ZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IE1TR19CYW5rUHJveHlfU3VibWl0RGVwb3NpdFJlcT0xNTEwMyBNU0dfQmFua1Byb3h5X1N1Ym1pdERlcG9zaXRSZXEgdmFsdWVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBNU0dfQmFua1Byb3h5X1N1Ym1pdE9yZGVyUmVxPTE1MTA0IE1TR19CYW5rUHJveHlfU3VibWl0T3JkZXJSZXEgdmFsdWVcbiAqL1xuJHJvb3QuQmFua1Byb3h5TXNnRGVmaW5lID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZXNCeUlkID0ge30sIHZhbHVlcyA9IE9iamVjdC5jcmVhdGUodmFsdWVzQnlJZCk7XG4gICAgdmFsdWVzW3ZhbHVlc0J5SWRbMTUxMDFdID0gXCJNU0dfQmFua1Byb3h5X0xvZ2luXCJdID0gMTUxMDE7XG4gICAgdmFsdWVzW3ZhbHVlc0J5SWRbMTUxMDJdID0gXCJNU0dfQmFua1Byb3h5X1Byb3h5SW5mb1JlcVwiXSA9IDE1MTAyO1xuICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzE1MTAzXSA9IFwiTVNHX0JhbmtQcm94eV9TdWJtaXREZXBvc2l0UmVxXCJdID0gMTUxMDM7XG4gICAgdmFsdWVzW3ZhbHVlc0J5SWRbMTUxMDRdID0gXCJNU0dfQmFua1Byb3h5X1N1Ym1pdE9yZGVyUmVxXCJdID0gMTUxMDQ7XG4gICAgcmV0dXJuIHZhbHVlcztcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gJHJvb3Q7XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Protos/Ping.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '1a2f3pmBwpCFIFPnH7xXUAD', 'Ping');
// Scripts/Protos/Ping.js

/*eslint-disable,block-scoped-var,id-length,no-control-regex,no-magic-numbers,no-prototype-builtins,no-redeclare,no-shadow,no-var,sort-vars*/
"use strict";

var $protobuf = require("./protobuf"); // Common aliases


var $Reader = $protobuf.Reader,
    $Writer = $protobuf.Writer,
    $util = $protobuf.util; // Exported root namespace

var $root = $protobuf.roots.Ping || ($protobuf.roots.Ping = {});

$root.PingReq = function () {
  /**
   * Properties of a PingReq.
   * @exports IPingReq
   * @interface IPingReq
   * @property {number|Long} timestamp PingReq timestamp
   */

  /**
   * Constructs a new PingReq.
   * @exports PingReq
   * @classdesc Represents a PingReq.
   * @implements IPingReq
   * @constructor
   * @param {IPingReq=} [p] Properties to set
   */
  function PingReq(p) {
    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
      if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
    }
  }
  /**
   * PingReq timestamp.
   * @member {number|Long} timestamp
   * @memberof PingReq
   * @instance
   */


  PingReq.prototype.timestamp = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
  /**
   * Creates a new PingReq instance using the specified properties.
   * @function create
   * @memberof PingReq
   * @static
   * @param {IPingReq=} [properties] Properties to set
   * @returns {PingReq} PingReq instance
   */

  PingReq.create = function create(properties) {
    return new PingReq(properties);
  };
  /**
   * Encodes the specified PingReq message. Does not implicitly {@link PingReq.verify|verify} messages.
   * @function encode
   * @memberof PingReq
   * @static
   * @param {IPingReq} m PingReq message or plain object to encode
   * @param {$protobuf.Writer} [w] Writer to encode to
   * @returns {$protobuf.Writer} Writer
   */


  PingReq.encode = function encode(m, w) {
    if (!w) w = $Writer.create();
    w.uint32(8).int64(m.timestamp);
    return w;
  };
  /**
   * Decodes a PingReq message from the specified reader or buffer.
   * @function decode
   * @memberof PingReq
   * @static
   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
   * @param {number} [l] Message length if known beforehand
   * @returns {PingReq} PingReq
   * @throws {Error} If the payload is not a reader or valid buffer
   * @throws {$protobuf.util.ProtocolError} If required fields are missing
   */


  PingReq.decode = function decode(r, l) {
    if (!(r instanceof $Reader)) r = $Reader.create(r);
    var c = l === undefined ? r.len : r.pos + l,
        m = new $root.PingReq();

    while (r.pos < c) {
      var t = r.uint32();

      switch (t >>> 3) {
        case 1:
          m.timestamp = r.int64();
          break;

        default:
          r.skipType(t & 7);
          break;
      }
    }

    if (!m.hasOwnProperty("timestamp")) throw $util.ProtocolError("missing required 'timestamp'", {
      instance: m
    });
    return m;
  };

  return PingReq;
}();

$root.PingRes = function () {
  /**
   * Properties of a PingRes.
   * @exports IPingRes
   * @interface IPingRes
   * @property {string} currentTime PingRes currentTime
   */

  /**
   * Constructs a new PingRes.
   * @exports PingRes
   * @classdesc Represents a PingRes.
   * @implements IPingRes
   * @constructor
   * @param {IPingRes=} [p] Properties to set
   */
  function PingRes(p) {
    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
      if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
    }
  }
  /**
   * PingRes currentTime.
   * @member {string} currentTime
   * @memberof PingRes
   * @instance
   */


  PingRes.prototype.currentTime = "";
  /**
   * Creates a new PingRes instance using the specified properties.
   * @function create
   * @memberof PingRes
   * @static
   * @param {IPingRes=} [properties] Properties to set
   * @returns {PingRes} PingRes instance
   */

  PingRes.create = function create(properties) {
    return new PingRes(properties);
  };
  /**
   * Encodes the specified PingRes message. Does not implicitly {@link PingRes.verify|verify} messages.
   * @function encode
   * @memberof PingRes
   * @static
   * @param {IPingRes} m PingRes message or plain object to encode
   * @param {$protobuf.Writer} [w] Writer to encode to
   * @returns {$protobuf.Writer} Writer
   */


  PingRes.encode = function encode(m, w) {
    if (!w) w = $Writer.create();
    w.uint32(10).string(m.currentTime);
    return w;
  };
  /**
   * Decodes a PingRes message from the specified reader or buffer.
   * @function decode
   * @memberof PingRes
   * @static
   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
   * @param {number} [l] Message length if known beforehand
   * @returns {PingRes} PingRes
   * @throws {Error} If the payload is not a reader or valid buffer
   * @throws {$protobuf.util.ProtocolError} If required fields are missing
   */


  PingRes.decode = function decode(r, l) {
    if (!(r instanceof $Reader)) r = $Reader.create(r);
    var c = l === undefined ? r.len : r.pos + l,
        m = new $root.PingRes();

    while (r.pos < c) {
      var t = r.uint32();

      switch (t >>> 3) {
        case 1:
          m.currentTime = r.string();
          break;

        default:
          r.skipType(t & 7);
          break;
      }
    }

    if (!m.hasOwnProperty("currentTime")) throw $util.ProtocolError("missing required 'currentTime'", {
      instance: m
    });
    return m;
  };

  return PingRes;
}();

module.exports = $root;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Modules/Views/PayEn/UIItemDay.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '7f355OFIeRJnqYKAql53eFX', 'UIItemDay');
// Scripts/Modules/Views/PayEn/UIItemDay.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../../../Tools/Util");
var UIItemDay = /** @class */ (function () {
    function UIItemDay() {
    }
    UIItemDay.prototype.Init = function (node, idex, day, sel, cb) {
        var _this = this;
        this.node = node;
        this.index = idex;
        this.day = day;
        this.cb = cb;
        this.lbDay = this.node.getChildByName("lbDay").getComponent(cc.Label);
        this.lbDay.string = day;
        //this.spSel.enabled = sel;
        Util_1.default.SetClickAction(this.node.getComponent(cc.Button), function () {
            _this.cb(_this.index, _this.day);
        });
    };
    return UIItemDay;
}());
exports.default = UIItemDay;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTW9kdWxlc1xcVmlld3NcXFBheUVuXFxVSUl0ZW1EYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0Q0FBdUM7QUFFdkM7SUFBQTtJQW1CQSxDQUFDO0lBWlUsd0JBQUksR0FBWCxVQUFZLElBQWEsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUF3QjtRQUFuRSxpQkFXQztRQVZHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1FBQ3hCLDJCQUEyQjtRQUMzQixjQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNuRCxLQUFJLENBQUMsRUFBRSxDQUFDLEtBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2pDLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUNMLGdCQUFDO0FBQUQsQ0FuQkEsQUFtQkMsSUFBQSIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVdGlsIGZyb20gXCIuLi8uLi8uLi9Ub29scy9VdGlsXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVSUl0ZW1EYXkge1xyXG4gICAgcHJpdmF0ZSBub2RlOiBjYy5Ob2RlO1xyXG4gICAgcHJpdmF0ZSBpbmRleDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBkYXk6IG51bWJlcjtcclxuICAgIHByaXZhdGUgY2I6IChpbmRleCwgZGF5KSA9PiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBsYkRheTogY2MuTGFiZWw7XHJcbiAgICBwcml2YXRlIHNwU2VsOiBjYy5TcHJpdGU7XHJcbiAgICBwdWJsaWMgSW5pdChub2RlOiBjYy5Ob2RlLCBpZGV4LCBkYXksIHNlbCwgY2I6IChpbmRleCwgZGF5KSA9PiB2b2lkKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlID0gbm9kZTtcclxuICAgICAgICB0aGlzLmluZGV4ID0gaWRleDtcclxuICAgICAgICB0aGlzLmRheSA9IGRheTtcclxuICAgICAgICB0aGlzLmNiID0gY2I7XHJcbiAgICAgICAgdGhpcy5sYkRheSA9IHRoaXMubm9kZS5nZXRDaGlsZEJ5TmFtZShcImxiRGF5XCIpLmdldENvbXBvbmVudChjYy5MYWJlbCk7XHJcbiAgICAgICAgdGhpcy5sYkRheS5zdHJpbmcgPSBkYXk7XHJcbiAgICAgICAgLy90aGlzLnNwU2VsLmVuYWJsZWQgPSBzZWw7XHJcbiAgICAgICAgVXRpbC5TZXRDbGlja0FjdGlvbih0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KGNjLkJ1dHRvbiksICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jYih0aGlzLmluZGV4LCB0aGlzLmRheSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59Il19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/NodeUtil.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '68bd8wVEnJNIY7EkAypCzql', 'NodeUtil');
// Scripts/Tools/NodeUtil.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ccC_1 = require("./ccC");
/**
 * 这个类里面仅限与添加和 Node 有关的共用方法，其他的请写到 Util.ts 脚本中
 */
var NodeUtil = /** @class */ (function () {
    function NodeUtil() {
    }
    /**
     * 递归查找指定根节点下指定名字的字节点，会递归所有层级
     * @param node 根节点
     * @param childName 字节点名字
     */
    NodeUtil.SearchChild = function (node, childName) {
        for (var index = 0; index < node.childrenCount; index++) {
            var element = node.children[index];
            if (element.name == childName) {
                return element;
            }
            var result = this.SearchChild(element, childName);
            if (result != null) {
                return result;
            }
        }
        return null;
    };
    NodeUtil.SearchButton = function (node, childName) {
        return this.SearchChild(node, childName).getComponent(cc.Button);
    };
    NodeUtil.SearchLabel = function (node, childName) {
        return this.SearchChild(node, childName).getComponent(cc.Label);
    };
    NodeUtil.SearchRichText = function (node, childName) {
        return this.SearchChild(node, childName).getComponent(cc.RichText);
    };
    NodeUtil.SearchEditBox = function (node, childName) {
        return this.SearchChild(node, childName).getComponent(cc.EditBox);
    };
    NodeUtil.SearchSprite = function (node, childName) {
        return this.SearchChild(node, childName).getComponent(cc.Sprite);
    };
    NodeUtil.SearchSlider = function (node, childName) {
        return this.SearchChild(node, childName).getComponent(cc.Slider);
    };
    NodeUtil.SearchToggle = function (node, childName) {
        return this.SearchChild(node, childName).getComponent(cc.Toggle);
    };
    /**
     * 设置图集
     * @param sprite
     * @param atlas
     * @param spriteName 不传这个参数表示是加载散图
     * @param finishCallback
     */
    NodeUtil.SetSpriteFrame = function (sprite, atlasPath, spriteName, finishCallback) {
        if (spriteName === void 0) { spriteName = null; }
        if (finishCallback === void 0) { finishCallback = null; }
        if (spriteName == undefined || spriteName == null || spriteName.length == 0) {
            ccC_1.default.loadRes(atlasPath, cc.SpriteFrame, function (err, spriteFrame) {
                if (err) {
                    cc.error("err  " + err.message || err);
                    return;
                }
                sprite.spriteFrame = spriteFrame;
                if (finishCallback != null)
                    finishCallback();
            });
        }
        else {
            ccC_1.default.loadRes(atlasPath, cc.SpriteAtlas, function (err, atlas) {
                if (err) {
                    cc.error(err.message || err);
                }
                else {
                    var frame = atlas.getSpriteFrame(spriteName);
                    if (frame) {
                        sprite.spriteFrame = frame;
                        if (finishCallback != null)
                            finishCallback();
                    }
                }
            });
        }
    };
    /**
     * 获取指定根节点下所有的子节点[包含传入的根节点]，尽量保证所有的字节点名字都不一样
     * @param root 根节点
     * @param dic 保存所有字节点的字典
     */
    NodeUtil.GetAllChildren = function (root, dic) {
        dic[root.name] = root;
        for (var index = 0; index < root.childrenCount; index++) {
            var element = root.children[index];
            this.GetAllChildren(element, dic);
        }
    };
    /**
     * 查找或者创建一个新的子节点
     * @param container 根节点
     * @param index 指定获取的节点下标
     * @param createIndex 可以指定复制的节点
     */
    NodeUtil.GetOrCreateChild = function (container, index, createIndex) {
        if (createIndex === void 0) { createIndex = null; }
        var child;
        if (index < container.childrenCount) {
            child = container.children[index];
        }
        else {
            var cIndex = createIndex || 0;
            child = cc.instantiate(container.children[cIndex]);
            child.parent = container;
        }
        child.active = true;
        return child;
    };
    NodeUtil.GetNodeDic = function (node, dic) {
        if (dic === void 0) { dic = null; }
        if (dic == null) {
            dic = {};
        }
        dic[node.name] = node;
        for (var i = 0; i < node.childrenCount; i++) {
            this.GetNodeDic(node.children[i], dic);
        }
        return dic;
    };
    /**
     * 用于两个node不在同一个父节点下时，设置相同的位置
     * @param node 需要设置位置的node
     * @param followNode 目标位置node
     */
    NodeUtil.FollowPosition = function (node, tofollowNode) {
        var worldPos = tofollowNode.convertToWorldSpaceAR(cc.Vec2.ZERO);
        var localPos = node.parent.convertToNodeSpaceAR(worldPos);
        node.position = localPos;
    };
    return NodeUtil;
}());
exports.default = NodeUtil;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Protos/Handshake.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0b2b8fSIodMo4rPitRBbHyD', 'Handshake');
// Scripts/Protos/Handshake.js

/*eslint-disable,block-scoped-var,id-length,no-control-regex,no-magic-numbers,no-prototype-builtins,no-redeclare,no-shadow,no-var,sort-vars*/
"use strict";

var $protobuf = require("./protobuf"); // Common aliases


var $Reader = $protobuf.Reader,
    $Writer = $protobuf.Writer,
    $util = $protobuf.util; // Exported root namespace

var $root = $protobuf.roots.Handshake || ($protobuf.roots.Handshake = {});

$root.HandshakeRequest = function () {
  /**
   * Properties of a HandshakeRequest.
   * @exports IHandshakeRequest
   * @interface IHandshakeRequest
   * @property {string} uid HandshakeRequest uid
   * @property {string} token HandshakeRequest token
   */

  /**
   * Constructs a new HandshakeRequest.
   * @exports HandshakeRequest
   * @classdesc Represents a HandshakeRequest.
   * @implements IHandshakeRequest
   * @constructor
   * @param {IHandshakeRequest=} [p] Properties to set
   */
  function HandshakeRequest(p) {
    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
      if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
    }
  }
  /**
   * HandshakeRequest uid.
   * @member {string} uid
   * @memberof HandshakeRequest
   * @instance
   */


  HandshakeRequest.prototype.uid = "";
  /**
   * HandshakeRequest token.
   * @member {string} token
   * @memberof HandshakeRequest
   * @instance
   */

  HandshakeRequest.prototype.token = "";
  /**
   * Creates a new HandshakeRequest instance using the specified properties.
   * @function create
   * @memberof HandshakeRequest
   * @static
   * @param {IHandshakeRequest=} [properties] Properties to set
   * @returns {HandshakeRequest} HandshakeRequest instance
   */

  HandshakeRequest.create = function create(properties) {
    return new HandshakeRequest(properties);
  };
  /**
   * Encodes the specified HandshakeRequest message. Does not implicitly {@link HandshakeRequest.verify|verify} messages.
   * @function encode
   * @memberof HandshakeRequest
   * @static
   * @param {IHandshakeRequest} m HandshakeRequest message or plain object to encode
   * @param {$protobuf.Writer} [w] Writer to encode to
   * @returns {$protobuf.Writer} Writer
   */


  HandshakeRequest.encode = function encode(m, w) {
    if (!w) w = $Writer.create();
    w.uint32(10).string(m.uid);
    w.uint32(18).string(m.token);
    return w;
  };
  /**
   * Decodes a HandshakeRequest message from the specified reader or buffer.
   * @function decode
   * @memberof HandshakeRequest
   * @static
   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
   * @param {number} [l] Message length if known beforehand
   * @returns {HandshakeRequest} HandshakeRequest
   * @throws {Error} If the payload is not a reader or valid buffer
   * @throws {$protobuf.util.ProtocolError} If required fields are missing
   */


  HandshakeRequest.decode = function decode(r, l) {
    if (!(r instanceof $Reader)) r = $Reader.create(r);
    var c = l === undefined ? r.len : r.pos + l,
        m = new $root.HandshakeRequest();

    while (r.pos < c) {
      var t = r.uint32();

      switch (t >>> 3) {
        case 1:
          m.uid = r.string();
          break;

        case 2:
          m.token = r.string();
          break;

        default:
          r.skipType(t & 7);
          break;
      }
    }

    if (!m.hasOwnProperty("uid")) throw $util.ProtocolError("missing required 'uid'", {
      instance: m
    });
    if (!m.hasOwnProperty("token")) throw $util.ProtocolError("missing required 'token'", {
      instance: m
    });
    return m;
  };

  return HandshakeRequest;
}();

$root.HandshakeResponse = function () {
  /**
   * Properties of a HandshakeResponse.
   * @exports IHandshakeResponse
   * @interface IHandshakeResponse
   * @property {number} statusCode HandshakeResponse statusCode
   * @property {string|null} [errorMsg] HandshakeResponse errorMsg
   */

  /**
   * Constructs a new HandshakeResponse.
   * @exports HandshakeResponse
   * @classdesc Represents a HandshakeResponse.
   * @implements IHandshakeResponse
   * @constructor
   * @param {IHandshakeResponse=} [p] Properties to set
   */
  function HandshakeResponse(p) {
    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
      if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
    }
  }
  /**
   * HandshakeResponse statusCode.
   * @member {number} statusCode
   * @memberof HandshakeResponse
   * @instance
   */


  HandshakeResponse.prototype.statusCode = 0;
  /**
   * HandshakeResponse errorMsg.
   * @member {string} errorMsg
   * @memberof HandshakeResponse
   * @instance
   */

  HandshakeResponse.prototype.errorMsg = "";
  /**
   * Creates a new HandshakeResponse instance using the specified properties.
   * @function create
   * @memberof HandshakeResponse
   * @static
   * @param {IHandshakeResponse=} [properties] Properties to set
   * @returns {HandshakeResponse} HandshakeResponse instance
   */

  HandshakeResponse.create = function create(properties) {
    return new HandshakeResponse(properties);
  };
  /**
   * Encodes the specified HandshakeResponse message. Does not implicitly {@link HandshakeResponse.verify|verify} messages.
   * @function encode
   * @memberof HandshakeResponse
   * @static
   * @param {IHandshakeResponse} m HandshakeResponse message or plain object to encode
   * @param {$protobuf.Writer} [w] Writer to encode to
   * @returns {$protobuf.Writer} Writer
   */


  HandshakeResponse.encode = function encode(m, w) {
    if (!w) w = $Writer.create();
    w.uint32(8).int32(m.statusCode);
    if (m.errorMsg != null && m.hasOwnProperty("errorMsg")) w.uint32(18).string(m.errorMsg);
    return w;
  };
  /**
   * Decodes a HandshakeResponse message from the specified reader or buffer.
   * @function decode
   * @memberof HandshakeResponse
   * @static
   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
   * @param {number} [l] Message length if known beforehand
   * @returns {HandshakeResponse} HandshakeResponse
   * @throws {Error} If the payload is not a reader or valid buffer
   * @throws {$protobuf.util.ProtocolError} If required fields are missing
   */


  HandshakeResponse.decode = function decode(r, l) {
    if (!(r instanceof $Reader)) r = $Reader.create(r);
    var c = l === undefined ? r.len : r.pos + l,
        m = new $root.HandshakeResponse();

    while (r.pos < c) {
      var t = r.uint32();

      switch (t >>> 3) {
        case 1:
          m.statusCode = r.int32();
          break;

        case 2:
          m.errorMsg = r.string();
          break;

        default:
          r.skipType(t & 7);
          break;
      }
    }

    if (!m.hasOwnProperty("statusCode")) throw $util.ProtocolError("missing required 'statusCode'", {
      instance: m
    });
    return m;
  };

  return HandshakeResponse;
}();

module.exports = $root;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcUHJvdG9zXFxIYW5kc2hha2UuanMiXSwibmFtZXMiOlsiJHByb3RvYnVmIiwicmVxdWlyZSIsIiRSZWFkZXIiLCJSZWFkZXIiLCIkV3JpdGVyIiwiV3JpdGVyIiwiJHV0aWwiLCJ1dGlsIiwiJHJvb3QiLCJyb290cyIsIkhhbmRzaGFrZSIsIkhhbmRzaGFrZVJlcXVlc3QiLCJwIiwia3MiLCJPYmplY3QiLCJrZXlzIiwiaSIsImxlbmd0aCIsInByb3RvdHlwZSIsInVpZCIsInRva2VuIiwiY3JlYXRlIiwicHJvcGVydGllcyIsImVuY29kZSIsIm0iLCJ3IiwidWludDMyIiwic3RyaW5nIiwiZGVjb2RlIiwiciIsImwiLCJjIiwidW5kZWZpbmVkIiwibGVuIiwicG9zIiwidCIsInNraXBUeXBlIiwiaGFzT3duUHJvcGVydHkiLCJQcm90b2NvbEVycm9yIiwiaW5zdGFuY2UiLCJIYW5kc2hha2VSZXNwb25zZSIsInN0YXR1c0NvZGUiLCJlcnJvck1zZyIsImludDMyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTs7QUFFQSxJQUFJQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQXZCLEVBRUE7OztBQUNBLElBQUlDLE9BQU8sR0FBR0YsU0FBUyxDQUFDRyxNQUF4QjtBQUFBLElBQWdDQyxPQUFPLEdBQUdKLFNBQVMsQ0FBQ0ssTUFBcEQ7QUFBQSxJQUE0REMsS0FBSyxHQUFHTixTQUFTLENBQUNPLElBQTlFLEVBRUE7O0FBQ0EsSUFBSUMsS0FBSyxHQUFHUixTQUFTLENBQUNTLEtBQVYsQ0FBZ0JDLFNBQWhCLEtBQThCVixTQUFTLENBQUNTLEtBQVYsQ0FBZ0JDLFNBQWhCLEdBQTRCLEVBQTFELENBQVo7O0FBRUFGLEtBQUssQ0FBQ0csZ0JBQU4sR0FBMEIsWUFBVztBQUVqQzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7QUFRQSxXQUFTQSxnQkFBVCxDQUEwQkMsQ0FBMUIsRUFBNkI7QUFDekIsUUFBSUEsQ0FBSixFQUNJLEtBQUssSUFBSUMsRUFBRSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUgsQ0FBWixDQUFULEVBQXlCSSxDQUFDLEdBQUcsQ0FBbEMsRUFBcUNBLENBQUMsR0FBR0gsRUFBRSxDQUFDSSxNQUE1QyxFQUFvRCxFQUFFRCxDQUF0RDtBQUNJLFVBQUlKLENBQUMsQ0FBQ0MsRUFBRSxDQUFDRyxDQUFELENBQUgsQ0FBRCxJQUFZLElBQWhCLEVBQ0ksS0FBS0gsRUFBRSxDQUFDRyxDQUFELENBQVAsSUFBY0osQ0FBQyxDQUFDQyxFQUFFLENBQUNHLENBQUQsQ0FBSCxDQUFmO0FBRlI7QUFHUDtBQUVEOzs7Ozs7OztBQU1BTCxFQUFBQSxnQkFBZ0IsQ0FBQ08sU0FBakIsQ0FBMkJDLEdBQTNCLEdBQWlDLEVBQWpDO0FBRUE7Ozs7Ozs7QUFNQVIsRUFBQUEsZ0JBQWdCLENBQUNPLFNBQWpCLENBQTJCRSxLQUEzQixHQUFtQyxFQUFuQztBQUVBOzs7Ozs7Ozs7QUFRQVQsRUFBQUEsZ0JBQWdCLENBQUNVLE1BQWpCLEdBQTBCLFNBQVNBLE1BQVQsQ0FBZ0JDLFVBQWhCLEVBQTRCO0FBQ2xELFdBQU8sSUFBSVgsZ0JBQUosQ0FBcUJXLFVBQXJCLENBQVA7QUFDSCxHQUZEO0FBSUE7Ozs7Ozs7Ozs7O0FBU0FYLEVBQUFBLGdCQUFnQixDQUFDWSxNQUFqQixHQUEwQixTQUFTQSxNQUFULENBQWdCQyxDQUFoQixFQUFtQkMsQ0FBbkIsRUFBc0I7QUFDNUMsUUFBSSxDQUFDQSxDQUFMLEVBQ0lBLENBQUMsR0FBR3JCLE9BQU8sQ0FBQ2lCLE1BQVIsRUFBSjtBQUNKSSxJQUFBQSxDQUFDLENBQUNDLE1BQUYsQ0FBUyxFQUFULEVBQWFDLE1BQWIsQ0FBb0JILENBQUMsQ0FBQ0wsR0FBdEI7QUFDQU0sSUFBQUEsQ0FBQyxDQUFDQyxNQUFGLENBQVMsRUFBVCxFQUFhQyxNQUFiLENBQW9CSCxDQUFDLENBQUNKLEtBQXRCO0FBQ0EsV0FBT0ssQ0FBUDtBQUNILEdBTkQ7QUFRQTs7Ozs7Ozs7Ozs7OztBQVdBZCxFQUFBQSxnQkFBZ0IsQ0FBQ2lCLE1BQWpCLEdBQTBCLFNBQVNBLE1BQVQsQ0FBZ0JDLENBQWhCLEVBQW1CQyxDQUFuQixFQUFzQjtBQUM1QyxRQUFJLEVBQUVELENBQUMsWUFBWTNCLE9BQWYsQ0FBSixFQUNJMkIsQ0FBQyxHQUFHM0IsT0FBTyxDQUFDbUIsTUFBUixDQUFlUSxDQUFmLENBQUo7QUFDSixRQUFJRSxDQUFDLEdBQUdELENBQUMsS0FBS0UsU0FBTixHQUFrQkgsQ0FBQyxDQUFDSSxHQUFwQixHQUEwQkosQ0FBQyxDQUFDSyxHQUFGLEdBQVFKLENBQTFDO0FBQUEsUUFBNkNOLENBQUMsR0FBRyxJQUFJaEIsS0FBSyxDQUFDRyxnQkFBVixFQUFqRDs7QUFDQSxXQUFPa0IsQ0FBQyxDQUFDSyxHQUFGLEdBQVFILENBQWYsRUFBa0I7QUFDZCxVQUFJSSxDQUFDLEdBQUdOLENBQUMsQ0FBQ0gsTUFBRixFQUFSOztBQUNBLGNBQVFTLENBQUMsS0FBSyxDQUFkO0FBQ0EsYUFBSyxDQUFMO0FBQ0lYLFVBQUFBLENBQUMsQ0FBQ0wsR0FBRixHQUFRVSxDQUFDLENBQUNGLE1BQUYsRUFBUjtBQUNBOztBQUNKLGFBQUssQ0FBTDtBQUNJSCxVQUFBQSxDQUFDLENBQUNKLEtBQUYsR0FBVVMsQ0FBQyxDQUFDRixNQUFGLEVBQVY7QUFDQTs7QUFDSjtBQUNJRSxVQUFBQSxDQUFDLENBQUNPLFFBQUYsQ0FBV0QsQ0FBQyxHQUFHLENBQWY7QUFDQTtBQVRKO0FBV0g7O0FBQ0QsUUFBSSxDQUFDWCxDQUFDLENBQUNhLGNBQUYsQ0FBaUIsS0FBakIsQ0FBTCxFQUNJLE1BQU0vQixLQUFLLENBQUNnQyxhQUFOLENBQW9CLHdCQUFwQixFQUE4QztBQUFFQyxNQUFBQSxRQUFRLEVBQUVmO0FBQVosS0FBOUMsQ0FBTjtBQUNKLFFBQUksQ0FBQ0EsQ0FBQyxDQUFDYSxjQUFGLENBQWlCLE9BQWpCLENBQUwsRUFDSSxNQUFNL0IsS0FBSyxDQUFDZ0MsYUFBTixDQUFvQiwwQkFBcEIsRUFBZ0Q7QUFBRUMsTUFBQUEsUUFBUSxFQUFFZjtBQUFaLEtBQWhELENBQU47QUFDSixXQUFPQSxDQUFQO0FBQ0gsR0F2QkQ7O0FBeUJBLFNBQU9iLGdCQUFQO0FBQ0gsQ0EzR3dCLEVBQXpCOztBQTZHQUgsS0FBSyxDQUFDZ0MsaUJBQU4sR0FBMkIsWUFBVztBQUVsQzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7QUFRQSxXQUFTQSxpQkFBVCxDQUEyQjVCLENBQTNCLEVBQThCO0FBQzFCLFFBQUlBLENBQUosRUFDSSxLQUFLLElBQUlDLEVBQUUsR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlILENBQVosQ0FBVCxFQUF5QkksQ0FBQyxHQUFHLENBQWxDLEVBQXFDQSxDQUFDLEdBQUdILEVBQUUsQ0FBQ0ksTUFBNUMsRUFBb0QsRUFBRUQsQ0FBdEQ7QUFDSSxVQUFJSixDQUFDLENBQUNDLEVBQUUsQ0FBQ0csQ0FBRCxDQUFILENBQUQsSUFBWSxJQUFoQixFQUNJLEtBQUtILEVBQUUsQ0FBQ0csQ0FBRCxDQUFQLElBQWNKLENBQUMsQ0FBQ0MsRUFBRSxDQUFDRyxDQUFELENBQUgsQ0FBZjtBQUZSO0FBR1A7QUFFRDs7Ozs7Ozs7QUFNQXdCLEVBQUFBLGlCQUFpQixDQUFDdEIsU0FBbEIsQ0FBNEJ1QixVQUE1QixHQUF5QyxDQUF6QztBQUVBOzs7Ozs7O0FBTUFELEVBQUFBLGlCQUFpQixDQUFDdEIsU0FBbEIsQ0FBNEJ3QixRQUE1QixHQUF1QyxFQUF2QztBQUVBOzs7Ozs7Ozs7QUFRQUYsRUFBQUEsaUJBQWlCLENBQUNuQixNQUFsQixHQUEyQixTQUFTQSxNQUFULENBQWdCQyxVQUFoQixFQUE0QjtBQUNuRCxXQUFPLElBQUlrQixpQkFBSixDQUFzQmxCLFVBQXRCLENBQVA7QUFDSCxHQUZEO0FBSUE7Ozs7Ozs7Ozs7O0FBU0FrQixFQUFBQSxpQkFBaUIsQ0FBQ2pCLE1BQWxCLEdBQTJCLFNBQVNBLE1BQVQsQ0FBZ0JDLENBQWhCLEVBQW1CQyxDQUFuQixFQUFzQjtBQUM3QyxRQUFJLENBQUNBLENBQUwsRUFDSUEsQ0FBQyxHQUFHckIsT0FBTyxDQUFDaUIsTUFBUixFQUFKO0FBQ0pJLElBQUFBLENBQUMsQ0FBQ0MsTUFBRixDQUFTLENBQVQsRUFBWWlCLEtBQVosQ0FBa0JuQixDQUFDLENBQUNpQixVQUFwQjtBQUNBLFFBQUlqQixDQUFDLENBQUNrQixRQUFGLElBQWMsSUFBZCxJQUFzQmxCLENBQUMsQ0FBQ2EsY0FBRixDQUFpQixVQUFqQixDQUExQixFQUNJWixDQUFDLENBQUNDLE1BQUYsQ0FBUyxFQUFULEVBQWFDLE1BQWIsQ0FBb0JILENBQUMsQ0FBQ2tCLFFBQXRCO0FBQ0osV0FBT2pCLENBQVA7QUFDSCxHQVBEO0FBU0E7Ozs7Ozs7Ozs7Ozs7QUFXQWUsRUFBQUEsaUJBQWlCLENBQUNaLE1BQWxCLEdBQTJCLFNBQVNBLE1BQVQsQ0FBZ0JDLENBQWhCLEVBQW1CQyxDQUFuQixFQUFzQjtBQUM3QyxRQUFJLEVBQUVELENBQUMsWUFBWTNCLE9BQWYsQ0FBSixFQUNJMkIsQ0FBQyxHQUFHM0IsT0FBTyxDQUFDbUIsTUFBUixDQUFlUSxDQUFmLENBQUo7QUFDSixRQUFJRSxDQUFDLEdBQUdELENBQUMsS0FBS0UsU0FBTixHQUFrQkgsQ0FBQyxDQUFDSSxHQUFwQixHQUEwQkosQ0FBQyxDQUFDSyxHQUFGLEdBQVFKLENBQTFDO0FBQUEsUUFBNkNOLENBQUMsR0FBRyxJQUFJaEIsS0FBSyxDQUFDZ0MsaUJBQVYsRUFBakQ7O0FBQ0EsV0FBT1gsQ0FBQyxDQUFDSyxHQUFGLEdBQVFILENBQWYsRUFBa0I7QUFDZCxVQUFJSSxDQUFDLEdBQUdOLENBQUMsQ0FBQ0gsTUFBRixFQUFSOztBQUNBLGNBQVFTLENBQUMsS0FBSyxDQUFkO0FBQ0EsYUFBSyxDQUFMO0FBQ0lYLFVBQUFBLENBQUMsQ0FBQ2lCLFVBQUYsR0FBZVosQ0FBQyxDQUFDYyxLQUFGLEVBQWY7QUFDQTs7QUFDSixhQUFLLENBQUw7QUFDSW5CLFVBQUFBLENBQUMsQ0FBQ2tCLFFBQUYsR0FBYWIsQ0FBQyxDQUFDRixNQUFGLEVBQWI7QUFDQTs7QUFDSjtBQUNJRSxVQUFBQSxDQUFDLENBQUNPLFFBQUYsQ0FBV0QsQ0FBQyxHQUFHLENBQWY7QUFDQTtBQVRKO0FBV0g7O0FBQ0QsUUFBSSxDQUFDWCxDQUFDLENBQUNhLGNBQUYsQ0FBaUIsWUFBakIsQ0FBTCxFQUNJLE1BQU0vQixLQUFLLENBQUNnQyxhQUFOLENBQW9CLCtCQUFwQixFQUFxRDtBQUFFQyxNQUFBQSxRQUFRLEVBQUVmO0FBQVosS0FBckQsQ0FBTjtBQUNKLFdBQU9BLENBQVA7QUFDSCxHQXJCRDs7QUF1QkEsU0FBT2dCLGlCQUFQO0FBQ0gsQ0ExR3lCLEVBQTFCOztBQTRHQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCckMsS0FBakIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8qZXNsaW50LWRpc2FibGUsYmxvY2stc2NvcGVkLXZhcixpZC1sZW5ndGgsbm8tY29udHJvbC1yZWdleCxuby1tYWdpYy1udW1iZXJzLG5vLXByb3RvdHlwZS1idWlsdGlucyxuby1yZWRlY2xhcmUsbm8tc2hhZG93LG5vLXZhcixzb3J0LXZhcnMqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkcHJvdG9idWYgPSByZXF1aXJlKFwiLi9wcm90b2J1ZlwiKTtcblxuLy8gQ29tbW9uIGFsaWFzZXNcbnZhciAkUmVhZGVyID0gJHByb3RvYnVmLlJlYWRlciwgJFdyaXRlciA9ICRwcm90b2J1Zi5Xcml0ZXIsICR1dGlsID0gJHByb3RvYnVmLnV0aWw7XG5cbi8vIEV4cG9ydGVkIHJvb3QgbmFtZXNwYWNlXG52YXIgJHJvb3QgPSAkcHJvdG9idWYucm9vdHMuSGFuZHNoYWtlIHx8ICgkcHJvdG9idWYucm9vdHMuSGFuZHNoYWtlID0ge30pO1xuXG4kcm9vdC5IYW5kc2hha2VSZXF1ZXN0ID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIEhhbmRzaGFrZVJlcXVlc3QuXG4gICAgICogQGV4cG9ydHMgSUhhbmRzaGFrZVJlcXVlc3RcbiAgICAgKiBAaW50ZXJmYWNlIElIYW5kc2hha2VSZXF1ZXN0XG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IHVpZCBIYW5kc2hha2VSZXF1ZXN0IHVpZFxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0b2tlbiBIYW5kc2hha2VSZXF1ZXN0IHRva2VuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IEhhbmRzaGFrZVJlcXVlc3QuXG4gICAgICogQGV4cG9ydHMgSGFuZHNoYWtlUmVxdWVzdFxuICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIEhhbmRzaGFrZVJlcXVlc3QuXG4gICAgICogQGltcGxlbWVudHMgSUhhbmRzaGFrZVJlcXVlc3RcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0lIYW5kc2hha2VSZXF1ZXN0PX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICovXG4gICAgZnVuY3Rpb24gSGFuZHNoYWtlUmVxdWVzdChwKSB7XG4gICAgICAgIGlmIChwKVxuICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kc2hha2VSZXF1ZXN0IHVpZC5cbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IHVpZFxuICAgICAqIEBtZW1iZXJvZiBIYW5kc2hha2VSZXF1ZXN0XG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgSGFuZHNoYWtlUmVxdWVzdC5wcm90b3R5cGUudWlkID0gXCJcIjtcblxuICAgIC8qKlxuICAgICAqIEhhbmRzaGFrZVJlcXVlc3QgdG9rZW4uXG4gICAgICogQG1lbWJlciB7c3RyaW5nfSB0b2tlblxuICAgICAqIEBtZW1iZXJvZiBIYW5kc2hha2VSZXF1ZXN0XG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgSGFuZHNoYWtlUmVxdWVzdC5wcm90b3R5cGUudG9rZW4gPSBcIlwiO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBIYW5kc2hha2VSZXF1ZXN0IGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXG4gICAgICogQG1lbWJlcm9mIEhhbmRzaGFrZVJlcXVlc3RcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJSGFuZHNoYWtlUmVxdWVzdD19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAqIEByZXR1cm5zIHtIYW5kc2hha2VSZXF1ZXN0fSBIYW5kc2hha2VSZXF1ZXN0IGluc3RhbmNlXG4gICAgICovXG4gICAgSGFuZHNoYWtlUmVxdWVzdC5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocHJvcGVydGllcykge1xuICAgICAgICByZXR1cm4gbmV3IEhhbmRzaGFrZVJlcXVlc3QocHJvcGVydGllcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBIYW5kc2hha2VSZXF1ZXN0IG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIEhhbmRzaGFrZVJlcXVlc3QudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAqIEBtZW1iZXJvZiBIYW5kc2hha2VSZXF1ZXN0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SUhhbmRzaGFrZVJlcXVlc3R9IG0gSGFuZHNoYWtlUmVxdWVzdCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAqL1xuICAgIEhhbmRzaGFrZVJlcXVlc3QuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgIHcudWludDMyKDEwKS5zdHJpbmcobS51aWQpO1xuICAgICAgICB3LnVpbnQzMigxOCkuc3RyaW5nKG0udG9rZW4pO1xuICAgICAgICByZXR1cm4gdztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhIEhhbmRzaGFrZVJlcXVlc3QgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICogQG1lbWJlcm9mIEhhbmRzaGFrZVJlcXVlc3RcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAqIEByZXR1cm5zIHtIYW5kc2hha2VSZXF1ZXN0fSBIYW5kc2hha2VSZXF1ZXN0XG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgKi9cbiAgICBIYW5kc2hha2VSZXF1ZXN0LmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5IYW5kc2hha2VSZXF1ZXN0KCk7XG4gICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIG0udWlkID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBtLnRva2VuID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtLmhhc093blByb3BlcnR5KFwidWlkXCIpKVxuICAgICAgICAgICAgdGhyb3cgJHV0aWwuUHJvdG9jb2xFcnJvcihcIm1pc3NpbmcgcmVxdWlyZWQgJ3VpZCdcIiwgeyBpbnN0YW5jZTogbSB9KTtcbiAgICAgICAgaWYgKCFtLmhhc093blByb3BlcnR5KFwidG9rZW5cIikpXG4gICAgICAgICAgICB0aHJvdyAkdXRpbC5Qcm90b2NvbEVycm9yKFwibWlzc2luZyByZXF1aXJlZCAndG9rZW4nXCIsIHsgaW5zdGFuY2U6IG0gfSk7XG4gICAgICAgIHJldHVybiBtO1xuICAgIH07XG5cbiAgICByZXR1cm4gSGFuZHNoYWtlUmVxdWVzdDtcbn0pKCk7XG5cbiRyb290LkhhbmRzaGFrZVJlc3BvbnNlID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIEhhbmRzaGFrZVJlc3BvbnNlLlxuICAgICAqIEBleHBvcnRzIElIYW5kc2hha2VSZXNwb25zZVxuICAgICAqIEBpbnRlcmZhY2UgSUhhbmRzaGFrZVJlc3BvbnNlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHN0YXR1c0NvZGUgSGFuZHNoYWtlUmVzcG9uc2Ugc3RhdHVzQ29kZVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtlcnJvck1zZ10gSGFuZHNoYWtlUmVzcG9uc2UgZXJyb3JNc2dcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgSGFuZHNoYWtlUmVzcG9uc2UuXG4gICAgICogQGV4cG9ydHMgSGFuZHNoYWtlUmVzcG9uc2VcbiAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBIYW5kc2hha2VSZXNwb25zZS5cbiAgICAgKiBAaW1wbGVtZW50cyBJSGFuZHNoYWtlUmVzcG9uc2VcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0lIYW5kc2hha2VSZXNwb25zZT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhhbmRzaGFrZVJlc3BvbnNlKHApIHtcbiAgICAgICAgaWYgKHApXG4gICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRzaGFrZVJlc3BvbnNlIHN0YXR1c0NvZGUuXG4gICAgICogQG1lbWJlciB7bnVtYmVyfSBzdGF0dXNDb2RlXG4gICAgICogQG1lbWJlcm9mIEhhbmRzaGFrZVJlc3BvbnNlXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgSGFuZHNoYWtlUmVzcG9uc2UucHJvdG90eXBlLnN0YXR1c0NvZGUgPSAwO1xuXG4gICAgLyoqXG4gICAgICogSGFuZHNoYWtlUmVzcG9uc2UgZXJyb3JNc2cuXG4gICAgICogQG1lbWJlciB7c3RyaW5nfSBlcnJvck1zZ1xuICAgICAqIEBtZW1iZXJvZiBIYW5kc2hha2VSZXNwb25zZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIEhhbmRzaGFrZVJlc3BvbnNlLnByb3RvdHlwZS5lcnJvck1zZyA9IFwiXCI7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEhhbmRzaGFrZVJlc3BvbnNlIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXG4gICAgICogQG1lbWJlcm9mIEhhbmRzaGFrZVJlc3BvbnNlXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SUhhbmRzaGFrZVJlc3BvbnNlPX0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICogQHJldHVybnMge0hhbmRzaGFrZVJlc3BvbnNlfSBIYW5kc2hha2VSZXNwb25zZSBpbnN0YW5jZVxuICAgICAqL1xuICAgIEhhbmRzaGFrZVJlc3BvbnNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHJldHVybiBuZXcgSGFuZHNoYWtlUmVzcG9uc2UocHJvcGVydGllcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBIYW5kc2hha2VSZXNwb25zZSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBIYW5kc2hha2VSZXNwb25zZS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICogQG1lbWJlcm9mIEhhbmRzaGFrZVJlc3BvbnNlXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SUhhbmRzaGFrZVJlc3BvbnNlfSBtIEhhbmRzaGFrZVJlc3BvbnNlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICovXG4gICAgSGFuZHNoYWtlUmVzcG9uc2UuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgIHcudWludDMyKDgpLmludDMyKG0uc3RhdHVzQ29kZSk7XG4gICAgICAgIGlmIChtLmVycm9yTXNnICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImVycm9yTXNnXCIpKVxuICAgICAgICAgICAgdy51aW50MzIoMTgpLnN0cmluZyhtLmVycm9yTXNnKTtcbiAgICAgICAgcmV0dXJuIHc7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYSBIYW5kc2hha2VSZXNwb25zZSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgKiBAbWVtYmVyb2YgSGFuZHNoYWtlUmVzcG9uc2VcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAqIEByZXR1cm5zIHtIYW5kc2hha2VSZXNwb25zZX0gSGFuZHNoYWtlUmVzcG9uc2VcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAqL1xuICAgIEhhbmRzaGFrZVJlc3BvbnNlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5IYW5kc2hha2VSZXNwb25zZSgpO1xuICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBtLnN0YXR1c0NvZGUgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgbS5lcnJvck1zZyA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghbS5oYXNPd25Qcm9wZXJ0eShcInN0YXR1c0NvZGVcIikpXG4gICAgICAgICAgICB0aHJvdyAkdXRpbC5Qcm90b2NvbEVycm9yKFwibWlzc2luZyByZXF1aXJlZCAnc3RhdHVzQ29kZSdcIiwgeyBpbnN0YW5jZTogbSB9KTtcbiAgICAgICAgcmV0dXJuIG07XG4gICAgfTtcblxuICAgIHJldHVybiBIYW5kc2hha2VSZXNwb25zZTtcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gJHJvb3Q7XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Modules/Views/PayEn/BankItem.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'da267A9TBxGrKJ3lMELQqeQ', 'BankItem');
// Scripts/Modules/Views/PayEn/BankItem.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../../../Tools/Util");
var BanKItem = /** @class */ (function () {
    function BanKItem() {
    }
    BanKItem.prototype.Init = function (node, data, onclickCallback) {
        var _this = this;
        this.node = node;
        this.node.active = true;
        this.data = data;
        this.button = this.node.getComponent(cc.Button);
        this.bankSprite = this.node.getChildByName("bankSprite").getComponent(cc.Sprite);
        var spirteName = "";
        this.SetTextSprite(false, spirteName);
        Util_1.default.SetClickAction(this.button, function () {
            _this.SetTextSprite(true, spirteName);
            onclickCallback(_this.data);
        });
    };
    BanKItem.prototype.SetTextSprite = function (select, spirteName) {
        // if (select)
        //     NodeUtil.SetSpriteFrame(this.bankSprite, "MainGame/Atlas/pay", spirteName);
        // else
        //     NodeUtil.SetSpriteFrame(this.bankSprite, "MainGame/Atlas/pay", spirteName);
    };
    BanKItem.prototype.RemoveSelf = function () {
        this.node.removeFromParent();
    };
    return BanKItem;
}());
exports.default = BanKItem;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTW9kdWxlc1xcVmlld3NcXFBheUVuXFxCYW5rSXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLDRDQUF1QztBQUV2QztJQUFBO0lBMkJBLENBQUM7SUF0QlUsdUJBQUksR0FBWCxVQUFZLElBQWEsRUFBRSxJQUFTLEVBQUUsZUFBMkM7UUFBakYsaUJBWUM7UUFYRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pGLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQTtRQUNuQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUNyQyxjQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDN0IsS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUE7WUFDcEMsZUFBZSxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTyxnQ0FBYSxHQUFyQixVQUFzQixNQUFlLEVBQUUsVUFBa0I7UUFDckQsY0FBYztRQUNkLGtGQUFrRjtRQUNsRixPQUFPO1FBQ1Asa0ZBQWtGO0lBQ3RGLENBQUM7SUFDTSw2QkFBVSxHQUFqQjtRQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtJQUNoQyxDQUFDO0lBQ0wsZUFBQztBQUFELENBM0JBLEFBMkJDLElBQUEiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTm9kZVV0aWwgZnJvbSBcIi4uLy4uLy4uL1Rvb2xzL05vZGVVdGlsXCI7XHJcbmltcG9ydCBVdGlsIGZyb20gXCIuLi8uLi8uLi9Ub29scy9VdGlsXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYW5LSXRlbSB7XHJcbiAgICBwcml2YXRlIG5vZGU6IGNjLk5vZGU7XHJcbiAgICBwcml2YXRlIGRhdGE6IGFueTtcclxuICAgIHByaXZhdGUgYnV0dG9uOiBjYy5CdXR0b247XHJcbiAgICBwcml2YXRlIGJhbmtTcHJpdGU6IGNjLlNwcml0ZTtcclxuICAgIHB1YmxpYyBJbml0KG5vZGU6IGNjLk5vZGUsIGRhdGE6IGFueSwgb25jbGlja0NhbGxiYWNrOiAoYmFua1R5cGU6IG51bWJlcikgPT4gdm9pZCkge1xyXG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XHJcbiAgICAgICAgdGhpcy5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLmJ1dHRvbiA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoY2MuQnV0dG9uKTtcclxuICAgICAgICB0aGlzLmJhbmtTcHJpdGUgPSB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJiYW5rU3ByaXRlXCIpLmdldENvbXBvbmVudChjYy5TcHJpdGUpO1xyXG4gICAgICAgIGxldCBzcGlydGVOYW1lID0gXCJcIlxyXG4gICAgICAgIHRoaXMuU2V0VGV4dFNwcml0ZShmYWxzZSwgc3BpcnRlTmFtZSlcclxuICAgICAgICBVdGlsLlNldENsaWNrQWN0aW9uKHRoaXMuYnV0dG9uLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuU2V0VGV4dFNwcml0ZSh0cnVlLCBzcGlydGVOYW1lKVxyXG4gICAgICAgICAgICBvbmNsaWNrQ2FsbGJhY2sodGhpcy5kYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgU2V0VGV4dFNwcml0ZShzZWxlY3Q6IGJvb2xlYW4sIHNwaXJ0ZU5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIC8vIGlmIChzZWxlY3QpXHJcbiAgICAgICAgLy8gICAgIE5vZGVVdGlsLlNldFNwcml0ZUZyYW1lKHRoaXMuYmFua1Nwcml0ZSwgXCJNYWluR2FtZS9BdGxhcy9wYXlcIiwgc3BpcnRlTmFtZSk7XHJcbiAgICAgICAgLy8gZWxzZVxyXG4gICAgICAgIC8vICAgICBOb2RlVXRpbC5TZXRTcHJpdGVGcmFtZSh0aGlzLmJhbmtTcHJpdGUsIFwiTWFpbkdhbWUvQXRsYXMvcGF5XCIsIHNwaXJ0ZU5hbWUpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIFJlbW92ZVNlbGYoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLnJlbW92ZUZyb21QYXJlbnQoKVxyXG4gICAgfVxyXG59Il19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/UploadAnalytics.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0c740Nfe5RDfb2QjfraK/n8', 'UploadAnalytics');
// Scripts/Tools/UploadAnalytics.ts

"use strict";
// 游戏行为分析
Object.defineProperty(exports, "__esModule", { value: true });
var UploadAnalytics = /** @class */ (function () {
    function UploadAnalytics() {
    }
    UploadAnalytics.GetMillSecondTimestamp = function () {
        return new Date().getTime;
    };
    UploadAnalytics.GetPlatform = function () {
        var platform = "Editor";
        if (cc.sys.os == cc.sys.OS_ANDROID)
            platform = "Android";
        else if (cc.sys.os == cc.sys.OS_IOS)
            platform = "iOS";
        return platform;
    };
    UploadAnalytics.GetAppVersion = function () {
        return "";
    };
    UploadAnalytics.GetTid = function () {
        var tid = "UA-123753172-1";
        if (cc.sys.os == cc.sys.OS_ANDROID || cc.sys.os == cc.sys.OS_IOS)
            tid = "UA-123747518-1";
        return tid;
    };
    UploadAnalytics.UploadAnalyticsEvent = function (ec, ea, el, ev) {
        if (el === void 0) { el = null; }
        if (ev === void 0) { ev = null; }
    };
    UploadAnalytics.UploadAnalyticsScreen = function (screenName) {
    };
    UploadAnalytics.UploadAnalyticsCustomException = function (mess) {
    };
    UploadAnalytics.UploadFirstOpen = function () {
    };
    UploadAnalytics.UploadStartGame = function () {
    };
    UploadAnalytics.UploadUpdateStart = function () {
    };
    UploadAnalytics.UploadUpdateSuccess = function () {
    };
    UploadAnalytics.UploadLogin = function () {
    };
    UploadAnalytics.UploadEnterHall = function () {
    };
    UploadAnalytics.UploadClickEvent = function () {
    };
    UploadAnalytics.UploadTransaction = function () {
    };
    UploadAnalytics.QMAPPID = 100;
    UploadAnalytics.UploadUrl = "http://bigf.qhdgcdl.com:15145/log/behavior";
    UploadAnalytics.analyticsURL = "https://www.google-analytics.com/collect";
    return UploadAnalytics;
}());
exports.default = UploadAnalytics;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFVwbG9hZEFuYWx5dGljcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsU0FBUzs7QUFFVDtJQUFBO0lBeUZBLENBQUM7SUFuRmlCLHNDQUFzQixHQUFwQztRQUVJLE9BQU8sSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUM7SUFDOUIsQ0FBQztJQUVhLDJCQUFXLEdBQXpCO1FBRUksSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3hCLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVO1lBQzlCLFFBQVEsR0FBRyxTQUFTLENBQUM7YUFDcEIsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU07WUFDL0IsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUVyQixPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDO0lBRWEsNkJBQWEsR0FBM0I7UUFFSSxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFYSxzQkFBTSxHQUFwQjtRQUVJLElBQUksR0FBRyxHQUFHLGdCQUFnQixDQUFDO1FBQzNCLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNO1lBQzVELEdBQUcsR0FBRyxnQkFBZ0IsQ0FBQztRQUMzQixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFYSxvQ0FBb0IsR0FBbEMsVUFBbUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFPLEVBQUUsRUFBTztRQUFoQixtQkFBQSxFQUFBLFNBQU87UUFBRSxtQkFBQSxFQUFBLFNBQU87SUFHM0QsQ0FBQztJQUVhLHFDQUFxQixHQUFuQyxVQUFvQyxVQUFVO0lBRzlDLENBQUM7SUFFYSw4Q0FBOEIsR0FBNUMsVUFBNkMsSUFBSTtJQUdqRCxDQUFDO0lBRWEsK0JBQWUsR0FBN0I7SUFHQSxDQUFDO0lBRWEsK0JBQWUsR0FBN0I7SUFHQSxDQUFDO0lBRWEsaUNBQWlCLEdBQS9CO0lBR0EsQ0FBQztJQUVhLG1DQUFtQixHQUFqQztJQUdBLENBQUM7SUFFYSwyQkFBVyxHQUF6QjtJQUdBLENBQUM7SUFFYSwrQkFBZSxHQUE3QjtJQUdBLENBQUM7SUFFYSxnQ0FBZ0IsR0FBOUI7SUFHQSxDQUFDO0lBRWEsaUNBQWlCLEdBQS9CO0lBR0EsQ0FBQztJQXRGTSx1QkFBTyxHQUFHLEdBQUcsQ0FBQztJQUNkLHlCQUFTLEdBQUcsNENBQTRDLENBQUM7SUFDekQsNEJBQVksR0FBRywwQ0FBMEMsQ0FBQztJQXFGckUsc0JBQUM7Q0F6RkQsQUF5RkMsSUFBQTtrQkF6Rm9CLGVBQWUiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyDmuLjmiI/ooYzkuLrliIbmnpBcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVwbG9hZEFuYWx5dGljcyBcclxue1xyXG4gICAgc3RhdGljIFFNQVBQSUQgPSAxMDA7XHJcbiAgICBzdGF0aWMgVXBsb2FkVXJsID0gXCJodHRwOi8vYmlnZi5xaGRnY2RsLmNvbToxNTE0NS9sb2cvYmVoYXZpb3JcIjtcclxuICAgIHN0YXRpYyBhbmFseXRpY3NVUkwgPSBcImh0dHBzOi8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2NvbGxlY3RcIjtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIEdldE1pbGxTZWNvbmRUaW1lc3RhbXAoKVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBHZXRQbGF0Zm9ybSgpXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIHBsYXRmb3JtID0gXCJFZGl0b3JcIjtcclxuICAgICAgICBpZiAoY2Muc3lzLm9zID09IGNjLnN5cy5PU19BTkRST0lEKSAgXHJcbiAgICAgICAgICAgIHBsYXRmb3JtID0gXCJBbmRyb2lkXCI7IFxyXG4gICAgICAgIGVsc2UgaWYgKGNjLnN5cy5vcyA9PSBjYy5zeXMuT1NfSU9TKSAgXHJcbiAgICAgICAgICAgIHBsYXRmb3JtID0gXCJpT1NcIjtcclxuXHJcbiAgICAgICAgcmV0dXJuIHBsYXRmb3JtO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgR2V0QXBwVmVyc2lvbigpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBHZXRUaWQoKVxyXG4gICAge1xyXG4gICAgICAgIHZhciB0aWQgPSBcIlVBLTEyMzc1MzE3Mi0xXCI7IFxyXG4gICAgICAgIGlmIChjYy5zeXMub3MgPT0gY2Muc3lzLk9TX0FORFJPSUQgfHwgY2Muc3lzLm9zID09IGNjLnN5cy5PU19JT1MpICBcclxuICAgICAgICAgICAgdGlkID0gXCJVQS0xMjM3NDc1MTgtMVwiO1xyXG4gICAgICAgIHJldHVybiB0aWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBVcGxvYWRBbmFseXRpY3NFdmVudChlYywgZWEsIGVsPW51bGwsIGV2PW51bGwpXHJcbiAgICB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgVXBsb2FkQW5hbHl0aWNzU2NyZWVuKHNjcmVlbk5hbWUpXHJcbiAgICB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgVXBsb2FkQW5hbHl0aWNzQ3VzdG9tRXhjZXB0aW9uKG1lc3MpXHJcbiAgICB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgVXBsb2FkRmlyc3RPcGVuKClcclxuICAgIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBVcGxvYWRTdGFydEdhbWUoKVxyXG4gICAge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIFVwbG9hZFVwZGF0ZVN0YXJ0KClcclxuICAgIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBVcGxvYWRVcGRhdGVTdWNjZXNzKClcclxuICAgIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBVcGxvYWRMb2dpbigpXHJcbiAgICB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgVXBsb2FkRW50ZXJIYWxsKClcclxuICAgIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBVcGxvYWRDbGlja0V2ZW50KClcclxuICAgIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBVcGxvYWRUcmFuc2FjdGlvbigpXHJcbiAgICB7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbn1cclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/AtlasFont.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '01841t/U1FJwp0nMWhDCd/d', 'AtlasFont');
// Scripts/Tools/AtlasFont.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Extension_1 = require("./Extension");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var AtlasFont = /** @class */ (function (_super) {
    __extends(AtlasFont, _super);
    function AtlasFont() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AtlasFont.prototype.Init = function (atlas, getSpriteNameFunc) {
        this.tarNode = this.node;
        this.firstNode = this.node.children[0];
        this.atlas = atlas;
        this.getSpriteNameFunc = getSpriteNameFunc;
        for (var _i = 0, _a = this.tarNode.children; _i < _a.length; _i++) {
            var val = _a[_i];
            val.active = false;
        }
    };
    //需要一个布局组件 设置好自动布局
    AtlasFont.prototype.SetContent = function (content, okCallback) {
        // var node = cc.instantiate(prefabAsset);
        if (okCallback === void 0) { okCallback = null; }
        //先全部隐藏
        for (var _i = 0, _a = this.tarNode.children; _i < _a.length; _i++) {
            var val = _a[_i];
            val.active = false;
        }
        //创建不足够
        for (var i = this.tarNode.childrenCount; i < content.length; i++) {
            var node = cc.instantiate(this.firstNode);
            node.parent = this.firstNode.parent;
        }
        var okCnt = 0;
        var fAllOk = function () {
            ++okCnt;
            if (okCnt == content.length && okCallback != null) {
                okCallback();
            }
        };
        //设置各个sprite
        for (var i = 0; i < content.length; i++) {
            var node = this.tarNode.children[i];
            node.active = true;
            var finalSpriteName = this.getSpriteNameFunc(content.substr(i, 1));
            Extension_1.default.DirGetAbSprite(node.getComponent(cc.Sprite), this.atlas, finalSpriteName, fAllOk);
        }
    };
    AtlasFont.prototype.Clear = function () {
        for (var _i = 0, _a = this.tarNode.children; _i < _a.length; _i++) {
            var val = _a[_i];
            val.active = false;
        }
    };
    AtlasFont = __decorate([
        ccclass
    ], AtlasFont);
    return AtlasFont;
}(cc.Component));
exports.default = AtlasFont;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXEF0bGFzRm9udC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx5Q0FBb0M7QUFFOUIsSUFBQSxrQkFBbUMsRUFBbEMsb0JBQU8sRUFBRSxzQkFBeUIsQ0FBQztBQUcxQztJQUF1Qyw2QkFBWTtJQUFuRDs7SUEyREEsQ0FBQztJQW5EVSx3QkFBSSxHQUFYLFVBQVksS0FBYSxFQUFFLGlCQUEwQztRQUNqRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUE7UUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN0QyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUNsQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUE7UUFFMUMsS0FBZ0IsVUFBcUIsRUFBckIsS0FBQSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBckIsY0FBcUIsRUFBckIsSUFBcUIsRUFBRTtZQUFsQyxJQUFJLEdBQUcsU0FBQTtZQUNSLEdBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO1NBQ3JCO0lBQ0wsQ0FBQztJQUVELGtCQUFrQjtJQUNYLDhCQUFVLEdBQWpCLFVBQWtCLE9BQWUsRUFBRSxVQUE2QjtRQUM1RCwwQ0FBMEM7UUFEWCwyQkFBQSxFQUFBLGlCQUE2QjtRQUc1RCxPQUFPO1FBQ1AsS0FBZ0IsVUFBcUIsRUFBckIsS0FBQSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBckIsY0FBcUIsRUFBckIsSUFBcUIsRUFBRTtZQUFsQyxJQUFJLEdBQUcsU0FBQTtZQUNSLEdBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO1NBQ3JCO1FBRUQsT0FBTztRQUNQLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDOUQsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7WUFDekMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQTtTQUN0QztRQUVELElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQTtRQUNiLElBQUksTUFBTSxHQUFHO1lBQ1QsRUFBRSxLQUFLLENBQUE7WUFDUCxJQUFJLEtBQUssSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLFVBQVUsSUFBSSxJQUFJLEVBQUU7Z0JBQy9DLFVBQVUsRUFBRSxDQUFBO2FBQ2Y7UUFDTCxDQUFDLENBQUE7UUFFRCxZQUFZO1FBQ1osS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDckMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUE7WUFDbEIsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDbEUsbUJBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUE7U0FDOUY7SUFFTCxDQUFDO0lBRU0seUJBQUssR0FBWjtRQUNJLEtBQWdCLFVBQXFCLEVBQXJCLEtBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQXJCLGNBQXFCLEVBQXJCLElBQXFCLEVBQUU7WUFBbEMsSUFBSSxHQUFHLFNBQUE7WUFDUixHQUFHLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQTtTQUNyQjtJQUNMLENBQUM7SUF4RGdCLFNBQVM7UUFEN0IsT0FBTztPQUNhLFNBQVMsQ0EyRDdCO0lBQUQsZ0JBQUM7Q0EzREQsQUEyREMsQ0EzRHNDLEVBQUUsQ0FBQyxTQUFTLEdBMkRsRDtrQkEzRG9CLFNBQVMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXh0ZW5zaW9uIGZyb20gXCIuL0V4dGVuc2lvblwiO1xuXG5jb25zdCB7Y2NjbGFzcywgcHJvcGVydHl9ID0gY2MuX2RlY29yYXRvcjtcblxuQGNjY2xhc3NcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF0bGFzRm9udCBleHRlbmRzIGNjLkNvbXBvbmVudCB7XG5cbiAgICBwcml2YXRlIHRhck5vZGU6IGNjLk5vZGVcbiAgICBwcml2YXRlIGF0bGFzOiBzdHJpbmdcbiAgICBwcml2YXRlIGdldFNwcml0ZU5hbWVGdW5jOiAodmFsOiBzdHJpbmcpID0+IHN0cmluZ1xuICAgIHByaXZhdGUgZmlyc3ROb2RlXG5cblxuICAgIHB1YmxpYyBJbml0KGF0bGFzOiBzdHJpbmcsIGdldFNwcml0ZU5hbWVGdW5jOiAodmFsOiBzdHJpbmcpID0+IHN0cmluZykge1xuICAgICAgICB0aGlzLnRhck5vZGUgPSB0aGlzLm5vZGVcbiAgICAgICAgdGhpcy5maXJzdE5vZGUgPSB0aGlzLm5vZGUuY2hpbGRyZW5bMF1cbiAgICAgICAgdGhpcy5hdGxhcyA9IGF0bGFzXG4gICAgICAgIHRoaXMuZ2V0U3ByaXRlTmFtZUZ1bmMgPSBnZXRTcHJpdGVOYW1lRnVuY1xuXG4gICAgICAgIGZvciAobGV0IHZhbCBvZiB0aGlzLnRhck5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHZhbC5hY3RpdmUgPSBmYWxzZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy/pnIDopoHkuIDkuKrluIPlsYDnu4Tku7Yg6K6+572u5aW96Ieq5Yqo5biD5bGAXG4gICAgcHVibGljIFNldENvbnRlbnQoY29udGVudDogc3RyaW5nLCBva0NhbGxiYWNrOiAoKSA9PiB2b2lkID0gbnVsbCkge1xuICAgICAgICAvLyB2YXIgbm9kZSA9IGNjLmluc3RhbnRpYXRlKHByZWZhYkFzc2V0KTtcblxuICAgICAgICAvL+WFiOWFqOmDqOmakOiXj1xuICAgICAgICBmb3IgKGxldCB2YWwgb2YgdGhpcy50YXJOb2RlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICB2YWwuYWN0aXZlID0gZmFsc2VcbiAgICAgICAgfVxuXG4gICAgICAgIC8v5Yib5bu65LiN6Laz5aSfXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnRhck5vZGUuY2hpbGRyZW5Db3VudDsgaSA8IGNvbnRlbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBub2RlID0gY2MuaW5zdGFudGlhdGUodGhpcy5maXJzdE5vZGUpXG4gICAgICAgICAgICBub2RlLnBhcmVudCA9IHRoaXMuZmlyc3ROb2RlLnBhcmVudFxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG9rQ250ID0gMFxuICAgICAgICBsZXQgZkFsbE9rID0gKCkgPT4ge1xuICAgICAgICAgICAgKytva0NudFxuICAgICAgICAgICAgaWYgKG9rQ250ID09IGNvbnRlbnQubGVuZ3RoICYmIG9rQ2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9rQ2FsbGJhY2soKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy/orr7nva7lkITkuKpzcHJpdGVcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbm9kZSA9IHRoaXMudGFyTm9kZS5jaGlsZHJlbltpXVxuICAgICAgICAgICAgbm9kZS5hY3RpdmUgPSB0cnVlXG4gICAgICAgICAgICBsZXQgZmluYWxTcHJpdGVOYW1lID0gdGhpcy5nZXRTcHJpdGVOYW1lRnVuYyhjb250ZW50LnN1YnN0cihpLCAxKSlcbiAgICAgICAgICAgIEV4dGVuc2lvbi5EaXJHZXRBYlNwcml0ZShub2RlLmdldENvbXBvbmVudChjYy5TcHJpdGUpLCB0aGlzLmF0bGFzLCBmaW5hbFNwcml0ZU5hbWUsIGZBbGxPaylcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcHVibGljIENsZWFyKCl7XG4gICAgICAgIGZvciAobGV0IHZhbCBvZiB0aGlzLnRhck5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHZhbC5hY3RpdmUgPSBmYWxzZVxuICAgICAgICB9XG4gICAgfVxuXG5cbn0iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/Toast.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'bac18GyNJZD25kvnrqUSwxx', 'Toast');
// Scripts/Tools/Toast.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MessageCenter_1 = require("../MVCFramework/MessageCenter");
var MessageNames_1 = require("../Modules/MessageNames");
var Toast = /** @class */ (function () {
    function Toast() {
    }
    Toast.Show = function (content) {
        MessageCenter_1.default.SendMessage(MessageNames_1.default.ShowToastUI, content);
    };
    return Toast;
}());
exports.default = Toast;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFRvYXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsK0RBQTBEO0FBQzFELHdEQUFtRDtBQUVuRDtJQUFBO0lBT0EsQ0FBQztJQUxpQixVQUFJLEdBQWxCLFVBQW1CLE9BQU87UUFFdEIsdUJBQWEsQ0FBQyxXQUFXLENBQUMsc0JBQVksQ0FBQyxXQUFXLEVBQUMsT0FBTyxDQUFDLENBQUE7SUFDL0QsQ0FBQztJQUVMLFlBQUM7QUFBRCxDQVBBLEFBT0MsSUFBQSIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNZXNzYWdlQ2VudGVyIGZyb20gXCIuLi9NVkNGcmFtZXdvcmsvTWVzc2FnZUNlbnRlclwiO1xuaW1wb3J0IE1lc3NhZ2VOYW1lcyBmcm9tIFwiLi4vTW9kdWxlcy9NZXNzYWdlTmFtZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9hc3QgXG57XG4gICAgcHVibGljIHN0YXRpYyBTaG93KGNvbnRlbnQpXG4gICAge1xuICAgICAgICBNZXNzYWdlQ2VudGVyLlNlbmRNZXNzYWdlKE1lc3NhZ2VOYW1lcy5TaG93VG9hc3RVSSxjb250ZW50KVxuICAgIH1cblxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Modules/Views/ViewDialogNormal.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '27684+suVpMLbDqcj0tzavZ', 'ViewDialogNormal');
// Scripts/Modules/Views/ViewDialogNormal.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var View_1 = require("../../MVCFramework/View");
var Util_1 = require("../../Tools/Util");
var Global_1 = require("../../Global/Global");
var ViewDialogNormal = /** @class */ (function (_super) {
    __extends(ViewDialogNormal, _super);
    function ViewDialogNormal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ViewDialogNormal.prototype.OnAwake = function () {
        var _this = this;
        if (Global_1.default.showLog == true)
            cc.log("ViewTest1 OnAwake");
        this.ButtonYes = this.FindTransform("ButtonYes").getComponent(cc.Button);
        Util_1.default.SetClickAction(this.ButtonYes, function (button, data) {
            _this.Hide();
            if (_this.data.yesCallback != null) {
                _this.data.yesCallback();
            }
        });
        this.ButtonNo = this.FindTransform("ButtonNo").getComponent(cc.Button);
        Util_1.default.SetClickAction(this.ButtonNo, function (button, data) {
            _this.Hide();
            if (_this.data.noCallback != null) {
                _this.data.noCallback();
            }
        });
        this.ButtonClose = this.FindTransform("ButtonClose").getComponent(cc.Button);
        Util_1.default.SetClickAction(this.ButtonClose, function (button, data) {
            _this.Hide();
        });
        this.LabelTitle = this.FindTransform("LabelTitle").getComponent(cc.Label);
        this.LabelContent = this.FindTransform("LabelContent").getComponent(cc.Label);
        this.LabelYes = this.FindTransform("LabelYes").getComponent(cc.Label);
        this.LabelNo = this.FindTransform("LabelNo").getComponent(cc.Label);
    };
    ViewDialogNormal.prototype.OnShowView = function () {
    };
    ViewDialogNormal.prototype.OnHideView = function () {
    };
    ViewDialogNormal.prototype.OnFocus = function () {
    };
    ViewDialogNormal.prototype.OnDisFocus = function () {
    };
    ViewDialogNormal.prototype.OnDestroy = function () {
    };
    ViewDialogNormal.prototype.SetData = function (data) {
        this.data = data;
        this.LabelContent.string = this.data.content;
        this.LabelTitle.string = this.data.title;
        this.ButtonYes.node.active = this.data.showYes;
        this.ButtonNo.node.active = this.data.showNo;
        this.LabelYes.string = this.data.yesText;
        this.LabelNo.string = this.data.noText;
    };
    return ViewDialogNormal;
}(View_1.default));
exports.default = ViewDialogNormal;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTW9kdWxlc1xcVmlld3NcXFZpZXdEaWFsb2dOb3JtYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZ0RBQTJDO0FBRTNDLHlDQUFvQztBQUVwQyw4Q0FBeUM7QUFHekM7SUFBOEMsb0NBQUk7SUFBbEQ7O0lBaUZBLENBQUM7SUFyRVUsa0NBQU8sR0FBZDtRQUFBLGlCQStCQztRQTdCRyxJQUFHLGdCQUFNLENBQUMsT0FBTyxJQUFJLElBQUk7WUFDckIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pFLGNBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQyxVQUFDLE1BQU0sRUFBQyxJQUFJO1lBRTNDLEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNaLElBQUcsS0FBSSxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxFQUNoQztnQkFDSSxLQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQzNCO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2RSxjQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUMsVUFBQyxNQUFNLEVBQUMsSUFBSTtZQUUxQyxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDWixJQUFHLEtBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksRUFDL0I7Z0JBQ0ksS0FBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUMxQjtRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0UsY0FBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFDLFVBQUMsTUFBTSxFQUFDLElBQUk7WUFDN0MsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFOUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVNLHFDQUFVLEdBQWpCO0lBR0EsQ0FBQztJQUVNLHFDQUFVLEdBQWpCO0lBR0EsQ0FBQztJQUVNLGtDQUFPLEdBQWQ7SUFHQSxDQUFDO0lBRU0scUNBQVUsR0FBakI7SUFHQSxDQUFDO0lBRU0sb0NBQVMsR0FBaEI7SUFHQSxDQUFDO0lBRU0sa0NBQU8sR0FBZCxVQUFlLElBQWU7UUFFMUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDN0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDekMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQy9DLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUM3QyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMzQyxDQUFDO0lBRUwsdUJBQUM7QUFBRCxDQWpGQSxBQWlGQyxDQWpGNkMsY0FBSSxHQWlGakQiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmlldyBmcm9tIFwiLi4vLi4vTVZDRnJhbWV3b3JrL1ZpZXdcIjtcbmltcG9ydCB7IERpYWxvZ0RhdGEgfSBmcm9tIFwiLi4vLi4vVG9vbHMvRGlhbG9nXCI7XG5pbXBvcnQgVXRpbCBmcm9tIFwiLi4vLi4vVG9vbHMvVXRpbFwiO1xuaW1wb3J0IGNjQyBmcm9tIFwiLi4vLi4vVG9vbHMvY2NDXCI7XG5pbXBvcnQgR2xvYmFsIGZyb20gXCIuLi8uLi9HbG9iYWwvR2xvYmFsXCI7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlld0RpYWxvZ05vcm1hbCBleHRlbmRzIFZpZXdcbntcbiAgICBwcml2YXRlIEJ1dHRvblllczpjYy5CdXR0b247XG4gICAgcHJpdmF0ZSBCdXR0b25ObzpjYy5CdXR0b247XG4gICAgcHJpdmF0ZSBCdXR0b25DbG9zZTpjYy5CdXR0b247XG4gICAgcHJpdmF0ZSBMYWJlbFRpdGxlOmNjLkxhYmVsO1xuICAgIHB1YmxpYyBMYWJlbENvbnRlbnQ6Y2MuTGFiZWw7XG4gICAgcHJpdmF0ZSBMYWJlbFllczpjYy5MYWJlbDtcbiAgICBwcml2YXRlIExhYmVsTm86Y2MuTGFiZWw7XG5cbiAgICBwcml2YXRlIGRhdGE6RGlhbG9nRGF0YTtcblxuICAgIHB1YmxpYyBPbkF3YWtlKClcbiAgICB7XG4gICAgICAgIGlmKEdsb2JhbC5zaG93TG9nID09IHRydWUpXG4gICAgICAgICAgICBjYy5sb2coXCJWaWV3VGVzdDEgT25Bd2FrZVwiKTtcbiAgICAgICAgdGhpcy5CdXR0b25ZZXMgPSB0aGlzLkZpbmRUcmFuc2Zvcm0oXCJCdXR0b25ZZXNcIikuZ2V0Q29tcG9uZW50KGNjLkJ1dHRvbik7XG4gICAgICAgIFV0aWwuU2V0Q2xpY2tBY3Rpb24odGhpcy5CdXR0b25ZZXMsKGJ1dHRvbixkYXRhKT0+e1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLkhpZGUoKTtcbiAgICAgICAgICAgIGlmKHRoaXMuZGF0YS55ZXNDYWxsYmFjayAhPSBudWxsKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS55ZXNDYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5CdXR0b25ObyA9IHRoaXMuRmluZFRyYW5zZm9ybShcIkJ1dHRvbk5vXCIpLmdldENvbXBvbmVudChjYy5CdXR0b24pO1xuICAgICAgICBVdGlsLlNldENsaWNrQWN0aW9uKHRoaXMuQnV0dG9uTm8sKGJ1dHRvbixkYXRhKT0+e1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLkhpZGUoKTtcbiAgICAgICAgICAgIGlmKHRoaXMuZGF0YS5ub0NhbGxiYWNrICE9IG51bGwpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLm5vQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuQnV0dG9uQ2xvc2UgPSB0aGlzLkZpbmRUcmFuc2Zvcm0oXCJCdXR0b25DbG9zZVwiKS5nZXRDb21wb25lbnQoY2MuQnV0dG9uKTtcbiAgICAgICAgVXRpbC5TZXRDbGlja0FjdGlvbih0aGlzLkJ1dHRvbkNsb3NlLChidXR0b24sZGF0YSk9PntcbiAgICAgICAgICAgIHRoaXMuSGlkZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5MYWJlbFRpdGxlID0gdGhpcy5GaW5kVHJhbnNmb3JtKFwiTGFiZWxUaXRsZVwiKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpO1xuICAgICAgICB0aGlzLkxhYmVsQ29udGVudCA9IHRoaXMuRmluZFRyYW5zZm9ybShcIkxhYmVsQ29udGVudFwiKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpO1xuXG4gICAgICAgIHRoaXMuTGFiZWxZZXMgPSB0aGlzLkZpbmRUcmFuc2Zvcm0oXCJMYWJlbFllc1wiKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpO1xuICAgICAgICB0aGlzLkxhYmVsTm8gPSB0aGlzLkZpbmRUcmFuc2Zvcm0oXCJMYWJlbE5vXCIpLmdldENvbXBvbmVudChjYy5MYWJlbCk7XG4gICAgfVxuXG4gICAgcHVibGljIE9uU2hvd1ZpZXcoKVxuICAgIHtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHVibGljIE9uSGlkZVZpZXcoKVxuICAgIHtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHVibGljIE9uRm9jdXMoKVxuICAgIHtcblxuICAgIH1cblxuICAgIHB1YmxpYyBPbkRpc0ZvY3VzKClcbiAgICB7XG4gICAgICAgIFxuICAgIH1cblxuICAgIHB1YmxpYyBPbkRlc3Ryb3koKVxuICAgIHtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHVibGljIFNldERhdGEoZGF0YTpEaWFsb2dEYXRhKVxuICAgIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5MYWJlbENvbnRlbnQuc3RyaW5nID0gdGhpcy5kYXRhLmNvbnRlbnQ7XG4gICAgICAgIHRoaXMuTGFiZWxUaXRsZS5zdHJpbmcgPSB0aGlzLmRhdGEudGl0bGU7XG4gICAgICAgIHRoaXMuQnV0dG9uWWVzLm5vZGUuYWN0aXZlID0gdGhpcy5kYXRhLnNob3dZZXM7XG4gICAgICAgIHRoaXMuQnV0dG9uTm8ubm9kZS5hY3RpdmUgPSB0aGlzLmRhdGEuc2hvd05vO1xuICAgICAgICB0aGlzLkxhYmVsWWVzLnN0cmluZyA9IHRoaXMuZGF0YS55ZXNUZXh0O1xuICAgICAgICB0aGlzLkxhYmVsTm8uc3RyaW5nID0gdGhpcy5kYXRhLm5vVGV4dDtcbiAgICB9XG5cbn1cbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/OpenNetworkingUI.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e0db5zXQodFCIS0KSrvzflK', 'OpenNetworkingUI');
// Scripts/Tools/OpenNetworkingUI.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MessageCenter_1 = require("../MVCFramework/MessageCenter");
var MessageNames_1 = require("../Modules/MessageNames");
var OpenNetworkingUI = /** @class */ (function () {
    function OpenNetworkingUI() {
    }
    OpenNetworkingUI.Show = function (msg) {
        if (msg === void 0) { msg = ""; }
        // cc.error("OpenNetworkingUI Show ");
        MessageCenter_1.default.SendMessage(MessageNames_1.default.OpenNetworkLoading, { status: true, content: msg });
    };
    OpenNetworkingUI.Hide = function () {
        MessageCenter_1.default.SendMessage(MessageNames_1.default.OpenNetworkLoading, { status: false, content: "" });
    };
    return OpenNetworkingUI;
}());
exports.default = OpenNetworkingUI;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXE9wZW5OZXR3b3JraW5nVUkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwrREFBMEQ7QUFDMUQsd0RBQW1EO0FBRW5EO0lBQUE7SUFhQSxDQUFDO0lBWGlCLHFCQUFJLEdBQWxCLFVBQW1CLEdBQU07UUFBTixvQkFBQSxFQUFBLFFBQU07UUFFckIsc0NBQXNDO1FBQ3RDLHVCQUFhLENBQUMsV0FBVyxDQUFDLHNCQUFZLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxNQUFNLEVBQUcsSUFBSSxFQUFFLE9BQU8sRUFBQyxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQzlGLENBQUM7SUFFYSxxQkFBSSxHQUFsQjtRQUVJLHVCQUFhLENBQUMsV0FBVyxDQUFDLHNCQUFZLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxNQUFNLEVBQUcsS0FBSyxFQUFFLE9BQU8sRUFBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQzlGLENBQUM7SUFFTCx1QkFBQztBQUFELENBYkEsQUFhQyxJQUFBIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1lc3NhZ2VDZW50ZXIgZnJvbSBcIi4uL01WQ0ZyYW1ld29yay9NZXNzYWdlQ2VudGVyXCI7XG5pbXBvcnQgTWVzc2FnZU5hbWVzIGZyb20gXCIuLi9Nb2R1bGVzL01lc3NhZ2VOYW1lc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuTmV0d29ya2luZ1VJIFxue1xuICAgIHB1YmxpYyBzdGF0aWMgU2hvdyhtc2c9XCJcIilcbiAgICB7XG4gICAgICAgIC8vIGNjLmVycm9yKFwiT3Blbk5ldHdvcmtpbmdVSSBTaG93IFwiKTtcbiAgICAgICAgTWVzc2FnZUNlbnRlci5TZW5kTWVzc2FnZShNZXNzYWdlTmFtZXMuT3Blbk5ldHdvcmtMb2FkaW5nLCB7IHN0YXR1cyA6IHRydWUsIGNvbnRlbnQ6bXNnIH0pXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBIaWRlKClcbiAgICB7XG4gICAgICAgIE1lc3NhZ2VDZW50ZXIuU2VuZE1lc3NhZ2UoTWVzc2FnZU5hbWVzLk9wZW5OZXR3b3JrTG9hZGluZywgeyBzdGF0dXMgOiBmYWxzZSwgY29udGVudDpcIlwiIH0pXG4gICAgfVxuXG59XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/Extension.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '82f4dAh9nhF+7gQ/N0jME1B', 'Extension');
// Scripts/Tools/Extension.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TimerManager_1 = require("../Components/TimerManager");
var NodeUtil_1 = require("./NodeUtil");
var XTweenObserver_1 = require("./XTween/Base/XTweenObserver");
var Vec2 = cc.Vec2;
var ccC_1 = require("./ccC");
var Extension = /** @class */ (function () {
    function Extension() {
    }
    Extension.SearchNode = function (transform, childname) {
        for (var i = 0; i < transform.childrenCount; i++) {
            var child = transform.children[i];
            if (child.name == childname) {
                return child;
            }
            var result = Extension.SearchNode(child, childname);
            if (result != null) {
                return result;
            }
        }
        return null;
    };
    Extension.DirGetAbTrans = function (path, callback, transParent) {
        Extension.DirGetAbObj(path, function (err, prefab) {
            if (transParent != null) {
                prefab.parent = (transParent);
                prefab.scale = 1;
                prefab.position = Vec2.ZERO;
                if (callback != null) {
                    callback(err, prefab);
                }
            }
        });
    };
    Extension.SearchSprite = function (transform, childname) {
        var node = Extension.SearchNode(transform, childname);
        if (node != null) {
            return node.getComponent(cc.Sprite);
        }
        return null;
    };
    Extension.SearchBtn = function (transform, childname) {
        var node = Extension.SearchNode(transform, childname);
        if (node != null) {
            return node.getComponent(cc.Button);
        }
        return null;
    };
    Extension.SearchTxt = function (transform, childname) {
        var node = Extension.SearchNode(transform, childname);
        if (node != null) {
            return node.getComponent(cc.Label);
        }
        return null;
    };
    Extension.GetGenderByName = function (headName) {
        if (headName == null) {
            return true;
        }
        if (headName.length == null) {
            return true;
        }
        return headName.indexOf("_M_") != -1;
    };
    Extension.DirGetAbObj = function (path, callback) {
        ccC_1.default.loadRes(path, cc.Prefab, function (newError, node) {
            if (newError == null) {
                callback(newError, cc.instantiate(node));
            }
            else {
                callback(newError, null);
            }
        });
    };
    Extension.ClearArr = function (arr) {
        if (arr == null) {
            return;
        }
        var len = arr.length;
        for (var i = 0; i < len; i++) {
            arr.shift();
        }
    };
    Extension.SetAsLastSibling = function (trans) {
        var total = trans.parent.childrenCount - 1;
        trans.setSiblingIndex(total);
    };
    Extension.JSObjectLength = function (obj) {
        var cnt = 0;
        for (var key in obj) {
            cnt = cnt + 1;
        }
        return cnt;
    };
    Extension.DelayCall = function (func, delay, parm, repeatCnt, interval, keepAlive) {
        if (parm === void 0) { parm = null; }
        if (repeatCnt === void 0) { repeatCnt = 0; }
        if (interval === void 0) { interval = null; }
        if (keepAlive === void 0) { keepAlive = false; }
        var _interval = interval;
        if (_interval == null) {
            _interval = delay;
        }
        return TimerManager_1.default.GetInstance().CallActionDelay(func, delay, parm, repeatCnt, _interval, keepAlive);
    };
    Extension.CancelDelayCall = function (id) {
        TimerManager_1.default.GetInstance().DeleteTimer(id);
    };
    Extension.DirGetAbSprite = function (img, atlasPath, spriteName, finishCallback) {
        if (finishCallback === void 0) { finishCallback = null; }
        NodeUtil_1.default.SetSpriteFrame(img, atlasPath, spriteName, finishCallback);
    };
    Extension.ClearXTween = function (node) {
        var ob = node.getComponent(XTweenObserver_1.default);
        if (ob != null) {
            node.removeComponent(ob);
        }
    };
    Extension.GetTimeString = function (time) {
        var Day = 24 * 3600 * 1000;
        var date = new Date();
        date.setTime(Date.now());
        var today = new Date(date.getFullYear(), date.getMonth(), date.getDate());
        var msgTime = Number(time);
        if (today.getTime() <= msgTime) {
            date = new Date();
            date.setTime(msgTime);
            var hour = date.getHours() < 10 ? "0" + date.getHours() : date.getHours();
            var min = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
            return hour + ":" + min;
        }
        else {
            var diff = today.getTime() - msgTime;
            if (diff <= Day) {
                return "昨天";
            }
            else if (diff <= 2 * Day) {
                return "前天";
            }
            else {
                return "3天前";
            }
        }
    };
    return Extension;
}());
exports.default = Extension;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/UploadIMG.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '67f87aUXJpIdrlSG5GzHqSb', 'UploadIMG');
// Scripts/Tools/UploadIMG.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UploadIMG = /** @class */ (function () {
    function UploadIMG() {
    }
    // ts 代码
    // 选择本地文件，以下callback为函数回调参数
    UploadIMG.openLocalFile = function (callback) {
        var inputEl = document.getElementById('file_input'); // 类型转行 HTMLInputElement ，方便下面的 inputEl.files 调用
        if (!inputEl) {
            // 只创建一次
            console.log('xxxxxx createElement input');
            inputEl = document.createElement('input');
            inputEl.id = 'file_input';
            inputEl.setAttribute('id', 'file_input');
            inputEl.setAttribute('type', 'file');
            inputEl.setAttribute('class', 'fileToUpload');
            inputEl.style.opacity = '0'; // 不可见
            inputEl.style.position = 'absolute';
            document.body.appendChild(inputEl);
        }
        // 这个和 inputEl.onchange 的效果是一样的，2选1就可以了
        // inputEl.addEventListener('change', (event) => {
        //    console.log('xxx onchange1', event, inputEl.value);
        // });
        inputEl.onchange = function (event) {
            // console.log('xxx onchange2', event, inputEl.files);
            var files = inputEl.files; // 我在Mac上测试，每次只能选一个文件
            if (files && files.length > 0) {
                var file = files[0];
                if (callback)
                    callback(file);
            }
        };
        inputEl.click(); // 模拟点击，触发文件选择弹出框，据说有的浏览器不支持，chrome是没问题的
    };
    UploadIMG.upload = function (file) {
        // 使用表单设置文件，发送上传消息到服务器
        var forms = new FormData();
        forms.append("file", file); // 必填，key不限制必须"file"，根据nestjs服务器逻辑填写
        forms.append('fileName', file.name); // 选填，根据nestjs服务器逻辑填写
        forms.append('targetPath', 'test'); // 选填，根据nestjs服务器逻辑填写
        var xhr = cc.loader.getXMLHttpRequest(); //new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                if (xhr.status >= 200 && xhr.status <= 300 || xhr.status == 304) {
                    console.log(xhr.response);
                }
            }
            else {
                console.log(xhr.status);
            }
        };
        xhr.open('POST', 'http://localhost:443/api/v1/upload', true);
        // xhr.setRequestHeader 的问题卡了好久，
        // nestjs那边一直报错，nestjs的文档要求是 multipart/form-data 格式，
        // 但是要是你自己设置的话会导致 Boundary 丢失，nestjs 的multer中间件解析错误，报错"Multipart: Boundary not found"，
        // 所以不设置"multipart/form-data"，自动生成就好，可以在network里查看发送的消息头已经自动添加好了"Content-Type"，
        // 网上各路大神各种花式解决方案，都未解决我的困惑，最后参考这个链接解决，跪谢https://blog.csdn.net/yun_hou/article/details/97004557
        // xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");// multer不会处理非"multipart/form-data"表单
        // xhr.setRequestHeader("Content-Type", "multipart/form-data");
        // console.log(forms);// 打印不出来什么的，所以放弃吧
        xhr.addEventListener("progress", function (evt) {
            console.log('xxx progress', evt); // 上传进度，我只看到打印一次
        }, false);
        xhr.send(forms);
    };
    // 展示本地图片到sprite
    UploadIMG.showImage = function (base64, sprite) {
        // 读取文件为base64数据流
        this.base64ToSpriteFrame(base64, function (spriteFrame) {
            if (sprite)
                sprite.spriteFrame = spriteFrame;
        });
    };
    // 读取文件为base64数据流
    UploadIMG.readFile = function (file, callback) {
        var reader = new FileReader();
        reader.onload = function (event2) {
            if (callback) {
                if (reader.readyState == FileReader.DONE) {
                    // console.log('xxx FileReader', event2, reader.result);
                    callback(reader.result.toString());
                }
                else {
                    console.error('FileReader read error', event2, reader.result);
                    callback(null);
                }
            }
        };
        // reader.readAsText(file);//作为字符串读出
        reader.readAsDataURL(file);
        //reader.readAsText(file,'gb2312');//默认是用utf-8格式输出的，想指定输出格式就再添加一个参数，像txt的ANSI格式只能用国标才能显示出来
    };
    //
    UploadIMG.base64ToSpriteFrame = function (base64, callback) {
        var img = new Image();
        console.warn("------------准备合成-------------");
        img.onload = function () {
            console.warn("*********img.onload**********");
            var texture = new cc.Texture2D();
            texture.initWithElement(img);
            texture.handleLoadedTexture();
            var newframe = new cc.SpriteFrame(texture);
            if (callback)
                callback(newframe);
        };
        img.onerror = function (err) {
            console.warn("------合成报错-----", err);
        };
        if (base64.startsWith !== undefined && base64.startsWith("data:image")) {
            img.src = base64;
        }
        else {
            img.src = "data:image/png;base64," + base64;
        }
    };
    return UploadIMG;
}());
exports.default = UploadIMG;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/XTweenerRotaion.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '1d3aafLDH9HS7p3VpjS9b1m', 'XTweenerRotaion');
// Scripts/Tools/XTween/XTweenerRotaion.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var XTweener_1 = require("./Base/XTweener");
var XTweenCurv_1 = require("./Base/XTweenCurv");
var XTweenerRotaion = /** @class */ (function (_super) {
    __extends(XTweenerRotaion, _super);
    function XTweenerRotaion() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    XTweenerRotaion.prototype.Init = function (target, startValue, endValue, duration, playTimes, pingPong, curv) {
        if (curv === void 0) { curv = XTweenCurv_1.XTweenCurvType.Liner; }
        this.SetTarget(target);
        this.startValue = startValue;
        this.endValue = endValue;
        this.duration = duration;
        // this.curvType = curv;
        // this.pingPong = pingPong;
        // this.repeatTimes = playTimes;
        this.InitTweenerData(playTimes, pingPong, curv);
    };
    XTweenerRotaion.prototype.Update = function (deltaTime) {
        _super.prototype.Update.call(this, deltaTime);
        if (this.beReplaced == true) {
            this.CheckFinish();
            return;
        }
        this.target.rotation = this.startValue + (this.endValue - this.startValue) * this.animationProgress;
        this.CheckFinish();
    };
    XTweenerRotaion.prototype.OnPlay = function () {
        if (this.startValue == null) {
            this.startValue = this.target.rotation;
        }
    };
    XTweenerRotaion.prototype.GetTypeMark = function () {
        return "XTweenerRotaion";
    };
    return XTweenerRotaion;
}(XTweener_1.default));
exports.default = XTweenerRotaion;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFhUd2VlblxcWFR3ZWVuZXJSb3RhaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDRDQUF1QztBQUN2QyxnREFBbUQ7QUFHbkQ7SUFBNkMsbUNBQVE7SUFBckQ7O0lBa0RBLENBQUM7SUE3Q1UsOEJBQUksR0FBWCxVQUNJLE1BQWMsRUFDZCxVQUFpQixFQUNqQixRQUFlLEVBQ2YsUUFBZSxFQUNmLFNBQWdCLEVBQ2hCLFFBQWdCLEVBQ2hCLElBQXlCO1FBQXpCLHFCQUFBLEVBQUEsT0FBSywyQkFBYyxDQUFDLEtBQUs7UUFHekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6Qix3QkFBd0I7UUFDeEIsNEJBQTRCO1FBQzVCLGdDQUFnQztRQUNoQyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVNLGdDQUFNLEdBQWIsVUFBYyxTQUFTO1FBRW5CLGlCQUFNLE1BQU0sWUFBQyxTQUFTLENBQUMsQ0FBQztRQUN4QixJQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxFQUMxQjtZQUNJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNuQixPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1FBRXBHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRU0sZ0NBQU0sR0FBYjtRQUVJLElBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQzFCO1lBQ0ksSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztTQUMxQztJQUNMLENBQUM7SUFFTSxxQ0FBVyxHQUFsQjtRQUVJLE9BQU8saUJBQWlCLENBQUM7SUFDN0IsQ0FBQztJQUNMLHNCQUFDO0FBQUQsQ0FsREEsQUFrREMsQ0FsRDRDLGtCQUFRLEdBa0RwRCIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBYVHdlZW5lciBmcm9tIFwiLi9CYXNlL1hUd2VlbmVyXCI7XG5pbXBvcnQgeyBYVHdlZW5DdXJ2VHlwZSB9IGZyb20gXCIuL0Jhc2UvWFR3ZWVuQ3VydlwiO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhUd2VlbmVyUm90YWlvbiBleHRlbmRzIFhUd2VlbmVyIFxue1xuICAgIHByaXZhdGUgc3RhcnRWYWx1ZTpudW1iZXI7XG4gICAgcHJpdmF0ZSBlbmRWYWx1ZTpudW1iZXI7XG5cbiAgICBwdWJsaWMgSW5pdChcbiAgICAgICAgdGFyZ2V0OmNjLk5vZGUsXG4gICAgICAgIHN0YXJ0VmFsdWU6bnVtYmVyLFxuICAgICAgICBlbmRWYWx1ZTpudW1iZXIsXG4gICAgICAgIGR1cmF0aW9uOm51bWJlcixcbiAgICAgICAgcGxheVRpbWVzOm51bWJlcixcbiAgICAgICAgcGluZ1Bvbmc6Ym9vbGVhbixcbiAgICAgICAgY3Vydj1YVHdlZW5DdXJ2VHlwZS5MaW5lcixcbiAgICApXG4gICAge1xuICAgICAgICB0aGlzLlNldFRhcmdldCh0YXJnZXQpO1xuICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlO1xuICAgICAgICB0aGlzLmVuZFZhbHVlID0gZW5kVmFsdWU7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgLy8gdGhpcy5jdXJ2VHlwZSA9IGN1cnY7XG4gICAgICAgIC8vIHRoaXMucGluZ1BvbmcgPSBwaW5nUG9uZztcbiAgICAgICAgLy8gdGhpcy5yZXBlYXRUaW1lcyA9IHBsYXlUaW1lcztcbiAgICAgICAgdGhpcy5Jbml0VHdlZW5lckRhdGEocGxheVRpbWVzLHBpbmdQb25nLGN1cnYpO1xuICAgIH1cblxuICAgIHB1YmxpYyBVcGRhdGUoZGVsdGFUaW1lKVxuICAgIHtcbiAgICAgICAgc3VwZXIuVXBkYXRlKGRlbHRhVGltZSk7XG4gICAgICAgIGlmKHRoaXMuYmVSZXBsYWNlZCA9PSB0cnVlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLkNoZWNrRmluaXNoKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50YXJnZXQucm90YXRpb24gPSB0aGlzLnN0YXJ0VmFsdWUgKyAodGhpcy5lbmRWYWx1ZSAtIHRoaXMuc3RhcnRWYWx1ZSkgKiB0aGlzLmFuaW1hdGlvblByb2dyZXNzO1xuXG4gICAgICAgIHRoaXMuQ2hlY2tGaW5pc2goKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgT25QbGF5KClcbiAgICB7XG4gICAgICAgIGlmKHRoaXMuc3RhcnRWYWx1ZSA9PSBudWxsKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSB0aGlzLnRhcmdldC5yb3RhdGlvbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBHZXRUeXBlTWFyaygpXG4gICAge1xuICAgICAgICByZXR1cm4gXCJYVHdlZW5lclJvdGFpb25cIjtcbiAgICB9XG59XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/XTweenerValueArray.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'fe620vFcAJFqprwIMpMEibK', 'XTweenerValueArray');
// Scripts/Tools/XTween/XTweenerValueArray.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var XTweener_1 = require("./Base/XTweener");
var XTweenCurv_1 = require("./Base/XTweenCurv");
var XTweenerValueArray = /** @class */ (function (_super) {
    __extends(XTweenerValueArray, _super);
    function XTweenerValueArray() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    XTweenerValueArray.prototype.Init = function (target, vauleChangeCallback, startValue, endValue, duration, playTimes, pingPong, curv) {
        if (curv === void 0) { curv = XTweenCurv_1.XTweenCurvType.Liner; }
        this.SetTarget(target);
        this.vauleChangeCallback = vauleChangeCallback;
        this.startValue = startValue;
        this.endValue = endValue;
        this.duration = duration;
        // this.curvType = curv;
        // this.pingPong = pingPong;
        // this.repeatTimes = playTimes;
        this.InitTweenerData(playTimes, pingPong, curv);
        this.tmpValue = [this.endValue.length];
    };
    XTweenerValueArray.prototype.Update = function (deltaTime) {
        _super.prototype.Update.call(this, deltaTime);
        if (this.beReplaced == true) {
            this.CheckFinish();
            return;
        }
        for (var i = 0; i < this.endValue.length; i++) {
            this.tmpValue[i] = this.startValue[i] + (this.endValue[i] - this.startValue[i]) * this.animationProgress;
        }
        if (this.vauleChangeCallback != null) {
            this.vauleChangeCallback(this.tmpValue);
        }
        this.CheckFinish();
    };
    XTweenerValueArray.prototype.OnPlay = function () {
        if (this.startValue == null) {
            this.startValue = [this.endValue.length];
        }
    };
    XTweenerValueArray.prototype.GetTypeMark = function () {
        return "XTweenerValue";
    };
    return XTweenerValueArray;
}(XTweener_1.default));
exports.default = XTweenerValueArray;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFhUd2VlblxcWFR3ZWVuZXJWYWx1ZUFycmF5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDRDQUF1QztBQUN2QyxnREFBbUQ7QUFFbkQ7SUFBZ0Qsc0NBQVE7SUFBeEQ7O0lBbUVBLENBQUM7SUExRFUsaUNBQUksR0FBWCxVQUNJLE1BQWMsRUFDZCxtQkFBK0MsRUFDL0MsVUFBd0IsRUFDeEIsUUFBc0IsRUFDdEIsUUFBZSxFQUNmLFNBQWdCLEVBQ2hCLFFBQWdCLEVBQ2hCLElBQXlCO1FBQXpCLHFCQUFBLEVBQUEsT0FBSywyQkFBYyxDQUFDLEtBQUs7UUFHekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsbUJBQW1CLEdBQUcsbUJBQW1CLENBQUM7UUFDL0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsd0JBQXdCO1FBQ3hCLDRCQUE0QjtRQUM1QixnQ0FBZ0M7UUFDaEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUMsUUFBUSxFQUFDLElBQUksQ0FBQyxDQUFDO1FBRTlDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTNDLENBQUM7SUFFTSxtQ0FBTSxHQUFiLFVBQWMsU0FBUztRQUVuQixpQkFBTSxNQUFNLFlBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEIsSUFBRyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksRUFDMUI7WUFDSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbkIsT0FBTztTQUNWO1FBQ0QsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUN0QztZQUNJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztTQUM1RztRQUVELElBQUcsSUFBSSxDQUFDLG1CQUFtQixJQUFJLElBQUksRUFDbkM7WUFDSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzNDO1FBRUQsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFTSxtQ0FBTSxHQUFiO1FBRUksSUFBRyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksRUFDMUI7WUFDSSxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM1QztJQUNMLENBQUM7SUFFTSx3Q0FBVyxHQUFsQjtRQUVJLE9BQU8sZUFBZSxDQUFDO0lBQzNCLENBQUM7SUFDTCx5QkFBQztBQUFELENBbkVBLEFBbUVDLENBbkUrQyxrQkFBUSxHQW1FdkQiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgWFR3ZWVuZXIgZnJvbSBcIi4vQmFzZS9YVHdlZW5lclwiO1xuaW1wb3J0IHsgWFR3ZWVuQ3VydlR5cGUgfSBmcm9tIFwiLi9CYXNlL1hUd2VlbkN1cnZcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWFR3ZWVuZXJWYWx1ZUFycmF5IGV4dGVuZHMgWFR3ZWVuZXIgXG57XG4gICAgcHJpdmF0ZSBzdGFydFZhbHVlOkFycmF5PG51bWJlcj47XG4gICAgcHJpdmF0ZSBlbmRWYWx1ZTpBcnJheTxudW1iZXI+O1xuXG4gICAgcHJpdmF0ZSB0bXBWYWx1ZTpBcnJheTxudW1iZXI+O1xuXG4gICAgcHJpdmF0ZSB2YXVsZUNoYW5nZUNhbGxiYWNrOih2YWx1ZTpBcnJheTxudW1iZXI+KT0+dm9pZDtcblxuICAgIHB1YmxpYyBJbml0KFxuICAgICAgICB0YXJnZXQ6Y2MuTm9kZSxcbiAgICAgICAgdmF1bGVDaGFuZ2VDYWxsYmFjazoodmFsdWU6QXJyYXk8bnVtYmVyPik9PnZvaWQsXG4gICAgICAgIHN0YXJ0VmFsdWU6QXJyYXk8bnVtYmVyPixcbiAgICAgICAgZW5kVmFsdWU6QXJyYXk8bnVtYmVyPixcbiAgICAgICAgZHVyYXRpb246bnVtYmVyLFxuICAgICAgICBwbGF5VGltZXM6bnVtYmVyLFxuICAgICAgICBwaW5nUG9uZzpib29sZWFuLFxuICAgICAgICBjdXJ2PVhUd2VlbkN1cnZUeXBlLkxpbmVyLFxuICAgIClcbiAgICB7XG4gICAgICAgIHRoaXMuU2V0VGFyZ2V0KHRhcmdldCk7XG4gICAgICAgIHRoaXMudmF1bGVDaGFuZ2VDYWxsYmFjayA9IHZhdWxlQ2hhbmdlQ2FsbGJhY2s7XG4gICAgICAgIHRoaXMuc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWU7XG4gICAgICAgIHRoaXMuZW5kVmFsdWUgPSBlbmRWYWx1ZTtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICAvLyB0aGlzLmN1cnZUeXBlID0gY3VydjtcbiAgICAgICAgLy8gdGhpcy5waW5nUG9uZyA9IHBpbmdQb25nO1xuICAgICAgICAvLyB0aGlzLnJlcGVhdFRpbWVzID0gcGxheVRpbWVzO1xuICAgICAgICB0aGlzLkluaXRUd2VlbmVyRGF0YShwbGF5VGltZXMscGluZ1BvbmcsY3Vydik7XG5cbiAgICAgICAgdGhpcy50bXBWYWx1ZSA9IFt0aGlzLmVuZFZhbHVlLmxlbmd0aF07XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgVXBkYXRlKGRlbHRhVGltZSlcbiAgICB7XG4gICAgICAgIHN1cGVyLlVwZGF0ZShkZWx0YVRpbWUpO1xuICAgICAgICBpZih0aGlzLmJlUmVwbGFjZWQgPT0gdHJ1ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5DaGVja0ZpbmlzaCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvcihsZXQgaT0wO2k8dGhpcy5lbmRWYWx1ZS5sZW5ndGg7aSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnRtcFZhbHVlW2ldID0gdGhpcy5zdGFydFZhbHVlW2ldICsgKHRoaXMuZW5kVmFsdWVbaV0gLSB0aGlzLnN0YXJ0VmFsdWVbaV0pICogdGhpcy5hbmltYXRpb25Qcm9ncmVzcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHRoaXMudmF1bGVDaGFuZ2VDYWxsYmFjayAhPSBudWxsKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnZhdWxlQ2hhbmdlQ2FsbGJhY2sodGhpcy50bXBWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLkNoZWNrRmluaXNoKCk7XG4gICAgfVxuXG4gICAgcHVibGljIE9uUGxheSgpXG4gICAge1xuICAgICAgICBpZih0aGlzLnN0YXJ0VmFsdWUgPT0gbnVsbClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zdGFydFZhbHVlID0gW3RoaXMuZW5kVmFsdWUubGVuZ3RoXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBHZXRUeXBlTWFyaygpXG4gICAge1xuICAgICAgICByZXR1cm4gXCJYVHdlZW5lclZhbHVlXCI7XG4gICAgfVxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/Bezier.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '9872c45xCNB7a0ZfC9gQ8F5', 'Bezier');
// Scripts/Tools/Bezier.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Bezier = /** @class */ (function (_super) {
    __extends(Bezier, _super);
    function Bezier() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Bezier.prototype.start = function () {
    };
    Bezier.prototype.update = function (dt) {
        if (!this.hasInitData) {
            return;
        }
        if (this.timer <= 1) {
            var finalPos = new cc.Vec2(this.startPos.x * (1 - this.timer) * (1 - this.timer) + this.centerPos.x * 2 * this.timer * (1 - this.timer) + this.tarPos.x * this.timer * this.timer, this.startPos.y * (1 - this.timer) * (1 - this.timer) + this.centerPos.y * 2 * this.timer * (1 - this.timer) + this.tarPos.y * this.timer * this.timer);
            this.node.position = finalPos;
            this.timer = this.timer + dt * this.timeScale;
        }
        else {
            this.node.position = this.tarPos;
            this.hasInitData = false;
            if (this.finishCallback != null) {
                this.finishCallback(this.finishCallbackParm, this.node);
            }
        }
    };
    Bezier.prototype.SetMoveTrail = function (startPosX, startPosY, centerPosX, centerPosY, tarPosX, tarPosY, timeScale, finishCallbackParm, finishCallback) {
        this.timeScale = timeScale;
        this.tarPos = new cc.Vec2(tarPosX, tarPosY);
        this.centerPos = new cc.Vec2(centerPosX, centerPosY);
        this.startPos = new cc.Vec2(startPosX, startPosY);
        this.finishCallback = finishCallback;
        this.finishCallbackParm = finishCallbackParm;
        this.hasInitData = true;
        this.node.position = this.startPos;
        this.timer = 0;
    };
    Bezier = __decorate([
        ccclass
    ], Bezier);
    return Bezier;
}(cc.Component));
exports.default = Bezier;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXEJlemllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBTSxJQUFBLGtCQUFtQyxFQUFsQyxvQkFBTyxFQUFFLHNCQUF5QixDQUFDO0FBRzFDO0lBQW9DLDBCQUFZO0lBQWhEOztJQXdEQSxDQUFDO0lBM0NhLHNCQUFLLEdBQWY7SUFDQSxDQUFDO0lBR1MsdUJBQU0sR0FBaEIsVUFBaUIsRUFBVTtRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNuQixPQUFNO1NBQ1Q7UUFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxFQUFFO1lBQ2pCLElBQUksUUFBUSxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksQ0FDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxFQUV0SixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUMzSixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7WUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFBO1NBQ2hEO2FBQU07WUFDSCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO1lBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFBO1lBQ3hCLElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTthQUMxRDtTQUNKO0lBQ0wsQ0FBQztJQUVNLDZCQUFZLEdBQW5CLFVBQW9CLFNBQWlCLEVBQUUsU0FBaUIsRUFBRSxVQUFrQixFQUFFLFVBQWtCLEVBQUUsT0FBZSxFQUFFLE9BQWUsRUFBRSxTQUFpQixFQUFFLGtCQUF1QixFQUFFLGNBQW1EO1FBRS9OLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO1FBQzFCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUMzQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUE7UUFFcEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFBO1FBQ2pELElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFBO1FBQ3BDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQTtRQUU1QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQTtRQUV2QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFBO1FBRWxDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFBO0lBR2xCLENBQUM7SUF0RGdCLE1BQU07UUFEMUIsT0FBTztPQUNhLE1BQU0sQ0F3RDFCO0lBQUQsYUFBQztDQXhERCxBQXdEQyxDQXhEbUMsRUFBRSxDQUFDLFNBQVMsR0F3RC9DO2tCQXhEb0IsTUFBTSIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtjY2NsYXNzLCBwcm9wZXJ0eX0gPSBjYy5fZGVjb3JhdG9yO1xuXG5AY2NjbGFzc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmV6aWVyIGV4dGVuZHMgY2MuQ29tcG9uZW50IHtcblxuXG4gICAgcHJpdmF0ZSB0aW1lU2NhbGU6IG51bWJlclxuICAgIHByaXZhdGUgdGFyUG9zOiBjYy5WZWMyXG4gICAgcHJpdmF0ZSBjZW50ZXJQb3M6IGNjLlZlYzJcbiAgICBwcml2YXRlIHN0YXJ0UG9zOiBjYy5WZWMyXG4gICAgcHJpdmF0ZSBmaW5pc2hDYWxsYmFja1xuICAgIHByaXZhdGUgZmluaXNoQ2FsbGJhY2tQYXJtXG4gICAgcHJpdmF0ZSBoYXNJbml0RGF0YVxuICAgIHByaXZhdGUgdGltZXJcblxuXG4gICAgcHJvdGVjdGVkIHN0YXJ0KCk6IHZvaWQge1xuICAgIH1cblxuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZShkdDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5oYXNJbml0RGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudGltZXIgPD0gMSkge1xuICAgICAgICAgICAgbGV0IGZpbmFsUG9zID0gbmV3IGNjLlZlYzIoXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydFBvcy54ICogKDEgLSB0aGlzLnRpbWVyKSAqICgxIC0gdGhpcy50aW1lcikgKyB0aGlzLmNlbnRlclBvcy54ICogMiAqIHRoaXMudGltZXIgKiAoMSAtIHRoaXMudGltZXIpICsgdGhpcy50YXJQb3MueCAqIHRoaXMudGltZXIgKiB0aGlzLnRpbWVyXG4gICAgICAgICAgICAgICAgLFxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRQb3MueSAqICgxIC0gdGhpcy50aW1lcikgKiAoMSAtIHRoaXMudGltZXIpICsgdGhpcy5jZW50ZXJQb3MueSAqIDIgKiB0aGlzLnRpbWVyICogKDEgLSB0aGlzLnRpbWVyKSArIHRoaXMudGFyUG9zLnkgKiB0aGlzLnRpbWVyICogdGhpcy50aW1lcilcbiAgICAgICAgICAgIHRoaXMubm9kZS5wb3NpdGlvbiA9IGZpbmFsUG9zXG4gICAgICAgICAgICB0aGlzLnRpbWVyID0gdGhpcy50aW1lciArIGR0ICogdGhpcy50aW1lU2NhbGVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5wb3NpdGlvbiA9IHRoaXMudGFyUG9zXG4gICAgICAgICAgICB0aGlzLmhhc0luaXREYXRhID0gZmFsc2VcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbmlzaENhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmlzaENhbGxiYWNrKHRoaXMuZmluaXNoQ2FsbGJhY2tQYXJtLCB0aGlzLm5vZGUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgU2V0TW92ZVRyYWlsKHN0YXJ0UG9zWDogbnVtYmVyLCBzdGFydFBvc1k6IG51bWJlciwgY2VudGVyUG9zWDogbnVtYmVyLCBjZW50ZXJQb3NZOiBudW1iZXIsIHRhclBvc1g6IG51bWJlciwgdGFyUG9zWTogbnVtYmVyLCB0aW1lU2NhbGU6IG51bWJlciwgZmluaXNoQ2FsbGJhY2tQYXJtOiBhbnksIGZpbmlzaENhbGxiYWNrOiAocGFybTogYW55LCB0cmFuczogY2MuTm9kZSkgPT4gdm9pZCkge1xuXG4gICAgICAgIHRoaXMudGltZVNjYWxlID0gdGltZVNjYWxlXG4gICAgICAgIHRoaXMudGFyUG9zID0gbmV3IGNjLlZlYzIodGFyUG9zWCwgdGFyUG9zWSlcbiAgICAgICAgdGhpcy5jZW50ZXJQb3MgPSBuZXcgY2MuVmVjMihjZW50ZXJQb3NYLCBjZW50ZXJQb3NZKVxuXG4gICAgICAgIHRoaXMuc3RhcnRQb3MgPSBuZXcgY2MuVmVjMihzdGFydFBvc1gsIHN0YXJ0UG9zWSlcbiAgICAgICAgdGhpcy5maW5pc2hDYWxsYmFjayA9IGZpbmlzaENhbGxiYWNrXG4gICAgICAgIHRoaXMuZmluaXNoQ2FsbGJhY2tQYXJtID0gZmluaXNoQ2FsbGJhY2tQYXJtXG5cbiAgICAgICAgdGhpcy5oYXNJbml0RGF0YSA9IHRydWVcblxuICAgICAgICB0aGlzLm5vZGUucG9zaXRpb24gPSB0aGlzLnN0YXJ0UG9zXG5cbiAgICAgICAgdGhpcy50aW1lciA9IDBcblxuXG4gICAgfVxuXG59Il19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/ccC.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '43098JIL15CQqGtJVPyCtb3', 'ccC');
// Scripts/Tools/ccC.ts

"use strict";
// import Global from "../Global/Global";
Object.defineProperty(exports, "__esModule", { value: true });
var ccC = /** @class */ (function () {
    function ccC() {
    }
    ccC.loadRes = function (url, type, completeCallback) {
        var _this = this;
        var asset = this.dicAssets[url];
        if (asset != null && asset != undefined) {
            completeCallback(null, asset);
            return;
        }
        cc.loader.loadRes(url, type, function (err, res) {
            if (err != null) {
                _this.dicAssets[url] = res;
            }
            completeCallback(err, res);
        });
    };
    ccC.load = function (url, completeCallback) {
        var _this = this;
        var asset = this.dicAssets[url];
        if (asset != null && asset != undefined) {
            completeCallback(null, asset);
            return;
        }
        cc.loader.load(url, function (err, tex) {
            if (err != null) {
                _this.dicAssets[url] = tex;
            }
            completeCallback(err, tex);
        });
    };
    ccC.loadResDir = function (url, type, completeCallback) {
        var _this = this;
        var asset = this.dicAssetArrs[url];
        if (asset != null && asset != undefined) {
            completeCallback(null, asset, this.dicUrlArrs[url]);
            return;
        }
        cc.loader.loadResDir(url, type, function (err, res, urls) {
            if (err != null) {
                _this.dicAssets[url] = res;
                _this.dicUrlArrs[url] = urls;
            }
            completeCallback(err, res, urls);
        });
    };
    ccC.loadResProgressWithoutType = function (url, progressCallback, completeCallback) {
        var asset = this.dicAssets[url];
        if (asset != null && asset != undefined) {
            progressCallback(1, 1, null);
            completeCallback(null, asset);
            return;
        }
        cc.loader.loadRes(url, function (completedCount, totalCount, item) {
            progressCallback(completedCount, totalCount, item);
        }, function (err, perfab) {
            completeCallback(err, perfab);
        });
    };
    ccC.loadResProgress = function (url, type, progressCallback, completeCallback) {
        cc.loader.loadRes(url, type, function (completedCount, totalCount, item) {
            progressCallback(completedCount, totalCount, item);
        }, function (err, perfab) {
            completeCallback(err, perfab);
        });
    };
    // public static log(msg: string|any, ...subst: any[]): void
    // {
    //     if(Global.showLog == true)
    //     {
    //         cc.log(msg,...subst);
    //     }
    // }
    // public static error(msg: any, ...subst: any[]): void
    // {
    //     if(Global.showLog == true)
    //     {
    //         cc.error(msg,...subst);
    //     }
    // }
    // public static warn(msg: any, ...subst: any[]): void
    // {
    //     if(Global.showLog == true)
    //     {
    //         cc.warn(msg,...subst);
    //     }
    // }
    ccC.dicAssets = {};
    ccC.dicAssetArrs = {};
    ccC.dicUrlArrs = {};
    return ccC;
}());
exports.default = ccC;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/Dialog.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '98660XUUQ1KZZVHK5s38O+J', 'Dialog');
// Scripts/Tools/Dialog.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MessageCenter_1 = require("../MVCFramework/MessageCenter");
var MessageNames_1 = require("../Modules/MessageNames");
var Global_1 = require("../Global/Global");
var DialogData = /** @class */ (function () {
    function DialogData() {
        this.showYes = true;
        this.showNo = true;
        this.title = "";
        this.content = "";
        this.yesText = "确定";
        this.noText = "取消";
    }
    return DialogData;
}());
exports.DialogData = DialogData;
var Dialog = /** @class */ (function () {
    function Dialog() {
    }
    Dialog.ShowOnlyYes = function (content, yesCallback) {
        if (Global_1.default.showLog == true)
            cc.error("Dialog ShowOnlyYes " + content);
        var data = new DialogData();
        data.showNo = false;
        data.content = content;
        data.yesCallback = yesCallback;
        MessageCenter_1.default.SendMessage(MessageNames_1.default.ShowDialog, data);
    };
    Dialog.ShowWithYesNo = function (content, yesCallBack, noCallback) {
        var data = new DialogData();
        data.showNo = true;
        data.content = content;
        data.yesCallback = yesCallBack;
        data.noCallback = noCallback;
        if (Global_1.default.showLog == true)
            cc.error("Dialog ShowWithYesNo " + content);
        MessageCenter_1.default.SendMessage(MessageNames_1.default.ShowDialog, data);
    };
    Dialog.ShowWithYesNoContent = function (dialogType, title, content, yesText, noText, yesCallback, noCallback) {
        var data = new DialogData();
        data.title = title;
        data.showNo = true;
        data.content = content;
        data.yesText = yesText;
        data.noText = noText;
        data.yesCallback = yesCallback;
        data.noCallback = noCallback;
        if (Global_1.default.showLog == true)
            cc.error("Dialog ShowWithYesNoContent " + content);
        MessageCenter_1.default.SendMessage(MessageNames_1.default.ShowDialog, data);
    };
    Dialog.ShowJustYesButton = function (dialogType, title, content, yesText, yesCallback) {
        var data = new DialogData();
        data.title = title;
        data.showNo = false;
        data.content = content;
        data.yesText = yesText;
        data.yesCallback = yesCallback;
        Global_1.default;
        if (Global_1.default.showLog == true)
            cc.error("Dialog ShowJustYesButton " + content);
        MessageCenter_1.default.SendMessage(MessageNames_1.default.ShowDialog, data);
    };
    Dialog.ShowYesNoItemButton = function (dialogType, title, content, yesText, noText, item, yesCallback, noCallback) {
        var data = new DialogData();
        data.title = title;
        data.showNo = false;
        data.content = content;
        data.yesText = yesText;
        data.noText = noText;
        data.yesCallback = yesCallback;
        data.noCallback = noCallback;
        if (Global_1.default.showLog == true)
            cc.error("Dialog ShowYesNoItemButton " + content);
        MessageCenter_1.default.SendMessage(MessageNames_1.default.ShowDialog, data);
    };
    Dialog.ShowNoItemButton = function (dialogType, title, content, yesText, itemList, yesCallback) {
        var data = new DialogData();
        data.title = title;
        data.showNo = false;
        data.content = content;
        data.yesText = yesText;
        data.yesCallback = yesCallback;
        if (Global_1.default.showLog == true)
            cc.error("Dialog ShowNoItemButton " + content);
        MessageCenter_1.default.SendMessage(MessageNames_1.default.ShowDialog, data);
    };
    Dialog.ShowYesCloseButton = function (dialogType, title, content, yesText, yesCallback) {
        var data = new DialogData();
        data.title = title;
        data.showNo = false;
        data.content = content;
        data.yesText = yesText;
        data.yesCallback = yesCallback;
        if (Global_1.default.showLog == true)
            cc.error("Dialog ShowYesCloseButton " + content);
        MessageCenter_1.default.SendMessage(MessageNames_1.default.ShowDialog, data);
    };
    return Dialog;
}());
exports.default = Dialog;
var DialogType = /** @class */ (function () {
    function DialogType() {
    }
    DialogType.Normal = 1;
    return DialogType;
}());
exports.DialogType = DialogType;
var DialogStatus = /** @class */ (function () {
    function DialogStatus() {
    }
    DialogStatus.Title = "Title";
    DialogStatus.Content = "Content";
    DialogStatus.Yes = "Yes";
    DialogStatus.No = "No";
    DialogStatus.Close = "Close";
    DialogStatus.Item = "Item";
    return DialogStatus;
}());
exports.DialogStatus = DialogStatus;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/XTweenerColor.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '2212eN9ALRHabcQegE2uXN4', 'XTweenerColor');
// Scripts/Tools/XTween/XTweenerColor.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var XTweener_1 = require("./Base/XTweener");
var XTweenCurv_1 = require("./Base/XTweenCurv");
var XTweenerColor = /** @class */ (function (_super) {
    __extends(XTweenerColor, _super);
    function XTweenerColor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.colorTmp = new cc.Color();
        return _this;
    }
    XTweenerColor.prototype.Init = function (target, startValue, endValue, duration, playTimes, pingPong, curv) {
        if (curv === void 0) { curv = XTweenCurv_1.XTweenCurvType.Liner; }
        this.SetTarget(target);
        this.startValue = startValue;
        this.endValue = endValue;
        this.duration = duration;
        // this.curvType = curv;
        // this.pingPong = pingPong;
        // this.repeatTimes = playTimes;
        this.InitTweenerData(playTimes, pingPong, curv);
    };
    XTweenerColor.prototype.Update = function (deltaTime) {
        _super.prototype.Update.call(this, deltaTime);
        if (this.beReplaced == true) {
            this.CheckFinish();
            return;
        }
        this.colorTmp.setR(this.startValue[0] + (this.endValue[0] - this.startValue[0]) * this.animationProgress);
        this.colorTmp.setG(this.startValue[1] + (this.endValue[1] - this.startValue[1]) * this.animationProgress);
        this.colorTmp.setB(this.startValue[2] + (this.endValue[2] - this.startValue[2]) * this.animationProgress);
        this.colorTmp.setA(this.startValue[3] + (this.endValue[3] - this.startValue[3]) * this.animationProgress);
        this.target.color = this.colorTmp;
        this.CheckFinish();
    };
    XTweenerColor.prototype.OnPlay = function () {
        if (this.startValue == null) {
            this.startValue = [255, 255, 255, 255];
        }
    };
    XTweenerColor.prototype.GetTypeMark = function () {
        return "XTweenerColor";
    };
    return XTweenerColor;
}(XTweener_1.default));
exports.default = XTweenerColor;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFhUd2VlblxcWFR3ZWVuZXJDb2xvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0Q0FBdUM7QUFDdkMsZ0RBQW1EO0FBR25EO0lBQTJDLGlDQUFRO0lBQW5EO1FBQUEscUVBd0RDO1FBbkRXLGNBQVEsR0FBWSxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7SUFtRC9DLENBQUM7SUFqRFUsNEJBQUksR0FBWCxVQUNJLE1BQWMsRUFDZCxVQUF3QixFQUN4QixRQUFzQixFQUN0QixRQUFlLEVBQ2YsU0FBZ0IsRUFDaEIsUUFBZ0IsRUFDaEIsSUFBeUI7UUFBekIscUJBQUEsRUFBQSxPQUFLLDJCQUFjLENBQUMsS0FBSztRQUd6QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLHdCQUF3QjtRQUN4Qiw0QkFBNEI7UUFDNUIsZ0NBQWdDO1FBQ2hDLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFDLFFBQVEsRUFBQyxJQUFJLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRU0sOEJBQU0sR0FBYixVQUFjLFNBQVM7UUFFbkIsaUJBQU0sTUFBTSxZQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hCLElBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQzFCO1lBQ0ksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ25CLE9BQU87U0FDVjtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMxRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDMUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUUxRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRU0sOEJBQU0sR0FBYjtRQUVJLElBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQzFCO1lBQ0ksSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0wsQ0FBQztJQUVNLG1DQUFXLEdBQWxCO1FBRUksT0FBTyxlQUFlLENBQUM7SUFDM0IsQ0FBQztJQUNMLG9CQUFDO0FBQUQsQ0F4REEsQUF3REMsQ0F4RDBDLGtCQUFRLEdBd0RsRCIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBYVHdlZW5lciBmcm9tIFwiLi9CYXNlL1hUd2VlbmVyXCI7XG5pbXBvcnQgeyBYVHdlZW5DdXJ2VHlwZSB9IGZyb20gXCIuL0Jhc2UvWFR3ZWVuQ3VydlwiO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhUd2VlbmVyQ29sb3IgZXh0ZW5kcyBYVHdlZW5lciBcbntcbiAgICBwcml2YXRlIHN0YXJ0VmFsdWU6QXJyYXk8bnVtYmVyPjtcbiAgICBwcml2YXRlIGVuZFZhbHVlOkFycmF5PG51bWJlcj47XG5cbiAgICBwcml2YXRlIGNvbG9yVG1wOmNjLkNvbG9yID0gbmV3IGNjLkNvbG9yKCk7XG5cbiAgICBwdWJsaWMgSW5pdChcbiAgICAgICAgdGFyZ2V0OmNjLk5vZGUsXG4gICAgICAgIHN0YXJ0VmFsdWU6QXJyYXk8bnVtYmVyPixcbiAgICAgICAgZW5kVmFsdWU6QXJyYXk8bnVtYmVyPixcbiAgICAgICAgZHVyYXRpb246bnVtYmVyLFxuICAgICAgICBwbGF5VGltZXM6bnVtYmVyLFxuICAgICAgICBwaW5nUG9uZzpib29sZWFuLFxuICAgICAgICBjdXJ2PVhUd2VlbkN1cnZUeXBlLkxpbmVyLFxuICAgIClcbiAgICB7XG4gICAgICAgIHRoaXMuU2V0VGFyZ2V0KHRhcmdldCk7XG4gICAgICAgIHRoaXMuc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWU7XG4gICAgICAgIHRoaXMuZW5kVmFsdWUgPSBlbmRWYWx1ZTtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICAvLyB0aGlzLmN1cnZUeXBlID0gY3VydjtcbiAgICAgICAgLy8gdGhpcy5waW5nUG9uZyA9IHBpbmdQb25nO1xuICAgICAgICAvLyB0aGlzLnJlcGVhdFRpbWVzID0gcGxheVRpbWVzO1xuICAgICAgICB0aGlzLkluaXRUd2VlbmVyRGF0YShwbGF5VGltZXMscGluZ1BvbmcsY3Vydik7XG4gICAgfVxuXG4gICAgcHVibGljIFVwZGF0ZShkZWx0YVRpbWUpXG4gICAge1xuICAgICAgICBzdXBlci5VcGRhdGUoZGVsdGFUaW1lKTtcbiAgICAgICAgaWYodGhpcy5iZVJlcGxhY2VkID09IHRydWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuQ2hlY2tGaW5pc2goKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbG9yVG1wLnNldFIodGhpcy5zdGFydFZhbHVlWzBdICsgKHRoaXMuZW5kVmFsdWVbMF0gLSB0aGlzLnN0YXJ0VmFsdWVbMF0pICogdGhpcy5hbmltYXRpb25Qcm9ncmVzcyk7XG4gICAgICAgIHRoaXMuY29sb3JUbXAuc2V0Ryh0aGlzLnN0YXJ0VmFsdWVbMV0gKyAodGhpcy5lbmRWYWx1ZVsxXSAtIHRoaXMuc3RhcnRWYWx1ZVsxXSkgKiB0aGlzLmFuaW1hdGlvblByb2dyZXNzKTtcbiAgICAgICAgdGhpcy5jb2xvclRtcC5zZXRCKHRoaXMuc3RhcnRWYWx1ZVsyXSArICh0aGlzLmVuZFZhbHVlWzJdIC0gdGhpcy5zdGFydFZhbHVlWzJdKSAqIHRoaXMuYW5pbWF0aW9uUHJvZ3Jlc3MpO1xuICAgICAgICB0aGlzLmNvbG9yVG1wLnNldEEodGhpcy5zdGFydFZhbHVlWzNdICsgKHRoaXMuZW5kVmFsdWVbM10gLSB0aGlzLnN0YXJ0VmFsdWVbM10pICogdGhpcy5hbmltYXRpb25Qcm9ncmVzcyk7XG5cbiAgICAgICAgdGhpcy50YXJnZXQuY29sb3IgPSB0aGlzLmNvbG9yVG1wO1xuICAgICAgICB0aGlzLkNoZWNrRmluaXNoKCk7XG4gICAgfVxuXG4gICAgcHVibGljIE9uUGxheSgpXG4gICAge1xuICAgICAgICBpZih0aGlzLnN0YXJ0VmFsdWUgPT0gbnVsbClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zdGFydFZhbHVlID0gWzI1NSwyNTUsMjU1LDI1NV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgR2V0VHlwZU1hcmsoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIFwiWFR3ZWVuZXJDb2xvclwiO1xuICAgIH1cbn1cbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/XTweenerWorldPosition.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '31697jcyR1P2YOh+P/7x5R2', 'XTweenerWorldPosition');
// Scripts/Tools/XTween/XTweenerWorldPosition.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var XTweener_1 = require("./Base/XTweener");
var XTweenCurv_1 = require("./Base/XTweenCurv");
var XTweenerWorldPosition = /** @class */ (function (_super) {
    __extends(XTweenerWorldPosition, _super);
    function XTweenerWorldPosition() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.vec2Tmp = cc.Vec2.ZERO;
        return _this;
    }
    XTweenerWorldPosition.prototype.Init = function (target, endPos, offset, duration, playTimes, pingPong, curv) {
        if (curv === void 0) { curv = XTweenCurv_1.XTweenCurvType.Liner; }
        this.SetTarget(target);
        if (endPos instanceof cc.Vec2) {
            this.endPos = endPos;
        }
        else {
            this.endPos = endPos.convertToWorldSpaceAR(cc.Vec2.ZERO);
        }
        this.endPos.x += offset.x;
        this.endPos.y += offset.y;
        this.startPos = target.convertToWorldSpaceAR(cc.Vec2.ZERO);
        this.duration = duration;
        this.InitTweenerData(playTimes, pingPong, curv);
    };
    XTweenerWorldPosition.prototype.Update = function (deltaTime) {
        _super.prototype.Update.call(this, deltaTime);
        if (this.beReplaced == true) {
            this.CheckFinish();
            return;
        }
        this.vec2Tmp.x = this.startPos.x + (this.endPos.x - this.startPos.x) * this.animationProgress;
        this.vec2Tmp.y = this.startPos.y + (this.endPos.y - this.startPos.y) * this.animationProgress;
        var localPos = this.target.parent.convertToNodeSpaceAR(this.vec2Tmp);
        this.target.position = localPos;
        // this.target.position = this.vec2Tmp;
        this.CheckFinish();
    };
    XTweenerWorldPosition.prototype.OnPlay = function () {
        // if(this.startValue == null)
        // {
        //     this.startValue = this.target.position;
        // }
    };
    XTweenerWorldPosition.prototype.GetTypeMark = function () {
        return "XTweenerWorldPosition";
    };
    return XTweenerWorldPosition;
}(XTweener_1.default));
exports.default = XTweenerWorldPosition;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFhUd2VlblxcWFR3ZWVuZXJXb3JsZFBvc2l0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDRDQUF1QztBQUN2QyxnREFBbUQ7QUFHbkQ7SUFBbUQseUNBQVE7SUFBM0Q7UUFBQSxxRUFrRUM7UUE3RFcsYUFBTyxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDOztJQTZEM0MsQ0FBQztJQTNEVSxvQ0FBSSxHQUFYLFVBQ0ksTUFBYyxFQUNkLE1BQXNCLEVBQ3RCLE1BQWMsRUFDZCxRQUFlLEVBQ2YsU0FBZ0IsRUFDaEIsUUFBZ0IsRUFDaEIsSUFBeUI7UUFBekIscUJBQUEsRUFBQSxPQUFLLDJCQUFjLENBQUMsS0FBSztRQUd6QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXZCLElBQUcsTUFBTSxZQUFZLEVBQUUsQ0FBQyxJQUFJLEVBQzVCO1lBQ0ksSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7U0FDeEI7YUFFRDtZQUNJLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUQ7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFFMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUV6QixJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVNLHNDQUFNLEdBQWIsVUFBYyxTQUFTO1FBRW5CLGlCQUFNLE1BQU0sWUFBQyxTQUFTLENBQUMsQ0FBQztRQUN4QixJQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxFQUMxQjtZQUNJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNuQixPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1FBQzlGLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUM7UUFFOUYsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUNoQyx1Q0FBdUM7UUFDdkMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFTSxzQ0FBTSxHQUFiO1FBRUksOEJBQThCO1FBQzlCLElBQUk7UUFDSiw4Q0FBOEM7UUFDOUMsSUFBSTtJQUNSLENBQUM7SUFFTSwyQ0FBVyxHQUFsQjtRQUVJLE9BQU8sdUJBQXVCLENBQUM7SUFDbkMsQ0FBQztJQUNMLDRCQUFDO0FBQUQsQ0FsRUEsQUFrRUMsQ0FsRWtELGtCQUFRLEdBa0UxRCIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBYVHdlZW5lciBmcm9tIFwiLi9CYXNlL1hUd2VlbmVyXCI7XG5pbXBvcnQgeyBYVHdlZW5DdXJ2VHlwZSB9IGZyb20gXCIuL0Jhc2UvWFR3ZWVuQ3VydlwiO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhUd2VlbmVyV29ybGRQb3NpdGlvbiBleHRlbmRzIFhUd2VlbmVyIFxue1xuICAgIC8vIHByaXZhdGUgZW5kUG9zTm9kZTpjYy5Ob2RlO1xuICAgIHByaXZhdGUgZW5kUG9zOmNjLlZlYzI7XG4gICAgcHJpdmF0ZSBzdGFydFBvczpjYy5WZWMyO1xuICAgIHByaXZhdGUgdmVjMlRtcDpjYy5WZWMyID0gY2MuVmVjMi5aRVJPO1xuXG4gICAgcHVibGljIEluaXQoXG4gICAgICAgIHRhcmdldDpjYy5Ob2RlLFxuICAgICAgICBlbmRQb3M6Y2MuTm9kZXxjYy5WZWMyLFxuICAgICAgICBvZmZzZXQ6Y2MuVmVjMixcbiAgICAgICAgZHVyYXRpb246bnVtYmVyLFxuICAgICAgICBwbGF5VGltZXM6bnVtYmVyLFxuICAgICAgICBwaW5nUG9uZzpib29sZWFuLFxuICAgICAgICBjdXJ2PVhUd2VlbkN1cnZUeXBlLkxpbmVyLFxuICAgIClcbiAgICB7XG4gICAgICAgIHRoaXMuU2V0VGFyZ2V0KHRhcmdldCk7XG5cbiAgICAgICAgaWYoZW5kUG9zIGluc3RhbmNlb2YgY2MuVmVjMilcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5lbmRQb3MgPSBlbmRQb3M7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmVuZFBvcyA9IGVuZFBvcy5jb252ZXJ0VG9Xb3JsZFNwYWNlQVIoY2MuVmVjMi5aRVJPKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5lbmRQb3MueCArPSBvZmZzZXQueDtcbiAgICAgICAgdGhpcy5lbmRQb3MueSArPSBvZmZzZXQueTtcblxuICAgICAgICB0aGlzLnN0YXJ0UG9zID0gdGFyZ2V0LmNvbnZlcnRUb1dvcmxkU3BhY2VBUihjYy5WZWMyLlpFUk8pO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG5cbiAgICAgICAgdGhpcy5Jbml0VHdlZW5lckRhdGEocGxheVRpbWVzLHBpbmdQb25nLGN1cnYpO1xuICAgIH1cblxuICAgIHB1YmxpYyBVcGRhdGUoZGVsdGFUaW1lKVxuICAgIHtcbiAgICAgICAgc3VwZXIuVXBkYXRlKGRlbHRhVGltZSk7XG4gICAgICAgIGlmKHRoaXMuYmVSZXBsYWNlZCA9PSB0cnVlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLkNoZWNrRmluaXNoKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52ZWMyVG1wLnggPSB0aGlzLnN0YXJ0UG9zLnggKyAodGhpcy5lbmRQb3MueCAtIHRoaXMuc3RhcnRQb3MueCkgKiB0aGlzLmFuaW1hdGlvblByb2dyZXNzO1xuICAgICAgICB0aGlzLnZlYzJUbXAueSA9IHRoaXMuc3RhcnRQb3MueSArICh0aGlzLmVuZFBvcy55IC0gdGhpcy5zdGFydFBvcy55KSAqIHRoaXMuYW5pbWF0aW9uUHJvZ3Jlc3M7XG5cbiAgICAgICAgbGV0IGxvY2FsUG9zID0gdGhpcy50YXJnZXQucGFyZW50LmNvbnZlcnRUb05vZGVTcGFjZUFSKHRoaXMudmVjMlRtcCk7XG4gICAgICAgIHRoaXMudGFyZ2V0LnBvc2l0aW9uID0gbG9jYWxQb3M7XG4gICAgICAgIC8vIHRoaXMudGFyZ2V0LnBvc2l0aW9uID0gdGhpcy52ZWMyVG1wO1xuICAgICAgICB0aGlzLkNoZWNrRmluaXNoKCk7XG4gICAgfVxuXG4gICAgcHVibGljIE9uUGxheSgpXG4gICAge1xuICAgICAgICAvLyBpZih0aGlzLnN0YXJ0VmFsdWUgPT0gbnVsbClcbiAgICAgICAgLy8ge1xuICAgICAgICAvLyAgICAgdGhpcy5zdGFydFZhbHVlID0gdGhpcy50YXJnZXQucG9zaXRpb247XG4gICAgICAgIC8vIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgR2V0VHlwZU1hcmsoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIFwiWFR3ZWVuZXJXb3JsZFBvc2l0aW9uXCI7XG4gICAgfVxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/Base/XTweenUpdater.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '8bde3TPQgxHuYVxa6FOpoo3', 'XTweenUpdater');
// Scripts/Tools/XTween/Base/XTweenUpdater.ts

"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var XTweenGlobal_1 = require("./XTweenGlobal");
var Util_1 = require("../../Util");
var UpdateBeat_1 = require("../../../Manager/UpdateBeat");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var XTweenUpdater = /** @class */ (function () {
    /**
     *
     */
    function XTweenUpdater() {
        var _this = this;
        this.tweeners = [];
        // super();
        UpdateBeat_1.default.GetInstance().Add(function (deltaTime) {
            _this.UpdateFunc(deltaTime);
        });
    }
    XTweenUpdater_1 = XTweenUpdater;
    XTweenUpdater.GetInstance = function () {
        if (this.m_Instance == null) {
            // let node:cc.Node = new cc.Node("XTweenUpdater");
            // node.setParent(cc.find("Main"));
            // this.m_Instance = node.addComponent(XTweenUpdater);
            this.m_Instance = new XTweenUpdater_1();
        }
        return this.m_Instance;
    };
    XTweenUpdater.prototype.AddTweener = function (tweener) {
        this.tweeners.push(tweener);
    };
    XTweenUpdater.prototype.Clear = function () {
        this.tweeners = [];
    };
    XTweenUpdater.prototype.UpdateFunc = function (deltaTime) {
        var tNeedRemove = [];
        for (var i = 0; i < this.tweeners.length; i++) {
            var tweener = this.tweeners[i];
            if (tweener.GetState() == XTweenGlobal_1.XTweenerState.Playing) {
                tweener.Update(deltaTime);
            }
            if (tweener.GetState() == XTweenGlobal_1.XTweenerState.End) {
                tNeedRemove.push(tweener);
            }
        }
        for (var i = 0; i < tNeedRemove.length; i++) {
            var needRemoveTweener = tNeedRemove[i];
            Util_1.default.RemoveArray(this.tweeners, needRemoveTweener);
        }
    };
    var XTweenUpdater_1;
    XTweenUpdater = XTweenUpdater_1 = __decorate([
        ccclass
    ], XTweenUpdater);
    return XTweenUpdater;
}());
exports.default = XTweenUpdater;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFhUd2VlblxcQmFzZVxcWFR3ZWVuVXBkYXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLCtDQUErQztBQUMvQyxtQ0FBOEI7QUFDOUIsMERBQXFEO0FBRS9DLElBQUEsa0JBQW1DLEVBQWxDLG9CQUFPLEVBQUUsc0JBQXlCLENBQUM7QUFHMUM7SUFpQkk7O09BRUc7SUFDSDtRQUFBLGlCQUtDO1FBckJPLGFBQVEsR0FBcUIsRUFBRSxDQUFDO1FBaUJwQyxXQUFXO1FBQ1gsb0JBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBQyxTQUFTO1lBQ25DLEtBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO3NCQXpCZ0IsYUFBYTtJQUtoQix5QkFBVyxHQUF6QjtRQUVJLElBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQzFCO1lBQ0ksbURBQW1EO1lBQ25ELG1DQUFtQztZQUNuQyxzREFBc0Q7WUFDdEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGVBQWEsRUFBRSxDQUFDO1NBQ3pDO1FBQ0QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzNCLENBQUM7SUFZTSxrQ0FBVSxHQUFqQixVQUFrQixPQUFrQjtRQUVoQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRU0sNkJBQUssR0FBWjtRQUVJLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFTyxrQ0FBVSxHQUFsQixVQUFvQixTQUFTO1FBRXpCLElBQUksV0FBVyxHQUFxQixFQUFFLENBQUM7UUFDdkMsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUN4QztZQUNJLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0IsSUFBRyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksNEJBQWEsQ0FBQyxPQUFPLEVBQzlDO2dCQUNJLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDN0I7WUFDRCxJQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSw0QkFBYSxDQUFDLEdBQUcsRUFDMUM7Z0JBQ0ksV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM3QjtTQUNKO1FBQ0QsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQ3BDO1lBQ0ksSUFBSSxpQkFBaUIsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkMsY0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDckQ7SUFDTCxDQUFDOztJQXpEZ0IsYUFBYTtRQURqQyxPQUFPO09BQ2EsYUFBYSxDQTBEakM7SUFBRCxvQkFBQztDQTFERCxBQTBEQyxJQUFBO2tCQTFEb0IsYUFBYSIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBYVHdlZW5lcklGIGZyb20gXCIuL1hUd2VlbmVySUZcIjtcbmltcG9ydCB7IFhUd2VlbmVyU3RhdGUgfSBmcm9tIFwiLi9YVHdlZW5HbG9iYWxcIjtcbmltcG9ydCBVdGlsIGZyb20gXCIuLi8uLi9VdGlsXCI7XG5pbXBvcnQgVXBkYXRlQmVhdCBmcm9tIFwiLi4vLi4vLi4vTWFuYWdlci9VcGRhdGVCZWF0XCI7XG5cbmNvbnN0IHtjY2NsYXNzLCBwcm9wZXJ0eX0gPSBjYy5fZGVjb3JhdG9yO1xuXG5AY2NjbGFzc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWFR3ZWVuVXBkYXRlciAvL2V4dGVuZHMgY2MuQ29tcG9uZW50IFxue1xuICAgIHByaXZhdGUgc3RhdGljIG1fSW5zdGFuY2U6WFR3ZWVuVXBkYXRlcjtcblxuICAgIHByaXZhdGUgdHdlZW5lcnM6QXJyYXk8WFR3ZWVuZXJJRj4gPSBbXTtcbiAgICBwdWJsaWMgc3RhdGljIEdldEluc3RhbmNlKCk6WFR3ZWVuVXBkYXRlclxuICAgIHtcbiAgICAgICAgaWYodGhpcy5tX0luc3RhbmNlID09IG51bGwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGxldCBub2RlOmNjLk5vZGUgPSBuZXcgY2MuTm9kZShcIlhUd2VlblVwZGF0ZXJcIik7XG4gICAgICAgICAgICAvLyBub2RlLnNldFBhcmVudChjYy5maW5kKFwiTWFpblwiKSk7XG4gICAgICAgICAgICAvLyB0aGlzLm1fSW5zdGFuY2UgPSBub2RlLmFkZENvbXBvbmVudChYVHdlZW5VcGRhdGVyKTtcbiAgICAgICAgICAgIHRoaXMubV9JbnN0YW5jZSA9IG5ldyBYVHdlZW5VcGRhdGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubV9JbnN0YW5jZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBzdXBlcigpO1xuICAgICAgICBVcGRhdGVCZWF0LkdldEluc3RhbmNlKCkuQWRkKChkZWx0YVRpbWUpPT57XG4gICAgICAgICAgICB0aGlzLlVwZGF0ZUZ1bmMoZGVsdGFUaW1lKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIEFkZFR3ZWVuZXIodHdlZW5lcjpYVHdlZW5lcklGKVxuICAgIHtcbiAgICAgICAgdGhpcy50d2VlbmVycy5wdXNoKHR3ZWVuZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBDbGVhcigpXG4gICAge1xuICAgICAgICB0aGlzLnR3ZWVuZXJzID0gW107XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBVcGRhdGVGdW5jIChkZWx0YVRpbWUpXG4gICAge1xuICAgICAgICBsZXQgdE5lZWRSZW1vdmU6QXJyYXk8WFR3ZWVuZXJJRj4gPSBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMDtpPHRoaXMudHdlZW5lcnMubGVuZ3RoO2krKylcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IHR3ZWVuZXIgPSB0aGlzLnR3ZWVuZXJzW2ldO1xuICAgICAgICAgICAgaWYodHdlZW5lci5HZXRTdGF0ZSgpID09IFhUd2VlbmVyU3RhdGUuUGxheWluZylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0d2VlbmVyLlVwZGF0ZShkZWx0YVRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodHdlZW5lci5HZXRTdGF0ZSgpID09IFhUd2VlbmVyU3RhdGUuRW5kKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHROZWVkUmVtb3ZlLnB1c2godHdlZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGxldCBpPTA7aTx0TmVlZFJlbW92ZS5sZW5ndGg7aSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgbmVlZFJlbW92ZVR3ZWVuZXIgPSB0TmVlZFJlbW92ZVtpXTtcbiAgICAgICAgICAgIFV0aWwuUmVtb3ZlQXJyYXkodGhpcy50d2VlbmVycyxuZWVkUmVtb3ZlVHdlZW5lcik7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/XTweenerAction.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '56e31n9Ng9OI5FIb8EkS3lR', 'XTweenerAction');
// Scripts/Tools/XTween/XTweenerAction.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var XTweenGlobal_1 = require("./Base/XTweenGlobal");
var XTweenerAction = /** @class */ (function () {
    function XTweenerAction() {
        this.delay = 0;
        this.state = XTweenGlobal_1.XTweenerState.BeforePlay;
        this.controlByParent = false;
        this.speed = 1;
        this.shouldCallback = true;
        this.currentTime = 0;
    }
    XTweenerAction.prototype.SetTweenerData = function (data) {
        this.data = data;
    };
    XTweenerAction.prototype.GetTweenerData = function () {
        return this.data;
    };
    XTweenerAction.prototype.SetDelay = function (delay) {
        this.delay = delay;
    };
    XTweenerAction.prototype.GetDelay = function () {
        return this.delay;
    };
    XTweenerAction.prototype.Play = function () {
        if (this.state == XTweenGlobal_1.XTweenerState.BeforePlay) {
            if (this.startCallback != null) {
                this.startCallback();
            }
        }
        this.state = XTweenGlobal_1.XTweenerState.Playing;
    };
    XTweenerAction.prototype.Finish = function (shouldCallback) {
        if (shouldCallback === void 0) { shouldCallback = true; }
        this.state = XTweenGlobal_1.XTweenerState.End;
        this.shouldCallback = shouldCallback;
    };
    XTweenerAction.prototype.Pause = function () {
        if (this.state == XTweenGlobal_1.XTweenerState.Playing) {
            this.state = XTweenGlobal_1.XTweenerState.Pause;
        }
    };
    XTweenerAction.prototype.Resume = function () {
        if (this.state == XTweenGlobal_1.XTweenerState.Pause) {
            this.state = XTweenGlobal_1.XTweenerState.Playing;
        }
    };
    XTweenerAction.prototype.SetSpeed = function (speed) {
        this.speed = speed;
    };
    XTweenerAction.prototype.SetStartCallback = function (startCallback) {
        this.startCallback = startCallback;
    };
    XTweenerAction.prototype.SetFinishCallback = function (finishCallback) {
        this.finishCallback = finishCallback;
    };
    XTweenerAction.prototype.GetState = function () {
        return this.state;
    };
    XTweenerAction.prototype.SetControlByParent = function () {
        this.controlByParent = true;
    };
    XTweenerAction.prototype.Update = function (deltaTime) {
        this.currentTime += deltaTime * this.speed;
        if (this.currentTime >= this.delay) {
            if (this.action != null) {
                this.action();
            }
            if (this.finishCallback != null && this.shouldCallback == true) {
                this.finishCallback();
            }
            this.state = XTweenGlobal_1.XTweenerState.End;
        }
    };
    XTweenerAction.prototype.GetTypeMark = function () {
        return "XTweenerAction";
    };
    XTweenerAction.prototype.GetControlByParent = function () {
        return this.controlByParent;
    };
    XTweenerAction.prototype.BeReplaced = function () {
        //do nothing
    };
    XTweenerAction.prototype.OnEnable = function () {
        //do nothing
    };
    XTweenerAction.prototype.OnDisable = function () {
        //终止整个tween
        this.state = XTweenGlobal_1.XTweenerState.End;
    };
    XTweenerAction.prototype.OnDestroy = function () {
        //终止整个tween
        this.state = XTweenGlobal_1.XTweenerState.End;
    };
    XTweenerAction.prototype.SetAction = function (action) {
        this.action = action;
    };
    return XTweenerAction;
}());
exports.default = XTweenerAction;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFhUd2VlblxcWFR3ZWVuZXJBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxvREFBb0Q7QUFFcEQ7SUFBQTtRQUdZLFVBQUssR0FBVSxDQUFDLENBQUM7UUFDakIsVUFBSyxHQUFpQiw0QkFBYSxDQUFDLFVBQVUsQ0FBQztRQUMvQyxvQkFBZSxHQUFXLEtBQUssQ0FBQztRQUdoQyxVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsbUJBQWMsR0FBVyxJQUFJLENBQUM7UUFDOUIsZ0JBQVcsR0FBVSxDQUFDLENBQUM7SUF3SG5DLENBQUM7SUFySFUsdUNBQWMsR0FBckIsVUFBc0IsSUFBSTtRQUV0QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBQ00sdUNBQWMsR0FBckI7UUFFSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUNNLGlDQUFRLEdBQWYsVUFBZ0IsS0FBWTtRQUV4QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0lBQ00saUNBQVEsR0FBZjtRQUVJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBQ00sNkJBQUksR0FBWDtRQUVJLElBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSw0QkFBYSxDQUFDLFVBQVUsRUFDekM7WUFDSSxJQUFHLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxFQUM3QjtnQkFDSSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7YUFDeEI7U0FDSjtRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsNEJBQWEsQ0FBQyxPQUFPLENBQUM7SUFDdkMsQ0FBQztJQUVNLCtCQUFNLEdBQWIsVUFBYyxjQUEyQjtRQUEzQiwrQkFBQSxFQUFBLHFCQUEyQjtRQUVyQyxJQUFJLENBQUMsS0FBSyxHQUFHLDRCQUFhLENBQUMsR0FBRyxDQUFDO1FBQy9CLElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO0lBQ3pDLENBQUM7SUFDTSw4QkFBSyxHQUFaO1FBRUksSUFBRyxJQUFJLENBQUMsS0FBSyxJQUFJLDRCQUFhLENBQUMsT0FBTyxFQUN0QztZQUNJLElBQUksQ0FBQyxLQUFLLEdBQUcsNEJBQWEsQ0FBQyxLQUFLLENBQUM7U0FDcEM7SUFDTCxDQUFDO0lBQ00sK0JBQU0sR0FBYjtRQUVJLElBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSw0QkFBYSxDQUFDLEtBQUssRUFDcEM7WUFDSSxJQUFJLENBQUMsS0FBSyxHQUFHLDRCQUFhLENBQUMsT0FBTyxDQUFDO1NBQ3RDO0lBQ0wsQ0FBQztJQUNNLGlDQUFRLEdBQWYsVUFBZ0IsS0FBWTtRQUV4QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0lBQ00seUNBQWdCLEdBQXZCLFVBQXdCLGFBQXNCO1FBRTFDLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0lBQ3ZDLENBQUM7SUFDTSwwQ0FBaUIsR0FBeEIsVUFBeUIsY0FBdUI7UUFFNUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7SUFDekMsQ0FBQztJQUNNLGlDQUFRLEdBQWY7UUFFSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUNNLDJDQUFrQixHQUF6QjtRQUVJLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0lBQ2hDLENBQUM7SUFDTSwrQkFBTSxHQUFiLFVBQWMsU0FBZ0I7UUFFMUIsSUFBSSxDQUFDLFdBQVcsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMzQyxJQUFHLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLEtBQUssRUFDakM7WUFDSSxJQUFHLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxFQUN0QjtnQkFDSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7YUFDakI7WUFDRCxJQUFHLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxFQUM3RDtnQkFDSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDekI7WUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLDRCQUFhLENBQUMsR0FBRyxDQUFDO1NBQ2xDO0lBQ0wsQ0FBQztJQUNNLG9DQUFXLEdBQWxCO1FBRUksT0FBTyxnQkFBZ0IsQ0FBQztJQUM1QixDQUFDO0lBQ00sMkNBQWtCLEdBQXpCO1FBRUksT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQ2hDLENBQUM7SUFFTSxtQ0FBVSxHQUFqQjtRQUVJLFlBQVk7SUFDaEIsQ0FBQztJQUNNLGlDQUFRLEdBQWY7UUFFSSxZQUFZO0lBQ2hCLENBQUM7SUFDTSxrQ0FBUyxHQUFoQjtRQUVJLFdBQVc7UUFDWCxJQUFJLENBQUMsS0FBSyxHQUFHLDRCQUFhLENBQUMsR0FBRyxDQUFDO0lBQ25DLENBQUM7SUFDTSxrQ0FBUyxHQUFoQjtRQUVJLFdBQVc7UUFDWCxJQUFJLENBQUMsS0FBSyxHQUFHLDRCQUFhLENBQUMsR0FBRyxDQUFDO0lBQ25DLENBQUM7SUFFTSxrQ0FBUyxHQUFoQixVQUFpQixNQUFlO1FBRTVCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFFTCxxQkFBQztBQUFELENBbElBLEFBa0lDLElBQUEiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgWFR3ZWVuZXJJRiBmcm9tIFwiLi9CYXNlL1hUd2VlbmVySUZcIjtcbmltcG9ydCB7IFhUd2VlbmVyU3RhdGUgfSBmcm9tIFwiLi9CYXNlL1hUd2Vlbkdsb2JhbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBYVHdlZW5lckFjdGlvbiBpbXBsZW1lbnRzIFhUd2VlbmVySUYgXG57XG4gICAgcHJpdmF0ZSBkYXRhOmFueTtcbiAgICBwcml2YXRlIGRlbGF5Om51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSBzdGF0ZTpYVHdlZW5lclN0YXRlID0gWFR3ZWVuZXJTdGF0ZS5CZWZvcmVQbGF5O1xuICAgIHByaXZhdGUgY29udHJvbEJ5UGFyZW50OmJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIHN0YXJ0Q2FsbGJhY2s6KCk9PnZvaWQ7XG4gICAgcHJpdmF0ZSBmaW5pc2hDYWxsYmFjazooKT0+dm9pZDtcbiAgICBwcml2YXRlIHNwZWVkID0gMTtcbiAgICBwcml2YXRlIHNob3VsZENhbGxiYWNrOmJvb2xlYW4gPSB0cnVlO1xuICAgIHByaXZhdGUgY3VycmVudFRpbWU6bnVtYmVyID0gMDtcbiAgICBwcml2YXRlIGFjdGlvbjooKT0+dm9pZDtcblxuICAgIHB1YmxpYyBTZXRUd2VlbmVyRGF0YShkYXRhKVxuICAgIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgcHVibGljIEdldFR3ZWVuZXJEYXRhKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGE7XG4gICAgfVxuICAgIHB1YmxpYyBTZXREZWxheShkZWxheTpudW1iZXIpXG4gICAge1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgfVxuICAgIHB1YmxpYyBHZXREZWxheSgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWxheTtcbiAgICB9XG4gICAgcHVibGljIFBsYXkoKVxuICAgIHtcbiAgICAgICAgaWYodGhpcy5zdGF0ZSA9PSBYVHdlZW5lclN0YXRlLkJlZm9yZVBsYXkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmKHRoaXMuc3RhcnRDYWxsYmFjayAhPSBudWxsKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRDYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBYVHdlZW5lclN0YXRlLlBsYXlpbmc7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBGaW5pc2goc2hvdWxkQ2FsbGJhY2s6Ym9vbGVhbj10cnVlKVxuICAgIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFhUd2VlbmVyU3RhdGUuRW5kO1xuICAgICAgICB0aGlzLnNob3VsZENhbGxiYWNrID0gc2hvdWxkQ2FsbGJhY2s7XG4gICAgfVxuICAgIHB1YmxpYyBQYXVzZSgpXG4gICAge1xuICAgICAgICBpZih0aGlzLnN0YXRlID09IFhUd2VlbmVyU3RhdGUuUGxheWluZylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFhUd2VlbmVyU3RhdGUuUGF1c2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIFJlc3VtZSgpXG4gICAge1xuICAgICAgICBpZih0aGlzLnN0YXRlID09IFhUd2VlbmVyU3RhdGUuUGF1c2UpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBYVHdlZW5lclN0YXRlLlBsYXlpbmc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIFNldFNwZWVkKHNwZWVkOm51bWJlcilcbiAgICB7XG4gICAgICAgIHRoaXMuc3BlZWQgPSBzcGVlZDtcbiAgICB9XG4gICAgcHVibGljIFNldFN0YXJ0Q2FsbGJhY2soc3RhcnRDYWxsYmFjazooKT0+dm9pZClcbiAgICB7XG4gICAgICAgIHRoaXMuc3RhcnRDYWxsYmFjayA9IHN0YXJ0Q2FsbGJhY2s7XG4gICAgfVxuICAgIHB1YmxpYyBTZXRGaW5pc2hDYWxsYmFjayhmaW5pc2hDYWxsYmFjazooKT0+dm9pZClcbiAgICB7XG4gICAgICAgIHRoaXMuZmluaXNoQ2FsbGJhY2sgPSBmaW5pc2hDYWxsYmFjaztcbiAgICB9XG4gICAgcHVibGljIEdldFN0YXRlKCk6WFR3ZWVuZXJTdGF0ZVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGU7XG4gICAgfVxuICAgIHB1YmxpYyBTZXRDb250cm9sQnlQYXJlbnQoKVxuICAgIHtcbiAgICAgICAgdGhpcy5jb250cm9sQnlQYXJlbnQgPSB0cnVlO1xuICAgIH1cbiAgICBwdWJsaWMgVXBkYXRlKGRlbHRhVGltZTpudW1iZXIpXG4gICAge1xuICAgICAgICB0aGlzLmN1cnJlbnRUaW1lICs9IGRlbHRhVGltZSAqIHRoaXMuc3BlZWQ7XG4gICAgICAgIGlmKHRoaXMuY3VycmVudFRpbWUgPj0gdGhpcy5kZWxheSlcbiAgICAgICAge1xuICAgICAgICAgICAgaWYodGhpcy5hY3Rpb24gIT0gbnVsbClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodGhpcy5maW5pc2hDYWxsYmFjayAhPSBudWxsICYmIHRoaXMuc2hvdWxkQ2FsbGJhY2sgPT0gdHJ1ZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmlzaENhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBYVHdlZW5lclN0YXRlLkVuZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgR2V0VHlwZU1hcmsoKTpzdHJpbmdcbiAgICB7XG4gICAgICAgIHJldHVybiBcIlhUd2VlbmVyQWN0aW9uXCI7XG4gICAgfVxuICAgIHB1YmxpYyBHZXRDb250cm9sQnlQYXJlbnQoKTpib29sZWFuXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sQnlQYXJlbnQ7XG4gICAgfVxuXG4gICAgcHVibGljIEJlUmVwbGFjZWQoKVxuICAgIHtcbiAgICAgICAgLy9kbyBub3RoaW5nXG4gICAgfVxuICAgIHB1YmxpYyBPbkVuYWJsZSgpXG4gICAge1xuICAgICAgICAvL2RvIG5vdGhpbmdcbiAgICB9XG4gICAgcHVibGljIE9uRGlzYWJsZSgpXG4gICAge1xuICAgICAgICAvL+e7iOatouaVtOS4qnR3ZWVuXG4gICAgICAgIHRoaXMuc3RhdGUgPSBYVHdlZW5lclN0YXRlLkVuZDtcbiAgICB9XG4gICAgcHVibGljIE9uRGVzdHJveSgpXG4gICAge1xuICAgICAgICAvL+e7iOatouaVtOS4qnR3ZWVuXG4gICAgICAgIHRoaXMuc3RhdGUgPSBYVHdlZW5lclN0YXRlLkVuZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgU2V0QWN0aW9uKGFjdGlvbjooKT0+dm9pZClcbiAgICB7XG4gICAgICAgIHRoaXMuYWN0aW9uID0gYWN0aW9uO1xuICAgIH1cblxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/XTweenerScale.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '48e38f0L39IDb3VfGNl0s6b', 'XTweenerScale');
// Scripts/Tools/XTween/XTweenerScale.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var XTweener_1 = require("./Base/XTweener");
var XTweenCurv_1 = require("./Base/XTweenCurv");
var XTweenerScale = /** @class */ (function (_super) {
    __extends(XTweenerScale, _super);
    function XTweenerScale() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    XTweenerScale.prototype.Init = function (target, startValue, endValue, duration, playTimes, pingPong, curv) {
        if (curv === void 0) { curv = XTweenCurv_1.XTweenCurvType.Liner; }
        this.SetTarget(target);
        this.startValue = startValue;
        this.endValue = endValue;
        this.duration = duration;
        // this.curvType = curv;
        // this.pingPong = pingPong;
        // this.repeatTimes = playTimes;
        this.InitTweenerData(playTimes, pingPong, curv);
    };
    XTweenerScale.prototype.Update = function (deltaTime) {
        _super.prototype.Update.call(this, deltaTime);
        if (this.beReplaced == true) {
            this.CheckFinish();
            return;
        }
        this.target.scaleX = this.startValue.x + (this.endValue.x - this.startValue.x) * this.animationProgress;
        this.target.scaleY = this.startValue.y + (this.endValue.y - this.startValue.y) * this.animationProgress;
        this.CheckFinish();
    };
    XTweenerScale.prototype.OnPlay = function () {
        if (this.startValue == null) {
            this.startValue = cc.Vec2.ONE;
            this.startValue.x = this.target.scaleX;
            this.startValue.y = this.target.scaleY;
        }
    };
    XTweenerScale.prototype.GetTypeMark = function () {
        return "XTweenerScale";
    };
    return XTweenerScale;
}(XTweener_1.default));
exports.default = XTweenerScale;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFhUd2VlblxcWFR3ZWVuZXJTY2FsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0Q0FBdUM7QUFDdkMsZ0RBQW1EO0FBR25EO0lBQTJDLGlDQUFRO0lBQW5EOztJQXFEQSxDQUFDO0lBaERVLDRCQUFJLEdBQVgsVUFDSSxNQUFjLEVBQ2QsVUFBa0IsRUFDbEIsUUFBZ0IsRUFDaEIsUUFBZSxFQUNmLFNBQWdCLEVBQ2hCLFFBQWdCLEVBQ2hCLElBQXlCO1FBQXpCLHFCQUFBLEVBQUEsT0FBSywyQkFBYyxDQUFDLEtBQUs7UUFHekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6Qix3QkFBd0I7UUFDeEIsNEJBQTRCO1FBQzVCLGdDQUFnQztRQUNoQyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVNLDhCQUFNLEdBQWIsVUFBYyxTQUFTO1FBRW5CLGlCQUFNLE1BQU0sWUFBQyxTQUFTLENBQUMsQ0FBQztRQUN4QixJQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxFQUMxQjtZQUNJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNuQixPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1FBQ3hHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUM7UUFFeEcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFTSw4QkFBTSxHQUFiO1FBRUksSUFBRyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksRUFDMUI7WUFDSSxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQzlCLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQzFDO0lBQ0wsQ0FBQztJQUVNLG1DQUFXLEdBQWxCO1FBRUksT0FBTyxlQUFlLENBQUM7SUFDM0IsQ0FBQztJQUNMLG9CQUFDO0FBQUQsQ0FyREEsQUFxREMsQ0FyRDBDLGtCQUFRLEdBcURsRCIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBYVHdlZW5lciBmcm9tIFwiLi9CYXNlL1hUd2VlbmVyXCI7XG5pbXBvcnQgeyBYVHdlZW5DdXJ2VHlwZSB9IGZyb20gXCIuL0Jhc2UvWFR3ZWVuQ3VydlwiO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhUd2VlbmVyU2NhbGUgZXh0ZW5kcyBYVHdlZW5lciBcbntcbiAgICBwcml2YXRlIHN0YXJ0VmFsdWU6Y2MuVmVjMjtcbiAgICBwcml2YXRlIGVuZFZhbHVlOmNjLlZlYzI7XG5cbiAgICBwdWJsaWMgSW5pdChcbiAgICAgICAgdGFyZ2V0OmNjLk5vZGUsXG4gICAgICAgIHN0YXJ0VmFsdWU6Y2MuVmVjMixcbiAgICAgICAgZW5kVmFsdWU6Y2MuVmVjMixcbiAgICAgICAgZHVyYXRpb246bnVtYmVyLFxuICAgICAgICBwbGF5VGltZXM6bnVtYmVyLFxuICAgICAgICBwaW5nUG9uZzpib29sZWFuLFxuICAgICAgICBjdXJ2PVhUd2VlbkN1cnZUeXBlLkxpbmVyLFxuICAgIClcbiAgICB7XG4gICAgICAgIHRoaXMuU2V0VGFyZ2V0KHRhcmdldCk7XG4gICAgICAgIHRoaXMuc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWU7XG4gICAgICAgIHRoaXMuZW5kVmFsdWUgPSBlbmRWYWx1ZTtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICAvLyB0aGlzLmN1cnZUeXBlID0gY3VydjtcbiAgICAgICAgLy8gdGhpcy5waW5nUG9uZyA9IHBpbmdQb25nO1xuICAgICAgICAvLyB0aGlzLnJlcGVhdFRpbWVzID0gcGxheVRpbWVzO1xuICAgICAgICB0aGlzLkluaXRUd2VlbmVyRGF0YShwbGF5VGltZXMscGluZ1BvbmcsY3Vydik7XG4gICAgfVxuXG4gICAgcHVibGljIFVwZGF0ZShkZWx0YVRpbWUpXG4gICAge1xuICAgICAgICBzdXBlci5VcGRhdGUoZGVsdGFUaW1lKTtcbiAgICAgICAgaWYodGhpcy5iZVJlcGxhY2VkID09IHRydWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuQ2hlY2tGaW5pc2goKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhcmdldC5zY2FsZVggPSB0aGlzLnN0YXJ0VmFsdWUueCArICh0aGlzLmVuZFZhbHVlLnggLSB0aGlzLnN0YXJ0VmFsdWUueCkgKiB0aGlzLmFuaW1hdGlvblByb2dyZXNzO1xuICAgICAgICB0aGlzLnRhcmdldC5zY2FsZVkgPSB0aGlzLnN0YXJ0VmFsdWUueSArICh0aGlzLmVuZFZhbHVlLnkgLSB0aGlzLnN0YXJ0VmFsdWUueSkgKiB0aGlzLmFuaW1hdGlvblByb2dyZXNzO1xuXG4gICAgICAgIHRoaXMuQ2hlY2tGaW5pc2goKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgT25QbGF5KClcbiAgICB7XG4gICAgICAgIGlmKHRoaXMuc3RhcnRWYWx1ZSA9PSBudWxsKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSBjYy5WZWMyLk9ORTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRWYWx1ZS54ID0gdGhpcy50YXJnZXQuc2NhbGVYO1xuICAgICAgICAgICAgdGhpcy5zdGFydFZhbHVlLnkgPSB0aGlzLnRhcmdldC5zY2FsZVk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgR2V0VHlwZU1hcmsoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIFwiWFR3ZWVuZXJTY2FsZVwiO1xuICAgIH1cbn1cbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/XTweenerValue.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '762c5kLGJpJMKFVl2UGYsY0', 'XTweenerValue');
// Scripts/Tools/XTween/XTweenerValue.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var XTweener_1 = require("./Base/XTweener");
var XTweenCurv_1 = require("./Base/XTweenCurv");
var XTweenerValue = /** @class */ (function (_super) {
    __extends(XTweenerValue, _super);
    function XTweenerValue() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    XTweenerValue.prototype.Init = function (target, vauleChangeCallback, startValue, endValue, duration, playTimes, pingPong, curv) {
        if (curv === void 0) { curv = XTweenCurv_1.XTweenCurvType.Liner; }
        this.SetTarget(target);
        this.vauleChangeCallback = vauleChangeCallback;
        this.startValue = startValue;
        this.endValue = endValue;
        this.duration = duration;
        // this.curvType = curv;
        // this.pingPong = pingPong;
        // this.repeatTimes = playTimes;
        this.InitTweenerData(playTimes, pingPong, curv);
    };
    XTweenerValue.prototype.Update = function (deltaTime) {
        _super.prototype.Update.call(this, deltaTime);
        if (this.beReplaced == true) {
            this.CheckFinish();
            return;
        }
        var value = this.startValue + (this.endValue - this.startValue) * this.animationProgress;
        if (this.vauleChangeCallback != null) {
            this.vauleChangeCallback(value);
        }
        this.CheckFinish();
    };
    XTweenerValue.prototype.OnPlay = function () {
        if (this.startValue == null) {
            this.startValue = 0;
        }
    };
    XTweenerValue.prototype.GetTypeMark = function () {
        return "XTweenerValue";
    };
    return XTweenerValue;
}(XTweener_1.default));
exports.default = XTweenerValue;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFhUd2VlblxcWFR3ZWVuZXJWYWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0Q0FBdUM7QUFDdkMsZ0RBQW1EO0FBRW5EO0lBQTJDLGlDQUFRO0lBQW5EOztJQXlEQSxDQUFDO0lBbkRVLDRCQUFJLEdBQVgsVUFDSSxNQUFjLEVBQ2QsbUJBQXdDLEVBQ3hDLFVBQWlCLEVBQ2pCLFFBQWUsRUFDZixRQUFlLEVBQ2YsU0FBZ0IsRUFDaEIsUUFBZ0IsRUFDaEIsSUFBeUI7UUFBekIscUJBQUEsRUFBQSxPQUFLLDJCQUFjLENBQUMsS0FBSztRQUd6QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQztRQUMvQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6Qix3QkFBd0I7UUFDeEIsNEJBQTRCO1FBQzVCLGdDQUFnQztRQUNoQyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVNLDhCQUFNLEdBQWIsVUFBYyxTQUFTO1FBRW5CLGlCQUFNLE1BQU0sWUFBQyxTQUFTLENBQUMsQ0FBQztRQUN4QixJQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxFQUMxQjtZQUNJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNuQixPQUFPO1NBQ1Y7UUFDRCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1FBQ3pGLElBQUcsSUFBSSxDQUFDLG1CQUFtQixJQUFJLElBQUksRUFDbkM7WUFDSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkM7UUFFRCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVNLDhCQUFNLEdBQWI7UUFFSSxJQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxFQUMxQjtZQUNJLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZCO0lBQ0wsQ0FBQztJQUVNLG1DQUFXLEdBQWxCO1FBRUksT0FBTyxlQUFlLENBQUM7SUFDM0IsQ0FBQztJQUNMLG9CQUFDO0FBQUQsQ0F6REEsQUF5REMsQ0F6RDBDLGtCQUFRLEdBeURsRCIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBYVHdlZW5lciBmcm9tIFwiLi9CYXNlL1hUd2VlbmVyXCI7XG5pbXBvcnQgeyBYVHdlZW5DdXJ2VHlwZSB9IGZyb20gXCIuL0Jhc2UvWFR3ZWVuQ3VydlwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBYVHdlZW5lclZhbHVlIGV4dGVuZHMgWFR3ZWVuZXIgXG57XG4gICAgcHJpdmF0ZSBzdGFydFZhbHVlOm51bWJlcjtcbiAgICBwcml2YXRlIGVuZFZhbHVlOm51bWJlcjtcbiAgICBwcml2YXRlIHZhdWxlQ2hhbmdlQ2FsbGJhY2s6KHZhbHVlOm51bWJlcik9PnZvaWQ7XG5cbiAgICBwdWJsaWMgSW5pdChcbiAgICAgICAgdGFyZ2V0OmNjLk5vZGUsXG4gICAgICAgIHZhdWxlQ2hhbmdlQ2FsbGJhY2s6KHZhbHVlOm51bWJlcik9PnZvaWQsXG4gICAgICAgIHN0YXJ0VmFsdWU6bnVtYmVyLFxuICAgICAgICBlbmRWYWx1ZTpudW1iZXIsXG4gICAgICAgIGR1cmF0aW9uOm51bWJlcixcbiAgICAgICAgcGxheVRpbWVzOm51bWJlcixcbiAgICAgICAgcGluZ1Bvbmc6Ym9vbGVhbixcbiAgICAgICAgY3Vydj1YVHdlZW5DdXJ2VHlwZS5MaW5lcixcbiAgICApXG4gICAge1xuICAgICAgICB0aGlzLlNldFRhcmdldCh0YXJnZXQpO1xuICAgICAgICB0aGlzLnZhdWxlQ2hhbmdlQ2FsbGJhY2sgPSB2YXVsZUNoYW5nZUNhbGxiYWNrO1xuICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlO1xuICAgICAgICB0aGlzLmVuZFZhbHVlID0gZW5kVmFsdWU7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgLy8gdGhpcy5jdXJ2VHlwZSA9IGN1cnY7XG4gICAgICAgIC8vIHRoaXMucGluZ1BvbmcgPSBwaW5nUG9uZztcbiAgICAgICAgLy8gdGhpcy5yZXBlYXRUaW1lcyA9IHBsYXlUaW1lcztcbiAgICAgICAgdGhpcy5Jbml0VHdlZW5lckRhdGEocGxheVRpbWVzLHBpbmdQb25nLGN1cnYpO1xuICAgIH1cblxuICAgIHB1YmxpYyBVcGRhdGUoZGVsdGFUaW1lKVxuICAgIHtcbiAgICAgICAgc3VwZXIuVXBkYXRlKGRlbHRhVGltZSk7XG4gICAgICAgIGlmKHRoaXMuYmVSZXBsYWNlZCA9PSB0cnVlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLkNoZWNrRmluaXNoKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5zdGFydFZhbHVlICsgKHRoaXMuZW5kVmFsdWUgLSB0aGlzLnN0YXJ0VmFsdWUpICogdGhpcy5hbmltYXRpb25Qcm9ncmVzcztcbiAgICAgICAgaWYodGhpcy52YXVsZUNoYW5nZUNhbGxiYWNrICE9IG51bGwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMudmF1bGVDaGFuZ2VDYWxsYmFjayh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLkNoZWNrRmluaXNoKCk7XG4gICAgfVxuXG4gICAgcHVibGljIE9uUGxheSgpXG4gICAge1xuICAgICAgICBpZih0aGlzLnN0YXJ0VmFsdWUgPT0gbnVsbClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zdGFydFZhbHVlID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBHZXRUeXBlTWFyaygpXG4gICAge1xuICAgICAgICByZXR1cm4gXCJYVHdlZW5lclZhbHVlXCI7XG4gICAgfVxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/Base/XTweenCurv.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e63e0PCgFdOsYzlQgwgQgv0', 'XTweenCurv');
// Scripts/Tools/XTween/Base/XTweenCurv.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var XTweenCurvType;
(function (XTweenCurvType) {
    XTweenCurvType[XTweenCurvType["Liner"] = 0] = "Liner";
    XTweenCurvType[XTweenCurvType["InSine"] = 1] = "InSine";
    XTweenCurvType[XTweenCurvType["OutSine"] = 2] = "OutSine";
    XTweenCurvType[XTweenCurvType["InOutSine"] = 3] = "InOutSine";
    XTweenCurvType[XTweenCurvType["InQuad"] = 4] = "InQuad";
    XTweenCurvType[XTweenCurvType["OutQuad"] = 5] = "OutQuad";
    XTweenCurvType[XTweenCurvType["InOutQuad"] = 6] = "InOutQuad";
    XTweenCurvType[XTweenCurvType["InCubic"] = 7] = "InCubic";
    XTweenCurvType[XTweenCurvType["OutCubic"] = 8] = "OutCubic";
    XTweenCurvType[XTweenCurvType["InOutCubic"] = 9] = "InOutCubic";
    XTweenCurvType[XTweenCurvType["InQuart"] = 10] = "InQuart";
    XTweenCurvType[XTweenCurvType["OutQuart"] = 11] = "OutQuart";
    XTweenCurvType[XTweenCurvType["InOutQuart"] = 12] = "InOutQuart";
    XTweenCurvType[XTweenCurvType["InQuint"] = 13] = "InQuint";
    XTweenCurvType[XTweenCurvType["OutQuint"] = 14] = "OutQuint";
    XTweenCurvType[XTweenCurvType["InOutQuint"] = 15] = "InOutQuint";
    XTweenCurvType[XTweenCurvType["InExpo"] = 16] = "InExpo";
    XTweenCurvType[XTweenCurvType["OutExpo"] = 17] = "OutExpo";
    XTweenCurvType[XTweenCurvType["InOutExpo"] = 18] = "InOutExpo";
    XTweenCurvType[XTweenCurvType["InCirc"] = 19] = "InCirc";
    XTweenCurvType[XTweenCurvType["OutCirc"] = 20] = "OutCirc";
    XTweenCurvType[XTweenCurvType["InOutCirc"] = 21] = "InOutCirc";
    XTweenCurvType[XTweenCurvType["InElastic"] = 22] = "InElastic";
    XTweenCurvType[XTweenCurvType["OutElastic"] = 23] = "OutElastic";
    XTweenCurvType[XTweenCurvType["InOutElastic"] = 24] = "InOutElastic";
    XTweenCurvType[XTweenCurvType["InBack"] = 25] = "InBack";
    XTweenCurvType[XTweenCurvType["OutBack"] = 26] = "OutBack";
    XTweenCurvType[XTweenCurvType["InOutBack"] = 27] = "InOutBack";
    XTweenCurvType[XTweenCurvType["InBounce"] = 28] = "InBounce";
    XTweenCurvType[XTweenCurvType["OutBounce"] = 29] = "OutBounce";
    XTweenCurvType[XTweenCurvType["InOutBounce"] = 30] = "InOutBounce";
    XTweenCurvType[XTweenCurvType["Flash"] = 31] = "Flash";
    XTweenCurvType[XTweenCurvType["InFlash"] = 32] = "InFlash";
    XTweenCurvType[XTweenCurvType["OutFlash"] = 33] = "OutFlash";
    XTweenCurvType[XTweenCurvType["InOutFlash"] = 34] = "InOutFlash";
    XTweenCurvType[XTweenCurvType["EaseIn"] = 35] = "EaseIn";
    XTweenCurvType[XTweenCurvType["EaseOut"] = 36] = "EaseOut";
    XTweenCurvType[XTweenCurvType["EaseInOut"] = 37] = "EaseInOut";
    XTweenCurvType[XTweenCurvType["BounceIn"] = 38] = "BounceIn";
    XTweenCurvType[XTweenCurvType["BounceOut"] = 39] = "BounceOut";
    XTweenCurvType[XTweenCurvType["BounceInOut"] = 40] = "BounceInOut";
    XTweenCurvType[XTweenCurvType["BuyuGold1"] = 41] = "BuyuGold1";
})(XTweenCurvType = exports.XTweenCurvType || (exports.XTweenCurvType = {}));
var XTweenCurv = /** @class */ (function () {
    function XTweenCurv() {
    }
    XTweenCurv.GetProgress = function (curvType, timeProgress, tCustomCurv) {
        if (tCustomCurv === void 0) { tCustomCurv = null; }
        var progress = 0;
        var pointsArray = tCustomCurv != null ? tCustomCurv : this.tEaseCurv[curvType];
        if (timeProgress <= 0) {
            progress = 0;
        }
        else if (timeProgress >= 1) {
            return pointsArray[pointsArray.length - 1];
        }
        else {
            var index = Math.floor(timeProgress * (pointsArray.length - 1));
            var indexProgress = (index) / (pointsArray.length - 1);
            var indexNextProgress = (index + 1) / (pointsArray.length - 1);
            var lerpProgress = (timeProgress - indexProgress) / (indexNextProgress - indexProgress);
            var delta = pointsArray[index + 1] - pointsArray[index];
            progress = pointsArray[index] + delta * lerpProgress;
        }
        return progress;
    };
    // public static Liner:number = 0;
    // public static InSine:number = 1;
    // public static OutSine:number = 2;
    // public static InOutSine:number = 3;
    // public static InQuad:number = 4;
    // public static OutQuad:number = 5;
    // public static InOutQuad:number = 6;
    // public static InCubic:number = 7;
    // public static OutCubic:number = 8;
    // public static InOutCubic:number = 9;
    // public static InQuart:number = 10;
    // public static OutQuart:number = 11;
    // public static InOutQuart:number = 12;
    // public static InQuint:number = 13;
    // public static OutQuint:number = 14;
    // public static InOutQuint:number = 15;
    // public static InExpo:number = 16;
    // public static OutExpo:number = 17;
    // public static InOutExpo:number = 18;
    // public static InCirc:number = 19;
    // public static OutCirc:number = 20;
    // public static InOutCirc:number = 21;
    // public static InElastic:number = 22;
    // public static OutElastic:number = 23;
    // public static InOutElastic:number = 24;
    // public static InBack:number = 25;
    // public static OutBack:number = 26;
    // public static InOutBack:number = 27;
    // public static InBounce:number = 28;
    // public static OutBounce:number = 29;
    // public static InOutBounce:number = 30;
    // public static Flash:number = 31;
    // public static InFlash:number = 32;
    // public static OutFlash:number = 33;
    // public static InOutFlash:number = 34;
    // public static EaseIn:number = 35;
    // public static EaseOut:number = 36;
    // public static EaseInOut:number = 37;
    // public static BounceIn:number = 38;
    // public static BounceOut:number = 39;
    // public static BounceInOut:number = 40;
    // public static BuyuGold1:number = 41;
    XTweenCurv.tEaseCurv = [
        //Liner
        [0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1],
        //InSine
        [0, 0.0001, 0.0004, 0.0009, 0.0016, 0.0025, 0.0036, 0.0049, 0.0064, 0.008099999, 0.009999999, 0.0121, 0.0144, 0.0169, 0.0196, 0.0225, 0.0256, 0.0289, 0.0324, 0.0361, 0.04, 0.0441, 0.0484, 0.05289999, 0.0576, 0.0625, 0.0676, 0.07289999, 0.0784, 0.08409999, 0.08999999, 0.0961, 0.1024, 0.1089, 0.1156, 0.1225, 0.1296, 0.1369, 0.1444, 0.1521, 0.16, 0.1681, 0.1764, 0.1849, 0.1936, 0.2025, 0.2116, 0.2209, 0.2304, 0.2401, 0.25, 0.2601, 0.2704, 0.2809, 0.2916, 0.3025, 0.3136, 0.3249, 0.3364, 0.3481, 0.36, 0.3721, 0.3844, 0.3969, 0.4096, 0.4225, 0.4356, 0.4489, 0.4624, 0.4761, 0.49, 0.5041, 0.5184, 0.5328999, 0.5476, 0.5625, 0.5776, 0.5929, 0.6083999, 0.6240999, 0.6399999, 0.6561, 0.6724, 0.6889, 0.7056, 0.7225, 0.7395999, 0.7569, 0.7744, 0.7921, 0.8099999, 0.8281, 0.8463999, 0.8649, 0.8836, 0.9025, 0.9216, 0.9409, 0.9603999, 0.9800999, 1],
        //OutSine
        [0, 0.01988221, 0.03952986, 0.05894448, 0.07812759, 0.09708069, 0.1158053, 0.1343031, 0.1525754, 0.1706237, 0.1884498, 0.206055, 0.2234409, 0.2406089, 0.2575607, 0.2742978, 0.2908216, 0.3071337, 0.3232357, 0.339129, 0.3548151, 0.3702957, 0.3855722, 0.4006461, 0.415519, 0.4301924, 0.4446678, 0.4589467, 0.4730307, 0.4869213, 0.5006199, 0.5141283, 0.5274478, 0.54058, 0.5535264, 0.5662885, 0.5788679, 0.591266, 0.6034845, 0.6155247, 0.6273884, 0.6390768, 0.6505917, 0.6619345, 0.6731068, 0.68411, 0.6949458, 0.7056155, 0.7161208, 0.7264632, 0.7366441, 0.7466651, 0.7565279, 0.7662337, 0.7757843, 0.785181, 0.7944255, 0.8035193, 0.8124638, 0.8212607, 0.8299114, 0.8384174, 0.8467803, 0.8550015, 0.8630827, 0.8710254, 0.8788311, 0.8865011, 0.8940374, 0.901441, 0.9087139, 0.9158572, 0.9228727, 0.9297618, 0.9365262, 0.9431672, 0.9495122, 0.9553674, 0.9607521, 0.9656858, 0.9701883, 0.9742793, 0.9779785, 0.9813055, 0.9842801, 0.9869218, 0.9892505, 0.9912858, 0.9930473, 0.9945548, 0.9958279, 0.9968864, 0.9977498, 0.9984379, 0.9989705, 0.9993671, 0.9996474, 0.9998312, 0.9999381, 0.9999878, 1],
        //InOutSine
        [0, 0.000298, 0.001184, 0.002646, 0.004672, 0.007249999, 0.010368, 0.014014, 0.018176, 0.022842, 0.028, 0.033638, 0.039744, 0.046306, 0.053312, 0.06074999, 0.06860799, 0.076874, 0.085536, 0.09458199, 0.104, 0.113778, 0.123904, 0.134366, 0.145152, 0.15625, 0.167648, 0.179334, 0.191296, 0.203522, 0.216, 0.228718, 0.241664, 0.254826, 0.268192, 0.28175, 0.295488, 0.309394, 0.323456, 0.337662, 0.352, 0.366458, 0.381024, 0.395686, 0.410432, 0.42525, 0.4401279, 0.455054, 0.470016, 0.485002, 0.5, 0.514998, 0.5299839, 0.544946, 0.559872, 0.57475, 0.589568, 0.604314, 0.6189759, 0.6335419, 0.6479999, 0.662338, 0.676544, 0.690606, 0.704512, 0.71825, 0.7318079, 0.745174, 0.758336, 0.771282, 0.784, 0.7964779, 0.8087039, 0.820666, 0.832352, 0.84375, 0.854848, 0.865634, 0.876096, 0.886222, 0.896, 0.905418, 0.9144641, 0.923126, 0.931392, 0.93925, 0.946688, 0.953694, 0.960256, 0.9663621, 0.972, 0.977158, 0.981824, 0.985986, 0.9896321, 0.9927499, 0.995328, 0.997354, 0.9988161, 0.999702, 1],
        //InQuad
        [],
        //OutQuad
        [0, 0.0001, 0.0004, 0.0009, 0.0016, 0.0025, 0.0036, 0.0049, 0.0064, 0.008099999, 0.009999999, 0.0121, 0.0144, 0.0169, 0.0196, 0.0225, 0.0256, 0.0289, 0.0324, 0.0361, 0.04, 0.0441, 0.0484, 0.05289999, 0.0576, 0.0625, 0.0676, 0.07289999, 0.0784, 0.08409999, 0.08999999, 0.0961, 0.1024, 0.1089, 0.1156, 0.1225, 0.1296, 0.1369, 0.1444, 0.1521, 0.16, 0.1681, 0.1764, 0.1849, 0.1936, 0.2025, 0.2116, 0.2209, 0.2304, 0.2401, 0.25, 0.2601, 0.2704, 0.2809, 0.2916, 0.3025, 0.3136, 0.3249, 0.3364, 0.3481, 0.36, 0.3721, 0.3844, 0.3969, 0.4096, 0.4225, 0.4356, 0.4489, 0.4624, 0.4761, 0.49, 0.5041, 0.5184, 0.5328999, 0.5476, 0.5625, 0.5776, 0.5929, 0.6083999, 0.6240999, 0.6399999, 0.6561, 0.6724, 0.6889, 0.7056, 0.7225, 0.7395999, 0.7569, 0.7744, 0.7921, 0.8099999, 0.8281, 0.8463999, 0.8649, 0.8836, 0.9025, 0.9216, 0.9409, 0.9603999, 0.9800999, 1],
        //InOutQuad
        [],
        //InCubic
        [],
        //OutCubic
        [0, 0.02064649, 0.0425151, 0.06549954, 0.08949351, 0.1143907, 0.1400849, 0.1664697, 0.1934389, 0.2208861, 0.2487052, 0.2767897, 0.3050334, 0.33333, 0.3615732, 0.3896567, 0.4174743, 0.4449196, 0.4718862, 0.4982682, 0.5239589, 0.5488521, 0.5728416, 0.5958211, 0.6176843, 0.6383249, 0.6576365, 0.675513, 0.691848, 0.7065352, 0.7194682, 0.7312319, 0.7426595, 0.7537585, 0.7645338, 0.77499, 0.785132, 0.7949646, 0.8044926, 0.8137208, 0.8226539, 0.8312969, 0.8396543, 0.8477311, 0.8555321, 0.863062, 0.8703256, 0.8773277, 0.8840731, 0.8905666, 0.8968132, 0.9028172, 0.9085839, 0.9141177, 0.9194237, 0.9245065, 0.929371, 0.9340219, 0.938464, 0.9427022, 0.9467412, 0.9505858, 0.9542409, 0.9577112, 0.9610014, 0.9641165, 0.967061, 0.96984, 0.9724582, 0.9749203, 0.9772312, 0.9793956, 0.9814184, 0.9833043, 0.9850581, 0.9866846, 0.9881886, 0.989575, 0.9908484, 0.9920137, 0.9930757, 0.9940392, 0.994909, 0.9956897, 0.9963864, 0.9970038, 0.9975466, 0.9980195, 0.9984275, 0.9987754, 0.9990678, 0.9993095, 0.9995056, 0.9996606, 0.9997794, 0.9998667, 0.9999275, 0.9999664, 0.9999883, 0.9999979, 1],
        //InOutCubic
        [],
        //InQuart
        [],
        //OutQuart
        [0, 0.02149474, 0.04580051, 0.07264963, 0.1017744, 0.1329072, 0.1657803, 0.2001261, 0.2356769, 0.2721649, 0.3093225, 0.3468822, 0.384576, 0.4221365, 0.4592959, 0.4957865, 0.5313407, 0.5656908, 0.598569, 0.6297079, 0.6588395, 0.6856964, 0.7100108, 0.7315149, 0.7499413, 0.7650221, 0.7766964, 0.7873044, 0.7975798, 0.8075278, 0.8171535, 0.8264623, 0.8354591, 0.8441493, 0.852538, 0.8606305, 0.8684319, 0.8759475, 0.8831823, 0.8901417, 0.8968308, 0.9032547, 0.9094189, 0.9153283, 0.9209881, 0.9264036, 0.9315801, 0.9365226, 0.9412364, 0.9457266, 0.9499984, 0.9540572, 0.9579079, 0.961556, 0.9650064, 0.9682645, 0.9713354, 0.9742242, 0.9769363, 0.9794769, 0.981851, 0.9840639, 0.9861208, 0.9880269, 0.9897873, 0.9914074, 0.9928921, 0.9942469, 0.9954768, 0.9965871, 0.9975829, 0.9984695, 0.999252, 0.9999355, 1.000525, 1.001027, 1.001445, 1.001785, 1.002052, 1.002252, 1.002389, 1.002468, 1.002496, 1.002476, 1.002415, 1.002318, 1.002189, 1.002033, 1.001857, 1.001665, 1.001463, 1.001255, 1.001047, 1.000844, 1.000651, 1.000474, 1.000317, 1.000186, 1.000086, 1.000022, 1],
        //InOutQuart
        [],
        //InQuint
        [],
        //OutQuint
        [],
        //InOutQuint
        [],
        //InExpo
        [],
        //OutExpo
        [],
        //InOutExpo
        [],
        //InCirc
        [],
        //OutCirc
        [0, 0.05500164, 0.1049521, 0.1502692, 0.191371, 0.2286754, 0.2626002, 0.2935635, 0.3219831, 0.3482771, 0.3728631, 0.3961594, 0.4185836, 0.4334989, 0.4480481, 0.4623261, 0.4763362, 0.490081, 0.5035637, 0.5167872, 0.5297545, 0.5424686, 0.5549324, 0.5671488, 0.579121, 0.5908517, 0.602344, 0.613601, 0.6246254, 0.6354204, 0.6459888, 0.6563337, 0.6664581, 0.6763648, 0.6860569, 0.6955372, 0.704809, 0.7138748, 0.722738, 0.7314014, 0.739868, 0.7481408, 0.7562226, 0.7641165, 0.7718256, 0.7793525, 0.7867005, 0.7938726, 0.8008715, 0.8077003, 0.814362, 0.8208596, 0.8271959, 0.8333741, 0.839397, 0.8452677, 0.850989, 0.856564, 0.8619956, 0.8672869, 0.8724406, 0.8774601, 0.8823479, 0.8871073, 0.8917412, 0.8962524, 0.900644, 0.904919, 0.9090803, 0.913131, 0.917074, 0.9209121, 0.9246485, 0.928286, 0.9318277, 0.9352766, 0.9386355, 0.9419075, 0.9450955, 0.9482026, 0.9512315, 0.9541855, 0.9570674, 0.9598802, 0.9626268, 0.9653102, 0.9679334, 0.9704994, 0.9730111, 0.9754715, 0.9778836, 0.9802504, 0.9825747, 0.9848596, 0.9871081, 0.9893231, 0.9915076, 0.9936646, 0.995797, 0.9979078, 1],
        //InOutCirc
        [],
        //InElastic
        [],
        //OutElastic
        [],
        //InOutElastic
        [],
        //InBack
        [0, -0.0001529895, -0.0006022027, -0.001333007, -0.002330769, -0.003580855, -0.005068634, -0.006779472, -0.008698735, -0.01081179, -0.01310401, -0.01556075, -0.01816739, -0.02090929, -0.02377182, -0.02674034, -0.02980023, -0.03293685, -0.03613556, -0.03938174, -0.04266074, -0.04595795, -0.04925872, -0.05254842, -0.05581242, -0.05903609, -0.06220479, -0.06530388, -0.06831876, -0.07123476, -0.07403725, -0.07671164, -0.07924324, -0.08161745, -0.08381964, -0.08583514, -0.08764937, -0.08924766, -0.09061539, -0.09173793, -0.09260062, -0.09318887, -0.09348802, -0.09348344, -0.0931605, -0.09250457, -0.09150103, -0.09013521, -0.0883925, -0.08625828, -0.08371788, -0.08075672, -0.07736012, -0.07351347, -0.0692021, -0.06441142, -0.05912681, -0.05333361, -0.04701715, -0.04016288, -0.03275612, -0.02478221, -0.01622657, -0.007074509, 0.0030484, 0.01532971, 0.02976238, 0.04623429, 0.06463344, 0.08484749, 0.1067644, 0.1302721, 0.1552585, 0.1816113, 0.2092188, 0.2379684, 0.2677481, 0.2984459, 0.3299495, 0.362147, 0.3949262, 0.4281752, 0.4617813, 0.4956329, 0.5296176, 0.5636234, 0.5975382, 0.6312501, 0.6646463, 0.6976153, 0.7300448, 0.7618225, 0.7928367, 0.822975, 0.8521252, 0.8801752, 0.9070131, 0.9325265, 0.9566036, 0.979132, 1],
        //OutBack
        [0, 0.05661624, 0.1111583, 0.163666, 0.2141789, 0.2627367, 0.3093793, 0.3541462, 0.3970772, 0.438212, 0.4775904, 0.5152519, 0.5512365, 0.5855836, 0.618333, 0.6495244, 0.6791977, 0.7073924, 0.7341482, 0.759505, 0.7835023, 0.8061799, 0.8275776, 0.8477349, 0.8666916, 0.8844875, 0.9011621, 0.9167554, 0.931307, 0.9448564, 0.9574435, 0.9691079, 0.9798895, 0.9898278, 0.9989626, 1.007334, 1.014981, 1.021943, 1.028261, 1.033974, 1.039121, 1.043744, 1.04788, 1.05157, 1.054854, 1.05777, 1.06036, 1.062663, 1.064718, 1.066565, 1.068244, 1.069724, 1.070945, 1.071914, 1.072642, 1.073137, 1.073408, 1.073465, 1.073315, 1.072968, 1.072434, 1.07172, 1.070837, 1.069792, 1.068596, 1.067256, 1.065782, 1.064184, 1.062469, 1.060646, 1.058726, 1.056717, 1.054627, 1.052466, 1.050243, 1.047966, 1.045645, 1.043289, 1.040907, 1.038507, 1.036099, 1.033691, 1.031293, 1.028914, 1.026562, 1.024246, 1.021976, 1.019761, 1.017609, 1.015529, 1.013531, 1.011623, 1.009814, 1.008114, 1.006531, 1.005075, 1.003753, 1.002576, 1.001552, 1.00069, 1],
        //InOutBack
        [],
        //InBounce
        [],
        //OutBounce
        [0, 0.01199454, 0.02780658, 0.04717878, 0.06985379, 0.09557425, 0.1240828, 0.1551222, 0.1884349, 0.2237637, 0.2608512, 0.2994401, 0.3392731, 0.3800926, 0.4216415, 0.4636623, 0.5058978, 0.5480905, 0.5899832, 0.6313184, 0.6718389, 0.7112871, 0.749406, 0.785938, 0.8206259, 0.8532122, 0.8834395, 0.9110507, 0.9357885, 0.9573952, 0.9756135, 0.9901863, 0.9737608, 0.949819, 0.9268978, 0.9050645, 0.8843856, 0.8649281, 0.8467589, 0.8299447, 0.8145524, 0.8006489, 0.7883011, 0.7775756, 0.7685395, 0.7612596, 0.7558026, 0.7522354, 0.750625, 0.7510381, 0.7535416, 0.7582023, 0.7650871, 0.7742628, 0.7857963, 0.7997544, 0.816204, 0.8352119, 0.856845, 0.88117, 0.9082537, 0.9381636, 0.9709656, 0.9898012, 0.9731528, 0.9587908, 0.9466213, 0.9365504, 0.9284843, 0.9223291, 0.917991, 0.9153761, 0.9143907, 0.9149407, 0.9169325, 0.920272, 0.9248656, 0.9306193, 0.9374393, 0.9452317, 0.9539027, 0.9633585, 0.9735051, 0.9842488, 0.9954956, 1.00421, 0.9955658, 0.9879528, 0.981409, 0.9759721, 0.9716797, 0.9685695, 0.9666793, 0.9660468, 0.9667096, 0.9687054, 0.9720719, 0.9768471, 0.9830682, 0.9907733, 1],
        //InOutBounce
        [],
        //Flash
        [],
        //InFlash
        [],
        //OutFlash
        [],
        //InOutFlash
        [],
        //EaseIn
        [0, 0.0004129765, 0.001013371, 0.001801376, 0.002777183, 0.003940982, 0.005292966, 0.006833327, 0.008562256, 0.01047994, 0.01258658, 0.01488237, 0.01736748, 0.02004212, 0.02290649, 0.02596075, 0.02920512, 0.03263979, 0.03626493, 0.04008075, 0.04408744, 0.04828519, 0.05267419, 0.05725463, 0.06202671, 0.0669906, 0.07214651, 0.07749463, 0.08303516, 0.08876827, 0.09469417, 0.1008131, 0.1071251, 0.1136305, 0.1203294, 0.1272221, 0.1343087, 0.1415895, 0.1490645, 0.1567341, 0.1645984, 0.1726575, 0.1809118, 0.1893613, 0.1980063, 0.2068469, 0.2158834, 0.2251159, 0.2345447, 0.2441698, 0.2539917, 0.2640103, 0.2742258, 0.2846386, 0.2952488, 0.3060566, 0.3170621, 0.3282655, 0.3396671, 0.3512671, 0.3630656, 0.3750628, 0.3872589, 0.3996542, 0.4122487, 0.4250427, 0.4380364, 0.4512299, 0.4646236, 0.4782175, 0.4920118, 0.5060068, 0.5202026, 0.5345994, 0.5491975, 0.5639969, 0.5789979, 0.5942007, 0.6096056, 0.6252126, 0.6410218, 0.6570339, 0.6732484, 0.689666, 0.7062867, 0.7231107, 0.7401382, 0.7573696, 0.7748047, 0.7924439, 0.8102874, 0.8283354, 0.846588, 0.8650456, 0.8837081, 0.9025759, 0.921649, 0.9409279, 0.9604125, 0.9801031, 1],
        //EaseOut
        [0, 0.0199, 0.0396, 0.0591, 0.0784, 0.0975, 0.1164, 0.1351, 0.1536, 0.1719, 0.19, 0.2079, 0.2256, 0.2431, 0.2604, 0.2775, 0.2944, 0.3111, 0.3276, 0.3439, 0.36, 0.3759, 0.3916, 0.4071, 0.4224, 0.4375, 0.4524, 0.4671, 0.4816, 0.4959, 0.51, 0.5239, 0.5376, 0.5511, 0.5644, 0.5775, 0.5904, 0.6031, 0.6156, 0.6279, 0.64, 0.6519, 0.6636, 0.6751, 0.6864, 0.6974999, 0.7084, 0.7191, 0.7296, 0.7399, 0.75, 0.7599, 0.7696, 0.7791, 0.7884, 0.7975, 0.8064001, 0.8151, 0.8236, 0.8319, 0.84, 0.8479, 0.8556, 0.8631, 0.8704, 0.8775, 0.8844, 0.8911, 0.8975999, 0.9039, 0.91, 0.9158999, 0.9215999, 0.9270999, 0.9324, 0.9375, 0.9424, 0.9471, 0.9516, 0.9559, 0.96, 0.9639, 0.9676, 0.9711, 0.9744, 0.9775, 0.9804, 0.9831, 0.9856, 0.9879, 0.99, 0.9919, 0.9936, 0.9951, 0.9963999, 0.9974999, 0.9983999, 0.9991, 0.9995999, 0.9998999, 1],
        //EaseInOut
        [0, 0.000298, 0.001184, 0.002646, 0.004672, 0.007249999, 0.010368, 0.014014, 0.018176, 0.022842, 0.028, 0.033638, 0.039744, 0.046306, 0.053312, 0.06074999, 0.06860799, 0.076874, 0.085536, 0.09458199, 0.104, 0.113778, 0.123904, 0.134366, 0.145152, 0.15625, 0.167648, 0.179334, 0.191296, 0.203522, 0.216, 0.228718, 0.241664, 0.254826, 0.268192, 0.28175, 0.295488, 0.309394, 0.323456, 0.337662, 0.352, 0.366458, 0.381024, 0.395686, 0.410432, 0.42525, 0.4401279, 0.455054, 0.470016, 0.485002, 0.5, 0.514998, 0.5299839, 0.544946, 0.559872, 0.57475, 0.589568, 0.604314, 0.6189759, 0.6335419, 0.6479999, 0.662338, 0.676544, 0.690606, 0.704512, 0.71825, 0.7318079, 0.745174, 0.758336, 0.771282, 0.784, 0.7964779, 0.8087039, 0.820666, 0.832352, 0.84375, 0.854848, 0.865634, 0.876096, 0.886222, 0.896, 0.905418, 0.9144641, 0.923126, 0.931392, 0.93925, 0.946688, 0.953694, 0.960256, 0.9663621, 0.972, 0.977158, 0.981824, 0.985986, 0.9896321, 0.9927499, 0.995328, 0.997354, 0.9988161, 0.999702, 1],
        //BounceIn
        [0, -0.01632952, -0.03179857, -0.04641721, -0.0601955, -0.0731435, -0.08527126, -0.09658885, -0.1071063, -0.1168337, -0.1257811, -0.1339586, -0.1413762, -0.1480439, -0.1539719, -0.1591701, -0.1636487, -0.1674177, -0.1704872, -0.1728671, -0.1745677, -0.1755989, -0.1759708, -0.1756934, -0.1747768, -0.1732311, -0.1710663, -0.1682925, -0.1649198, -0.1609581, -0.1564176, -0.1513083, -0.1456403, -0.1394235, -0.1326682, -0.1253843, -0.117582, -0.1092711, -0.1004619, -0.0911644, -0.08138866, -0.0711446, -0.06044247, -0.04929222, -0.03770392, -0.02568768, -0.01325349, -0.0004114163, 0.01282843, 0.02645598, 0.0404613, 0.05483422, 0.06956473, 0.08464272, 0.1000581, 0.1158011, 0.1318613, 0.1482288, 0.1648934, 0.1818454, 0.1990744, 0.2165705, 0.2343235, 0.2523234, 0.2705603, 0.289024, 0.3077043, 0.3265914, 0.3456753, 0.3649457, 0.3843926, 0.4040061, 0.4237758, 0.4436919, 0.4637446, 0.4839233, 0.504218, 0.5246191, 0.5451163, 0.5656992, 0.5863582, 0.6070833, 0.6278641, 0.6486908, 0.6695528, 0.6904408, 0.7113444, 0.7322536, 0.7531583, 0.7740482, 0.7949134, 0.8157441, 0.8365301, 0.8572615, 0.8779277, 0.8985191, 0.9190258, 0.939437, 0.9597432, 0.9799345, 1],
        //BounceOut
        [0, 0.01019431, 0.0207694, 0.03171348, 0.04301479, 0.05466154, 0.06664196, 0.07894427, 0.0915567, 0.1044675, 0.1176648, 0.1311369, 0.144872, 0.1588584, 0.1730842, 0.1875377, 0.2022071, 0.2170806, 0.2321465, 0.2473929, 0.2628081, 0.2783804, 0.2940979, 0.3099489, 0.3259215, 0.3420042, 0.3581848, 0.3744519, 0.3907936, 0.4071981, 0.4236535, 0.4401483, 0.4566705, 0.4732085, 0.4897504, 0.5062844, 0.5227987, 0.5392817, 0.5557215, 0.5721064, 0.5884244, 0.6046641, 0.6208134, 0.6368606, 0.652794, 0.6686019, 0.6842722, 0.6997935, 0.7151538, 0.7303413, 0.7453444, 0.7601511, 0.7747499, 0.7891287, 0.8032761, 0.81718, 0.8308288, 0.8442106, 0.8573137, 0.8701263, 0.8826367, 0.8948331, 0.9067035, 0.9182365, 0.92942, 0.9402424, 0.9506919, 0.9607566, 0.9704249, 0.9796849, 0.988525, 0.9969332, 1.004898, 1.012407, 1.019449, 1.026012, 1.032085, 1.037655, 1.042711, 1.047241, 1.051233, 1.054675, 1.057556, 1.059864, 1.061587, 1.062714, 1.063231, 1.063129, 1.062395, 1.061017, 1.058983, 1.056282, 1.052902, 1.048831, 1.044057, 1.038569, 1.032355, 1.025403, 1.017701, 1.009237, 1],
        //BounceInOut
        [0, -0.01990709, -0.03804972, -0.05446344, -0.06918374, -0.08224615, -0.0936862, -0.1035394, -0.1118412, -0.1186273, -0.123933, -0.127794, -0.1302456, -0.1313236, -0.1310633, -0.1295003, -0.1266701, -0.1226083, -0.1173503, -0.1109316, -0.1033879, -0.0947545, -0.08506703, -0.07436106, -0.062672, -0.05003542, -0.03648681, -0.02206179, -0.006795683, 0.009275801, 0.0261172, 0.04369316, 0.06196785, 0.08090597, 0.100472, 0.1206303, 0.1413455, 0.162582, 0.1843042, 0.2064767, 0.229064, 0.2520306, 0.2753407, 0.2989593, 0.3228503, 0.3469786, 0.3713086, 0.3958046, 0.4204313, 0.4451529, 0.4699343, 0.4947397, 0.5195336, 0.5442805, 0.5689449, 0.5934914, 0.6178842, 0.6420881, 0.6660672, 0.6897861, 0.7132099, 0.7363023, 0.7590281, 0.7813517, 0.8032374, 0.8246502, 0.845554, 0.8659139, 0.885694, 0.9048587, 0.9233726, 0.9412, 0.9583058, 0.9746542, 0.9902101, 1.004937, 1.0188, 1.031764, 1.043793, 1.054851, 1.064904, 1.073915, 1.081849, 1.08867, 1.094344, 1.098834, 1.102104, 1.10412, 1.104846, 1.104247, 1.102286, 1.098929, 1.094139, 1.087881, 1.080121, 1.070822, 1.059948, 1.047465, 1.033336, 1.017527, 1],
        //BuyuGold1
        [0, 0.0007591778, 0.01331668, 0.03578163, 0.06578314, 0.1024687, 0.1449858, 0.1924818, 0.2441043, 0.2990007, 0.3563185, 0.4152052, 0.4748082, 0.534275, 0.5927531, 0.6493899, 0.7033329, 0.7537296, 0.7997275, 0.8404741, 0.8751166, 0.9028028, 0.9232153, 0.9375508, 0.9464056, 0.9503277, 0.9498648, 0.9455649, 0.9379756, 0.9276451, 0.915121, 0.894859, 0.8612478, 0.8161423, 0.7614063, 0.6989037, 0.6304983, 0.5580535, 0.4834335, 0.408502, 0.3351226, 0.265159, 0.2004753, 0.142935, 0.0944019, 0.05673993, 0.03181273, 0.02148414, 0.02450721, 0.03520183, 0.05253629, 0.07561658, 0.1035489, 0.1354394, 0.1703941, 0.2075195, 0.2459211, 0.2847054, 0.3229785, 0.3598465, 0.3944156, 0.4257919, 0.4530814, 0.4753903, 0.4918247, 0.5014908, 0.5034947, 0.4934821, 0.4663568, 0.4253525, 0.3738844, 0.3153675, 0.2532169, 0.190848, 0.1316754, 0.07911509, 0.03658184, 0.007490873, 0.004742682, 0.003296256, 0.02357885, 0.04532585, 0.06796149, 0.09091046, 0.1135973, 0.1354466, 0.1558828, 0.1743306, 0.1902144, 0.2029588, 0.2119884, 0.2167276, 0.2166011, 0.2110333, 0.1994489, 0.1812724, 0.1559282, 0.1228411, 0.08143555, 0.03113598, 0],
    ];
    return XTweenCurv;
}());
exports.XTweenCurv = XTweenCurv;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Modules/Views/ViewOpenNetworking.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '5243b4RpmlERYovIUbN307d', 'ViewOpenNetworking');
// Scripts/Modules/Views/ViewOpenNetworking.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var View_1 = require("../../MVCFramework/View");
var TimerManager_1 = require("../../Components/TimerManager");
var ViewOpenNetworking = /** @class */ (function (_super) {
    __extends(ViewOpenNetworking, _super);
    function ViewOpenNetworking() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ViewOpenNetworking.prototype.OnAwake = function () {
        // this.LabelLoading = this.FindTransform("LabelLoading").getComponent(cc.Label);
        // this.LabelLoading.node.active = false;
        this.Content = this.FindTransform("Content");
        this.Content.active = false;
    };
    ViewOpenNetworking.prototype.Refresh = function (content) {
        var _this = this;
        this.timerID = TimerManager_1.default.GetInstance().CallActionDelay(function () {
            // this.LabelLoading.node.active = true;
            _this.Content.active = true;
        }, 1);
        if (content != "")
            this.LabelLoading.string = content;
    };
    ViewOpenNetworking.prototype.OnShowView = function () {
    };
    ViewOpenNetworking.prototype.OnHideView = function () {
        TimerManager_1.default.GetInstance().DeleteTimer(this.timerID);
        // this.LabelLoading.node.active = false;
        this.Content.active = false;
    };
    return ViewOpenNetworking;
}(View_1.default));
exports.default = ViewOpenNetworking;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTW9kdWxlc1xcVmlld3NcXFZpZXdPcGVuTmV0d29ya2luZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxnREFBMkM7QUFDM0MsOERBQXlEO0FBRXpEO0lBQWdELHNDQUFJO0lBQXBEOztJQXNDQSxDQUFDO0lBL0JVLG9DQUFPLEdBQWQ7UUFFSSxpRkFBaUY7UUFDakYseUNBQXlDO1FBRXpDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUVNLG9DQUFPLEdBQWQsVUFBZSxPQUFjO1FBQTdCLGlCQVFDO1FBTkcsSUFBSSxDQUFDLE9BQU8sR0FBRyxzQkFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLGVBQWUsQ0FBQztZQUN0RCx3Q0FBd0M7WUFDeEMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQy9CLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztRQUNMLElBQUcsT0FBTyxJQUFJLEVBQUU7WUFDWixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUM7SUFDM0MsQ0FBQztJQUVNLHVDQUFVLEdBQWpCO0lBR0EsQ0FBQztJQUVNLHVDQUFVLEdBQWpCO1FBRUksc0JBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JELHlDQUF5QztRQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUVMLHlCQUFDO0FBQUQsQ0F0Q0EsQUFzQ0MsQ0F0QytDLGNBQUksR0FzQ25EIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZpZXcgZnJvbSBcIi4uLy4uL01WQ0ZyYW1ld29yay9WaWV3XCI7XG5pbXBvcnQgVGltZXJNYW5hZ2VyIGZyb20gXCIuLi8uLi9Db21wb25lbnRzL1RpbWVyTWFuYWdlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaWV3T3Blbk5ldHdvcmtpbmcgZXh0ZW5kcyBWaWV3IFxue1xuICAgIHByaXZhdGUgTGFiZWxMb2FkaW5nOmNjLkxhYmVsO1xuXG4gICAgcHJpdmF0ZSB0aW1lcklEO1xuICAgIHByaXZhdGUgQ29udGVudDpjYy5Ob2RlO1xuXG4gICAgcHVibGljIE9uQXdha2UoKVxuICAgIHtcbiAgICAgICAgLy8gdGhpcy5MYWJlbExvYWRpbmcgPSB0aGlzLkZpbmRUcmFuc2Zvcm0oXCJMYWJlbExvYWRpbmdcIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKTtcbiAgICAgICAgLy8gdGhpcy5MYWJlbExvYWRpbmcubm9kZS5hY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLkNvbnRlbnQgPSB0aGlzLkZpbmRUcmFuc2Zvcm0oXCJDb250ZW50XCIpO1xuICAgICAgICB0aGlzLkNvbnRlbnQuYWN0aXZlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHVibGljIFJlZnJlc2goY29udGVudDpzdHJpbmcpXG4gICAge1xuICAgICAgICB0aGlzLnRpbWVySUQgPSBUaW1lck1hbmFnZXIuR2V0SW5zdGFuY2UoKS5DYWxsQWN0aW9uRGVsYXkoKCk9PntcbiAgICAgICAgICAgIC8vIHRoaXMuTGFiZWxMb2FkaW5nLm5vZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuQ29udGVudC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB9LDEpO1xuICAgICAgICBpZihjb250ZW50ICE9IFwiXCIpXG4gICAgICAgICAgICB0aGlzLkxhYmVsTG9hZGluZy5zdHJpbmcgPSBjb250ZW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBPblNob3dWaWV3KClcbiAgICB7XG4gICAgICAgIFxuICAgIH1cblxuICAgIHB1YmxpYyBPbkhpZGVWaWV3KClcbiAgICB7XG4gICAgICAgIFRpbWVyTWFuYWdlci5HZXRJbnN0YW5jZSgpLkRlbGV0ZVRpbWVyKHRoaXMudGltZXJJRCk7XG4gICAgICAgIC8vIHRoaXMuTGFiZWxMb2FkaW5nLm5vZGUuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuQ29udGVudC5hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG5cbn1cbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/XTweenerPosition.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '64670fsiRRBEIG2Q1S24D4y', 'XTweenerPosition');
// Scripts/Tools/XTween/XTweenerPosition.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var XTweener_1 = require("./Base/XTweener");
var XTweenCurv_1 = require("./Base/XTweenCurv");
var XTweenerPosition = /** @class */ (function (_super) {
    __extends(XTweenerPosition, _super);
    function XTweenerPosition() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.vec2Tmp = cc.Vec2.ZERO;
        return _this;
    }
    XTweenerPosition.prototype.Init = function (target, startValue, endValue, duration, playTimes, pingPong, curv) {
        if (curv === void 0) { curv = XTweenCurv_1.XTweenCurvType.Liner; }
        this.SetTarget(target);
        this.startValue = startValue;
        this.endValue = endValue;
        this.duration = duration;
        this.InitTweenerData(playTimes, pingPong, curv);
        // this.curvType = curv;
        // this.pingPong = pingPong;
        // this.repeatTimes = playTimes;
    };
    XTweenerPosition.prototype.Update = function (deltaTime) {
        _super.prototype.Update.call(this, deltaTime);
        if (this.beReplaced == true) {
            this.CheckFinish();
            return;
        }
        this.vec2Tmp.x = this.startValue.x + (this.endValue.x - this.startValue.x) * this.animationProgress;
        this.vec2Tmp.y = this.startValue.y + (this.endValue.y - this.startValue.y) * this.animationProgress;
        this.target.position = this.vec2Tmp;
        this.CheckFinish();
    };
    XTweenerPosition.prototype.OnPlay = function () {
        if (this.startValue == null) {
            this.startValue = this.target.position;
        }
    };
    XTweenerPosition.prototype.GetTypeMark = function () {
        return "XTweenerPosition";
    };
    return XTweenerPosition;
}(XTweener_1.default));
exports.default = XTweenerPosition;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFhUd2VlblxcWFR3ZWVuZXJQb3NpdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0Q0FBdUM7QUFDdkMsZ0RBQW1EO0FBR25EO0lBQThDLG9DQUFRO0lBQXREO1FBQUEscUVBdURDO1FBbERXLGFBQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7SUFrRDNDLENBQUM7SUFoRFUsK0JBQUksR0FBWCxVQUNJLE1BQWMsRUFDZCxVQUFrQixFQUNsQixRQUFnQixFQUNoQixRQUFlLEVBQ2YsU0FBZ0IsRUFDaEIsUUFBZ0IsRUFDaEIsSUFBeUI7UUFBekIscUJBQUEsRUFBQSxPQUFLLDJCQUFjLENBQUMsS0FBSztRQUl6QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFDLFFBQVEsRUFBQyxJQUFJLENBQUMsQ0FBQztRQUM5Qyx3QkFBd0I7UUFDeEIsNEJBQTRCO1FBQzVCLGdDQUFnQztJQUNwQyxDQUFDO0lBRU0saUNBQU0sR0FBYixVQUFjLFNBQVM7UUFFbkIsaUJBQU0sTUFBTSxZQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hCLElBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQzFCO1lBQ0ksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ25CLE9BQU87U0FDVjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUM7UUFDcEcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUVwRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRU0saUNBQU0sR0FBYjtRQUVJLElBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQzFCO1lBQ0ksSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztTQUMxQztJQUNMLENBQUM7SUFFTSxzQ0FBVyxHQUFsQjtRQUVJLE9BQU8sa0JBQWtCLENBQUM7SUFDOUIsQ0FBQztJQUNMLHVCQUFDO0FBQUQsQ0F2REEsQUF1REMsQ0F2RDZDLGtCQUFRLEdBdURyRCIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBYVHdlZW5lciBmcm9tIFwiLi9CYXNlL1hUd2VlbmVyXCI7XG5pbXBvcnQgeyBYVHdlZW5DdXJ2VHlwZSB9IGZyb20gXCIuL0Jhc2UvWFR3ZWVuQ3VydlwiO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhUd2VlbmVyUG9zaXRpb24gZXh0ZW5kcyBYVHdlZW5lciBcbntcbiAgICBwcml2YXRlIHN0YXJ0VmFsdWU6Y2MuVmVjMjtcbiAgICBwcml2YXRlIGVuZFZhbHVlOmNjLlZlYzI7XG5cbiAgICBwcml2YXRlIHZlYzJUbXA6Y2MuVmVjMiA9IGNjLlZlYzIuWkVSTztcblxuICAgIHB1YmxpYyBJbml0KFxuICAgICAgICB0YXJnZXQ6Y2MuTm9kZSxcbiAgICAgICAgc3RhcnRWYWx1ZTpjYy5WZWMyLFxuICAgICAgICBlbmRWYWx1ZTpjYy5WZWMyLFxuICAgICAgICBkdXJhdGlvbjpudW1iZXIsXG4gICAgICAgIHBsYXlUaW1lczpudW1iZXIsXG4gICAgICAgIHBpbmdQb25nOmJvb2xlYW4sXG4gICAgICAgIGN1cnY9WFR3ZWVuQ3VydlR5cGUuTGluZXIsXG4gICAgKVxuICAgIHtcblxuICAgICAgICB0aGlzLlNldFRhcmdldCh0YXJnZXQpO1xuICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlO1xuICAgICAgICB0aGlzLmVuZFZhbHVlID0gZW5kVmFsdWU7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5Jbml0VHdlZW5lckRhdGEocGxheVRpbWVzLHBpbmdQb25nLGN1cnYpO1xuICAgICAgICAvLyB0aGlzLmN1cnZUeXBlID0gY3VydjtcbiAgICAgICAgLy8gdGhpcy5waW5nUG9uZyA9IHBpbmdQb25nO1xuICAgICAgICAvLyB0aGlzLnJlcGVhdFRpbWVzID0gcGxheVRpbWVzO1xuICAgIH1cblxuICAgIHB1YmxpYyBVcGRhdGUoZGVsdGFUaW1lKVxuICAgIHtcbiAgICAgICAgc3VwZXIuVXBkYXRlKGRlbHRhVGltZSk7XG4gICAgICAgIGlmKHRoaXMuYmVSZXBsYWNlZCA9PSB0cnVlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLkNoZWNrRmluaXNoKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52ZWMyVG1wLnggPSB0aGlzLnN0YXJ0VmFsdWUueCArICh0aGlzLmVuZFZhbHVlLnggLSB0aGlzLnN0YXJ0VmFsdWUueCkgKiB0aGlzLmFuaW1hdGlvblByb2dyZXNzO1xuICAgICAgICB0aGlzLnZlYzJUbXAueSA9IHRoaXMuc3RhcnRWYWx1ZS55ICsgKHRoaXMuZW5kVmFsdWUueSAtIHRoaXMuc3RhcnRWYWx1ZS55KSAqIHRoaXMuYW5pbWF0aW9uUHJvZ3Jlc3M7XG5cbiAgICAgICAgdGhpcy50YXJnZXQucG9zaXRpb24gPSB0aGlzLnZlYzJUbXA7XG4gICAgICAgIHRoaXMuQ2hlY2tGaW5pc2goKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgT25QbGF5KClcbiAgICB7XG4gICAgICAgIGlmKHRoaXMuc3RhcnRWYWx1ZSA9PSBudWxsKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSB0aGlzLnRhcmdldC5wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBHZXRUeXBlTWFyaygpXG4gICAge1xuICAgICAgICByZXR1cm4gXCJYVHdlZW5lclBvc2l0aW9uXCI7XG4gICAgfVxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/Base/XTweenGlobal.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '3377f+pHR5Ex50XcjGbr92v', 'XTweenGlobal');
// Scripts/Tools/XTween/Base/XTweenGlobal.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var XTweenerState;
(function (XTweenerState) {
    XTweenerState[XTweenerState["BeforePlay"] = 0] = "BeforePlay";
    XTweenerState[XTweenerState["Playing"] = 1] = "Playing";
    XTweenerState[XTweenerState["Pause"] = 2] = "Pause";
    XTweenerState[XTweenerState["End"] = 3] = "End";
})(XTweenerState = exports.XTweenerState || (exports.XTweenerState = {}));

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFhUd2VlblxcQmFzZVxcWFR3ZWVuR2xvYmFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBWSxhQU1YO0FBTkQsV0FBWSxhQUFhO0lBRXJCLDZEQUFVLENBQUE7SUFDVix1REFBTyxDQUFBO0lBQ1AsbURBQUssQ0FBQTtJQUNMLCtDQUFHLENBQUE7QUFDUCxDQUFDLEVBTlcsYUFBYSxHQUFiLHFCQUFhLEtBQWIscUJBQWEsUUFNeEIiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBYVHdlZW5lclN0YXRlXG57XG4gICAgQmVmb3JlUGxheSxcbiAgICBQbGF5aW5nLFxuICAgIFBhdXNlLFxuICAgIEVuZCxcbn0iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/Base/XTweenerGroup.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6ec11j1xstK9qiepqC+0PvE', 'XTweenerGroup');
// Scripts/Tools/XTween/Base/XTweenerGroup.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var XTweenGlobal_1 = require("./XTweenGlobal");
var XTweenUpdater_1 = require("./XTweenUpdater");
var XTweenerGroupQueueItem_1 = require("./XTweenerGroupQueueItem");
var Util_1 = require("../../Util");
var XTweenObserver_1 = require("./XTweenObserver");
var XTweenerGroup = /** @class */ (function () {
    function XTweenerGroup() {
        this.delay = 0;
        this.state = XTweenGlobal_1.XTweenerState.BeforePlay;
        this.controlByParent = false;
        this.listQueueItems = [];
        this.speed = 1;
        this.shouldCallback = true;
    }
    XTweenerGroup.prototype.SetTweenerData = function (data) {
        this.data = data;
    };
    XTweenerGroup.prototype.GetTweenerData = function () {
        return this.data;
    };
    XTweenerGroup.prototype.SetDelay = function (delay) {
        this.delay = delay;
    };
    XTweenerGroup.prototype.GetDelay = function () {
        return this.delay;
    };
    XTweenerGroup.prototype.Play = function () {
        if (this.state == XTweenGlobal_1.XTweenerState.BeforePlay) {
            if (this.startCallback != null) {
                this.startCallback();
            }
        }
        this.state = XTweenGlobal_1.XTweenerState.Playing;
        if (this.controlByParent == false) {
            XTweenUpdater_1.default.GetInstance().AddTweener(this);
        }
    };
    XTweenerGroup.prototype.Finish = function (shouldCallback) {
        if (shouldCallback === void 0) { shouldCallback = true; }
        this.state = XTweenGlobal_1.XTweenerState.End;
        this.shouldCallback = shouldCallback;
    };
    XTweenerGroup.prototype.Pause = function () {
        if (this.state == XTweenGlobal_1.XTweenerState.Playing) {
            this.state = XTweenGlobal_1.XTweenerState.Pause;
        }
    };
    XTweenerGroup.prototype.Resume = function () {
        if (this.state == XTweenGlobal_1.XTweenerState.Pause) {
            this.state = XTweenGlobal_1.XTweenerState.Playing;
        }
    };
    XTweenerGroup.prototype.SetSpeed = function (speed) {
        this.speed = speed;
    };
    XTweenerGroup.prototype.SetStartCallback = function (startCallback) {
        this.startCallback = startCallback;
    };
    XTweenerGroup.prototype.SetFinishCallback = function (finishCallback) {
        this.finishCallback = finishCallback;
    };
    XTweenerGroup.prototype.GetState = function () {
        return this.state;
    };
    XTweenerGroup.prototype.SetControlByParent = function () {
        this.controlByParent = true;
    };
    XTweenerGroup.prototype.Update = function (deltaTime) {
        if (this.state == XTweenGlobal_1.XTweenerState.End)
            return;
        if (this.listQueueItems.length > 0) {
            this.listQueueItems[0].Update(deltaTime);
            if (this.listQueueItems[0].CheckFinish() == true) {
                Util_1.default.RemoveArray(this.listQueueItems, 0);
            }
        }
        if (this.listQueueItems.length == 0) {
            this.state = XTweenGlobal_1.XTweenerState.End;
        }
        if (this.state == XTweenGlobal_1.XTweenerState.End) {
            if (this.observer != null) {
                this.observer.RemoveTweener(this);
            }
            if (this.finishCallback != null && this.shouldCallback == true) {
                this.finishCallback();
            }
        }
    };
    XTweenerGroup.prototype.GetTypeMark = function () {
        return "XTweenerGroup";
    };
    XTweenerGroup.prototype.GetControlByParent = function () {
        return this.controlByParent;
    };
    XTweenerGroup.prototype.AddTweener = function (tweener, addMode) {
        tweener.SetControlByParent();
        var queueItem = null;
        if (addMode == XTweenerGroupAddMode.Queue || this.listQueueItems.length == 0) {
            queueItem = new XTweenerGroupQueueItem_1.default();
            this.listQueueItems.push(queueItem);
        }
        else {
            queueItem = this.listQueueItems[this.listQueueItems.length - 1];
        }
        queueItem.AddTweener(tweener);
    };
    XTweenerGroup.prototype.BeReplaced = function () {
        //do nothing
    };
    XTweenerGroup.prototype.OnEnable = function () {
        //do nothing
    };
    XTweenerGroup.prototype.OnDisable = function () {
        //终止整个tween
        this.state = XTweenGlobal_1.XTweenerState.End;
        this.observer.RemoveTweener(this);
    };
    XTweenerGroup.prototype.OnDestroy = function () {
        //终止整个tween
        this.state = XTweenGlobal_1.XTweenerState.End;
        this.observer.RemoveTweener(this);
    };
    /**
     * 增加ObserverObj后，如果ObserverObj active改变成false，就会停止后续的回调
     * @param target
     */
    XTweenerGroup.prototype.AddObserverObj = function (target) {
        this.observer = target.getComponent(XTweenObserver_1.default);
        if (this.observer == null) {
            this.observer = target.addComponent(XTweenObserver_1.default);
        }
        this.observer.AddXTweener(this);
    };
    return XTweenerGroup;
}());
exports.default = XTweenerGroup;
var XTweenerGroupAddMode = /** @class */ (function () {
    function XTweenerGroupAddMode() {
    }
    XTweenerGroupAddMode.Queue = 1;
    XTweenerGroupAddMode.Parallel = 2;
    return XTweenerGroupAddMode;
}());
exports.XTweenerGroupAddMode = XTweenerGroupAddMode;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Network/Socket/DataPacket.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0f2c3a4rqVJYYCDqmzl8Dgb', 'DataPacket');
// Scripts/Network/Socket/DataPacket.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Package = /** @class */ (function () {
    function Package() {
    }
    return Package;
}());
exports.Package = Package;
var DataPacket = /** @class */ (function () {
    function DataPacket() {
    }
    DataPacket.Packet = function (id, seq, data) {
        if (data == null) {
            data = new Uint8Array(0);
        }
        var lengthData = data.length;
        var length = lengthData + 18;
        var finalData = new Uint8Array(length);
        var msgType;
        if (id == 0 || id == 1) {
            msgType = 0;
        }
        else {
            msgType = 1;
        }
        var id1 = id & 255;
        var id2 = (id >> 8) & 255;
        var id3 = (id >> 16) & 255;
        var id4 = (id >> 24) & 255;
        var seq1 = seq & 255;
        var seq2 = (seq >> 8) & 255;
        var seq3 = (seq >> 16) & 255;
        var seq4 = (seq >> 24) & 255;
        var length1 = length & 255;
        var length2 = (length >> 8) & 255;
        var length3 = (length >> 16) & 255;
        var length4 = (length >> 24) & 255;
        var lengthData1 = lengthData & 255;
        var lengthData2 = (lengthData >> 8) & 255;
        var lengthData3 = (lengthData >> 16) & 255;
        var lengthData4 = (lengthData >> 24) & 255;
        var platform = 0;
        finalData[0] = length4;
        finalData[1] = length3;
        finalData[2] = length2;
        finalData[3] = length1;
        finalData[4] = msgType;
        finalData[5] = platform;
        finalData[6] = seq4;
        finalData[7] = seq3;
        finalData[8] = seq2;
        finalData[9] = seq1;
        finalData[10] = id4;
        finalData[11] = id3;
        finalData[12] = id2;
        finalData[13] = id1;
        finalData[14] = lengthData4;
        finalData[15] = lengthData3;
        finalData[16] = lengthData2;
        finalData[17] = lengthData1;
        finalData.set(data, 18);
        return finalData;
    };
    DataPacket.TryUnpacket = function (data) {
        if (data.length < 4) {
            return false;
        }
        var length = data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];
        if (data.length < length) {
            return false;
        }
        return true;
    };
    DataPacket.UnPacket = function (data, packageArray) {
        if (this.TryUnpacket(data) == false) {
            return data;
        }
        var length = data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];
        var msgType = data[4];
        var platform = data[5];
        var seq = data[6] << 24 | data[7] << 16 | data[8] << 8 | data[9];
        var msgID = data[10] << 24 | data[11] << 16 | data[12] << 8 | data[13];
        var lengthData = data[14] << 24 | data[15] << 16 | data[16] << 8 | data[17];
        // cc.error("UnPacket data " + data);
        // cc.error("UnPacket seq " + seq + " length " + length + " msgID " + msgID);
        var pack = new Package();
        pack.data = data.subarray(18, 18 + lengthData);
        // pack.length = length;
        pack.msgID = msgID;
        pack.seq = seq;
        packageArray.push(pack);
        if (data.length > length) {
            data = data.subarray(length, data.length - 1);
            return this.UnPacket(data, packageArray);
        }
        return new Uint8Array(0);
    };
    return DataPacket;
}());
exports.default = DataPacket;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Components/ListView.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '52fbf+BV5pNaae/fRvBUEeK', 'ListView');
// Scripts/Components/ListView.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Tools/Util");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var ListView = /** @class */ (function (_super) {
    __extends(ListView, _super);
    function ListView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.unuseCell = [];
        _this.usingCell = {};
        _this.posForRows = [];
        _this.spaceForRows = [];
        _this.offset = 0;
        _this.lastOffset = 0;
        _this.currentStartRow = -1;
        _this.currentEndRow = -1;
        _this.lastStartRow = -1;
        _this.lastEndRow = -1;
        _this.currentRows = 0;
        _this.tmpOffset = 0;
        return _this;
    }
    //<<----------------data
    /**
     * listview 初始化
     * @param [scrollstyle] 样式
     * @param [spacingForRowCallback] 返回行高，可动态改变
     * @param [countOfRowsCallback] 返回行数，可动态改变
     * @param [getCellCallback] 返回一个新建的cell，可以继承Cell类
     * @param [cellForRow] 每当要刷新一个cell的时候会回调
     */
    ListView.prototype.Init = function (scrollstyle, spacingForRowCallback, countOfRowsCallback, getCellCallback, cellForRow) {
        var _this = this;
        this.spacingForRowCallback = spacingForRowCallback;
        this.countOfRowsCallback = countOfRowsCallback;
        this.getCellCallback = getCellCallback;
        this.cellForRow = cellForRow;
        this.scrollstyle = scrollstyle;
        this.scrollview = this.node.addComponent(cc.ScrollView);
        var view = new cc.Node("view");
        this.node.addChild(view);
        view.position = cc.Vec2.ZERO;
        view.setContentSize(this.node.getContentSize());
        var mask = view.addComponent(cc.Mask);
        mask.type = cc.Mask.Type.RECT;
        this.contentView = new cc.Node("content");
        view.addChild(this.contentView);
        this.contentView.position = cc.Vec2.ZERO;
        this.contentView.setContentSize(this.node.getContentSize());
        this.scrollview.content = this.contentView;
        //TODO:
        if (this.scrollstyle == ListViewScrollStyle.Top) {
            this.node.anchorX = 0.5;
            this.node.anchorY = 1;
            var pos = this.node.position;
            pos.y += 0.5 * this.node.getContentSize().height;
            this.node.setPosition(pos);
            view.anchorX = 0.5;
            view.anchorY = 1;
            this.contentView.anchorX = 0.5;
            this.contentView.anchorY = 1;
            this.scrollview.vertical = true;
            this.scrollview.horizontal = false;
        }
        Util_1.default.SetScrollViewScrollEvent(this.scrollview, function (scrollView, eventType, data) {
            if (eventType == cc.ScrollView.EventType.SCROLL_TO_BOTTOM) {
                if (_this.scrollBottomShouldCallback) {
                    if (_this.actionScrollBottomCallback != null) {
                        _this.actionScrollBottomCallback();
                    }
                }
            }
        });
    };
    ListView.prototype.SetVerticalScrollBar = function (scrollbar) {
        this.scrollview.verticalScrollBar = scrollbar;
        // if(this.scrollstyle == ListViewScrollStyle.Top)
        // {
        //     scrollbar.node.anchorX = 0.5;
        //     scrollbar.node.anchorY = 1;
        //     let pos = scrollbar.node.position;
        //     pos.y = 0;
        //     scrollbar.node.setPosition(pos);
        // }
    };
    ListView.prototype.SetHorizontalScrollBar = function (scrollbar) {
        this.scrollview.horizontalScrollBar = scrollbar;
    };
    ListView.prototype.Refresh = function () {
        this.posForRows = [];
        this.spaceForRows = [];
        this.totalHeight = 0;
        var countOfRows = this.countOfRowsCallback();
        // ccC.error("Refresh countOfRows  " + countOfRows);
        this.currentRows = countOfRows;
        for (var i = 0; i < countOfRows; i++) {
            var space = this.spacingForRowCallback(i);
            this.posForRows.push(this.totalHeight);
            this.spaceForRows.push(space);
            this.totalHeight += space;
        }
        if (this.scrollstyle == ListViewScrollStyle.Top) {
            this.contentView.height = this.totalHeight;
            if (this.scrollview.getScrollOffset().y > this.totalHeight - this.scrollview.node.getContentSize.length) {
                this.scrollview.scrollToOffset(new cc.Vec2(0, this.totalHeight - this.scrollview.node.getContentSize.length));
            }
        }
        this.ShowCurrentRows(true);
    };
    ListView.prototype.ScrollToTop = function () {
        this.scrollview.scrollToTop();
    };
    ListView.prototype.GetRowsShouldShow = function (forceRefresh) {
        if (this.offset == this.lastOffset && forceRefresh == false)
            return;
        if (this.offset <= 0) {
            this.currentStartRow = 0;
        }
        else {
            if (this.offset > this.lastOffset) {
                for (var i = this.currentStartRow; i < this.posForRows.length; i++) {
                    this.currentStartRow = i;
                    if (this.posForRows[i] == this.offset
                        || (this.posForRows[i] < this.offset && this.posForRows[i] + this.spaceForRows[i] > this.offset))
                        break;
                }
            }
            else {
                for (var i = this.currentStartRow; i >= 0; i--) {
                    this.currentStartRow = i;
                    if (this.posForRows[i] == this.offset
                        || (this.posForRows[i] < this.offset && this.posForRows[i] + this.spaceForRows[i] > this.offset))
                        break;
                }
            }
        }
        for (var i = this.currentStartRow; i < this.posForRows.length; i++) {
            this.currentEndRow = i;
            if (this.posForRows[i] + this.spaceForRows[i] > this.offset + this.node.height)
                break;
        }
        // ccC.error(
        //     " this.offset " + this.offset 
        // + " this.lastStartRow " + this.lastStartRow 
        // + " lastEndRow " + this.lastEndRow 
        // + " this.currentStartRow  " + this.currentStartRow 
        // + " this.currentEndRow " + this.currentEndRow);
        this.lastOffset = this.offset;
    };
    ListView.prototype.ShowCurrentRows = function (forceRefresh) {
        if (this.currentRows == 0) {
            this.currentRows = -1;
            this.HideAll();
            this.currentStartRow = -1;
            this.currentEndRow = -1;
            return;
        }
        this.lastStartRow = this.currentStartRow;
        this.lastEndRow = this.currentEndRow;
        this.GetRowsShouldShow(forceRefresh);
        //6种区间关系
        /*
        1.---
            |
         ---|-
         |  |
         |  |
         |  |
         ---|-
          ---

        2.
         ---
         |
        -|---
         |  |
         |  |
        -|---
         |
         ---

         3.
         ----
         |
         |
         |
         |-----
         |    |
         ---- |
              |
              |
         ------

         4.
       -----
           |
       ----|
       |   |
       |----
       |
       |
       -----

       5.
       ---
       |
       |
       ---

       ---
         |
         |
       ---
       
       6.
       ---
         |
         |
       ---

       ---
       |
       |
       ---

       *****************
       ---
       |
       |
       --- 是last

       ---
         |
         |
       --- 是current

        */
        //    cc.error("this.lastStartRow  " + this.lastStartRow + " this.currentStartRow " + this.currentStartRow 
        //    + " this.lastEndRow " + this.lastEndRow + " this.currentEndRow " + this.currentEndRow);
        if (this.lastStartRow != this.currentStartRow || this.lastEndRow != this.currentEndRow || forceRefresh == true) {
            // ccC.error("******");
            var shouldCallCellForRow = !forceRefresh; //强制刷新的话cellForRow放在最后统一执行
            if (this.lastStartRow >= this.currentStartRow && this.lastEndRow <= this.currentEndRow) {
                // ccC.error("1");
                for (var i = this.currentStartRow; i < this.lastStartRow; i++) {
                    this.ShowRow(i, shouldCallCellForRow);
                }
                for (var i = this.lastEndRow + 1; i <= this.currentEndRow; i++) {
                    this.ShowRow(i, shouldCallCellForRow);
                }
            }
            else if (this.lastStartRow <= this.currentStartRow && this.lastEndRow >= this.currentEndRow) {
                // ccC.error("2");
                for (var i = this.lastStartRow; i < this.currentStartRow; i++) {
                    this.HideRow(i);
                }
                for (var i = this.currentEndRow + 1; i <= this.lastEndRow; i++) {
                    this.HideRow(i);
                }
            }
            else if (this.lastStartRow <= this.currentStartRow && this.lastEndRow >= this.currentStartRow && this.lastEndRow <= this.currentEndRow) {
                // ccC.error("3");
                for (var i = this.lastStartRow; i < this.currentStartRow; i++) {
                    this.HideRow(i);
                }
                for (var i = this.lastEndRow + 1; i <= this.currentEndRow; i++) {
                    this.ShowRow(i, shouldCallCellForRow);
                }
            }
            else if (this.lastStartRow <= this.currentEndRow && this.lastEndRow >= this.currentEndRow && this.lastStartRow >= this.currentStartRow) {
                // ccC.error("4");
                for (var i = this.currentEndRow + 1; i <= this.lastEndRow; i++) {
                    this.HideRow(i);
                }
                for (var i = this.currentStartRow; i < this.lastStartRow; i++) {
                    this.ShowRow(i, shouldCallCellForRow);
                }
            }
            else if (this.lastEndRow <= this.currentStartRow || this.lastStartRow >= this.currentEndRow) {
                // ccC.error("5");
                for (var i = this.lastStartRow; i <= this.lastEndRow; i++) {
                    if (i != this.currentStartRow || i != this.currentEndRow)
                        this.HideRow(i);
                }
                for (var i = this.currentStartRow; i <= this.currentEndRow; i++) {
                    this.ShowRow(i, shouldCallCellForRow);
                }
            }
            if (forceRefresh == true) {
                for (var i = this.currentStartRow; i <= this.currentEndRow; i++) {
                    var cell = this.usingCell[i];
                    this.cellForRow(cell);
                }
            }
        }
    };
    ListView.prototype.ShowRow = function (row, shouldCallCellForRow) {
        // cc.error("ShowRow " + row);
        var cell;
        if (this.unuseCell.length > 0) {
            cell = this.unuseCell.pop();
        }
        else {
            cell = this.getCellCallback();
            this.contentView.addChild(cell.content);
        }
        cell.row = row;
        cell.content.active = true;
        //TODO:
        if (this.scrollstyle == ListViewScrollStyle.Top) {
            var pos = cell.content.position;
            pos.x = 0;
            pos.y = -this.posForRows[row] - this.spaceForRows[row] / 2;
            cell.content.setPosition(pos);
        }
        if (shouldCallCellForRow == true)
            this.cellForRow(cell);
        this.usingCell[row] = cell;
    };
    ListView.prototype.HideRow = function (row) {
        // ccC.error("HideRow " + row);
        var cell = this.usingCell[row];
        if (cell != null) {
            cell.content.active = false;
            this.unuseCell.push(cell);
            this.usingCell[row] = null;
        }
    };
    ListView.prototype.HideAll = function () {
        for (var i = this.currentStartRow; i <= this.currentEndRow; i++) {
            this.HideRow(i);
        }
    };
    ListView.prototype.onLoad = function () {
    };
    ListView.prototype.start = function () {
    };
    ListView.prototype.update = function (dt) {
        if (this.scrollview != null && this.currentRows > 0) {
            this.offset = this.scrollview.getScrollOffset().y;
            if (Math.abs(this.offset - this.tmpOffset) > 20) {
                this.tmpOffset = this.offset;
                this.ShowCurrentRows(false);
            }
        }
    };
    ListView.prototype.SetScrollToBottomShouldCallback = function (shouldCallback) {
        this.scrollBottomShouldCallback = shouldCallback;
    };
    ListView.prototype.SetScrollBottomCallback = function (actionCallback) {
        this.actionScrollBottomCallback = actionCallback;
    };
    // 获取ScrollView
    ListView.prototype.GetScrollView = function () {
        return this.scrollview;
    };
    ListView = __decorate([
        ccclass
    ], ListView);
    return ListView;
}(cc.Component));
exports.default = ListView;
var Cell = /** @class */ (function () {
    function Cell() {
    }
    return Cell;
}());
exports.Cell = Cell;
var ListViewScrollStyle;
(function (ListViewScrollStyle) {
    ListViewScrollStyle[ListViewScrollStyle["Top"] = 0] = "Top";
    ListViewScrollStyle[ListViewScrollStyle["Bottom"] = 1] = "Bottom";
    ListViewScrollStyle[ListViewScrollStyle["Left"] = 2] = "Left";
    ListViewScrollStyle[ListViewScrollStyle["Right"] = 3] = "Right";
})(ListViewScrollStyle = exports.ListViewScrollStyle || (exports.ListViewScrollStyle = {}));

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Network/Socket/TCPSendTaskManager.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e9c96q6VTlIM5tMrFqoTs5n', 'TCPSendTaskManager');
// Scripts/Network/Socket/TCPSendTaskManager.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TimerManager_1 = require("../../Components/TimerManager");
var Language_1 = require("../../Global/Language");
var Toast_1 = require("../../Tools/Toast");
// import { PingMsgDefine } from "../../Protos/MessageDefine";
var TCPSendTaskManager = /** @class */ (function () {
    function TCPSendTaskManager() {
        this.sessions = {};
    }
    TCPSendTaskManager.GetInstance = function () {
        if (this.m_Instance == null) {
            this.m_Instance = new TCPSendTaskManager();
        }
        return this.m_Instance;
    };
    TCPSendTaskManager.prototype.InitSession = function (sessionID) {
        // cc.error("InitSession  " + sessionID);
        this.sessions[sessionID] = {};
    };
    TCPSendTaskManager.prototype.AddTask = function (sessionID, msgID, seq, dataSend, successCallback, failCallback) {
        // cc.error("AddTask sessionID  " + sessionID + " seq " + seq);
        var task = new TCPSendTask();
        task.Set(sessionID, msgID, seq, dataSend, successCallback, failCallback);
        this.sessions[sessionID][seq] = task;
    };
    TCPSendTaskManager.prototype.GetTask = function (sessionID, seq) {
        return this.sessions[sessionID][seq];
    };
    TCPSendTaskManager.prototype.CancelTask = function (sessionID, seq) {
        // cc.error("CancelTask " + seq);
        var task = this.sessions[sessionID][seq];
        task.CancelTimer();
        delete this.sessions[sessionID][seq];
    };
    TCPSendTaskManager.prototype.Clean = function () {
        for (var sessionID in this.sessions) {
            // for(let seq in this.sessions[sessionID])
            // {
            //     this.sessions[sessionID][seq].CancelTimer();
            // }
            this.CleanSession(sessionID);
        }
        this.sessions = {};
    };
    TCPSendTaskManager.prototype.CleanSession = function (sessionID) {
        for (var seq in this.sessions[sessionID]) {
            this.sessions[sessionID][seq].CancelTimer();
        }
        delete (this.sessions[sessionID]);
        this.sessions[sessionID] = null;
    };
    return TCPSendTaskManager;
}());
exports.default = TCPSendTaskManager;
var TCPSendTask = /** @class */ (function () {
    function TCPSendTask() {
    }
    TCPSendTask.prototype.Set = function (sessionID, msgID, seq, dataSend, successCallback, failCallback) {
        var _this = this;
        this.sessionID = sessionID;
        this.msgID = msgID;
        this.seq = seq;
        this.dataSend = dataSend;
        this.successCallback = successCallback;
        this.failCallback = failCallback;
        var timeOut = 20;
        this.timerID = TimerManager_1.default.GetInstance().CallActionDelay(function () {
            if (_this.msgID != 1000)
                Toast_1.default.Show(Language_1.default.text5);
            if (failCallback != null) {
                failCallback(Language_1.default.text5 + " msgID " + msgID);
            }
            TimerManager_1.default.GetInstance().DeleteTimer(_this.timerID);
        }, timeOut, null, 0, 0, true);
    };
    TCPSendTask.prototype.CancelTimer = function () {
        TimerManager_1.default.GetInstance().DeleteTimer(this.timerID);
    };
    return TCPSendTask;
}());

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTmV0d29ya1xcU29ja2V0XFxUQ1BTZW5kVGFza01hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw4REFBeUQ7QUFDekQsa0RBQTZDO0FBQzdDLDJDQUFzQztBQUN0Qyw4REFBOEQ7QUFFOUQ7SUFBQTtRQWFZLGFBQVEsR0FBbUQsRUFBRSxDQUFDO0lBbUQxRSxDQUFDO0lBNURpQiw4QkFBVyxHQUF6QjtRQUVJLElBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQzFCO1lBQ0ksSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGtCQUFrQixFQUFFLENBQUM7U0FDOUM7UUFDRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQUdNLHdDQUFXLEdBQWxCLFVBQW1CLFNBQVM7UUFFeEIseUNBQXlDO1FBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFTSxvQ0FBTyxHQUFkLFVBQWUsU0FBUyxFQUFDLEtBQUssRUFBQyxHQUFHLEVBQUMsUUFBUSxFQUFDLGVBQXVDLEVBQUMsWUFBa0M7UUFFbEgsK0RBQStEO1FBQy9ELElBQUksSUFBSSxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUMsS0FBSyxFQUFDLEdBQUcsRUFBQyxRQUFRLEVBQUMsZUFBZSxFQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ3pDLENBQUM7SUFFTSxvQ0FBTyxHQUFkLFVBQWUsU0FBUyxFQUFDLEdBQUc7UUFFeEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFTSx1Q0FBVSxHQUFqQixVQUFrQixTQUFTLEVBQUMsR0FBRztRQUUzQixpQ0FBaUM7UUFDakMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFTSxrQ0FBSyxHQUFaO1FBRUksS0FBSSxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUNsQztZQUNJLDJDQUEyQztZQUMzQyxJQUFJO1lBQ0osbURBQW1EO1lBQ25ELElBQUk7WUFDSixJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ2hDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVNLHlDQUFZLEdBQW5CLFVBQW9CLFNBQVM7UUFFekIsS0FBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUN2QztZQUNJLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDL0M7UUFDRCxPQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ3BDLENBQUM7SUFFTCx5QkFBQztBQUFELENBaEVBLEFBZ0VDLElBQUE7O0FBRUQ7SUFBQTtJQW9DQSxDQUFDO0lBekJVLHlCQUFHLEdBQVYsVUFBVyxTQUFTLEVBQUMsS0FBSyxFQUFDLEdBQUcsRUFBQyxRQUFRLEVBQUMsZUFBdUMsRUFBQyxZQUFrQztRQUFsSCxpQkFtQkM7UUFqQkcsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUVqQyxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxzQkFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLGVBQWUsQ0FBQztZQUN0RCxJQUFHLEtBQUksQ0FBQyxLQUFLLElBQUksSUFBSTtnQkFDakIsZUFBSyxDQUFDLElBQUksQ0FBQyxrQkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9CLElBQUcsWUFBWSxJQUFJLElBQUksRUFDdkI7Z0JBQ0ksWUFBWSxDQUFDLGtCQUFRLENBQUMsS0FBSyxHQUFHLFNBQVMsR0FBRyxLQUFLLENBQUMsQ0FBQzthQUNwRDtZQUNELHNCQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6RCxDQUFDLEVBQUMsT0FBTyxFQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFTSxpQ0FBVyxHQUFsQjtRQUVJLHNCQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQXBDQSxBQW9DQyxJQUFBIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRpbWVyTWFuYWdlciBmcm9tIFwiLi4vLi4vQ29tcG9uZW50cy9UaW1lck1hbmFnZXJcIjtcbmltcG9ydCBMYW5ndWFnZSBmcm9tIFwiLi4vLi4vR2xvYmFsL0xhbmd1YWdlXCI7XG5pbXBvcnQgVG9hc3QgZnJvbSBcIi4uLy4uL1Rvb2xzL1RvYXN0XCI7XG4vLyBpbXBvcnQgeyBQaW5nTXNnRGVmaW5lIH0gZnJvbSBcIi4uLy4uL1Byb3Rvcy9NZXNzYWdlRGVmaW5lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRDUFNlbmRUYXNrTWFuYWdlclxue1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgbV9JbnN0YW5jZTpUQ1BTZW5kVGFza01hbmFnZXI7XG4gICAgcHVibGljIHN0YXRpYyBHZXRJbnN0YW5jZSgpOlRDUFNlbmRUYXNrTWFuYWdlclxuICAgIHtcbiAgICAgICAgaWYodGhpcy5tX0luc3RhbmNlID09IG51bGwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMubV9JbnN0YW5jZSA9IG5ldyBUQ1BTZW5kVGFza01hbmFnZXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tX0luc3RhbmNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2Vzc2lvbnM6e1tzZXNzaW9uSUQ6bnVtYmVyXTp7W3NlcTpudW1iZXJdOlRDUFNlbmRUYXNrfX0gPSB7fTtcbiAgICBwdWJsaWMgSW5pdFNlc3Npb24oc2Vzc2lvbklEKVxuICAgIHtcbiAgICAgICAgLy8gY2MuZXJyb3IoXCJJbml0U2Vzc2lvbiAgXCIgKyBzZXNzaW9uSUQpO1xuICAgICAgICB0aGlzLnNlc3Npb25zW3Nlc3Npb25JRF0gPSB7fTtcbiAgICB9XG5cbiAgICBwdWJsaWMgQWRkVGFzayhzZXNzaW9uSUQsbXNnSUQsc2VxLGRhdGFTZW5kLHN1Y2Nlc3NDYWxsYmFjazooZGF0YTpVaW50OEFycmF5KT0+dm9pZCxmYWlsQ2FsbGJhY2s6KGVyck1zZzpzdHJpbmcpPT52b2lkKVxuICAgIHtcbiAgICAgICAgLy8gY2MuZXJyb3IoXCJBZGRUYXNrIHNlc3Npb25JRCAgXCIgKyBzZXNzaW9uSUQgKyBcIiBzZXEgXCIgKyBzZXEpO1xuICAgICAgICBsZXQgdGFzayA9IG5ldyBUQ1BTZW5kVGFzaygpO1xuICAgICAgICB0YXNrLlNldChzZXNzaW9uSUQsbXNnSUQsc2VxLGRhdGFTZW5kLHN1Y2Nlc3NDYWxsYmFjayxmYWlsQ2FsbGJhY2spO1xuICAgICAgICB0aGlzLnNlc3Npb25zW3Nlc3Npb25JRF1bc2VxXSA9IHRhc2s7XG4gICAgfVxuXG4gICAgcHVibGljIEdldFRhc2soc2Vzc2lvbklELHNlcSlcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlc3Npb25zW3Nlc3Npb25JRF1bc2VxXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgQ2FuY2VsVGFzayhzZXNzaW9uSUQsc2VxKVxuICAgIHtcbiAgICAgICAgLy8gY2MuZXJyb3IoXCJDYW5jZWxUYXNrIFwiICsgc2VxKTtcbiAgICAgICAgbGV0IHRhc2sgPSB0aGlzLnNlc3Npb25zW3Nlc3Npb25JRF1bc2VxXTtcbiAgICAgICAgdGFzay5DYW5jZWxUaW1lcigpO1xuICAgICAgICBkZWxldGUgdGhpcy5zZXNzaW9uc1tzZXNzaW9uSURdW3NlcV07XG4gICAgfVxuXG4gICAgcHVibGljIENsZWFuKClcbiAgICB7XG4gICAgICAgIGZvcihsZXQgc2Vzc2lvbklEIGluIHRoaXMuc2Vzc2lvbnMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGZvcihsZXQgc2VxIGluIHRoaXMuc2Vzc2lvbnNbc2Vzc2lvbklEXSlcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICB0aGlzLnNlc3Npb25zW3Nlc3Npb25JRF1bc2VxXS5DYW5jZWxUaW1lcigpO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgdGhpcy5DbGVhblNlc3Npb24oc2Vzc2lvbklEKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlc3Npb25zID0ge307XG4gICAgfVxuXG4gICAgcHVibGljIENsZWFuU2Vzc2lvbihzZXNzaW9uSUQpXG4gICAge1xuICAgICAgICBmb3IobGV0IHNlcSBpbiB0aGlzLnNlc3Npb25zW3Nlc3Npb25JRF0pXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuc2Vzc2lvbnNbc2Vzc2lvbklEXVtzZXFdLkNhbmNlbFRpbWVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlKHRoaXMuc2Vzc2lvbnNbc2Vzc2lvbklEXSk7XG4gICAgICAgIHRoaXMuc2Vzc2lvbnNbc2Vzc2lvbklEXSA9IG51bGw7XG4gICAgfVxuXG59XG5cbmNsYXNzIFRDUFNlbmRUYXNrXG57XG4gICAgcHVibGljIHNlc3Npb25JRDpudW1iZXI7XG4gICAgcHVibGljIG1zZ0lEOm51bWJlcjtcbiAgICBwdWJsaWMgc2VxOm51bWJlcjtcbiAgICBwdWJsaWMgZGF0YVNlbmQ6YW55O1xuICAgIHB1YmxpYyBzdWNjZXNzQ2FsbGJhY2s6KGRhdGE6VWludDhBcnJheSk9PnZvaWQ7XG4gICAgcHVibGljIGZhaWxDYWxsYmFjazooZXJyTXNnOnN0cmluZyk9PnZvaWQ7XG5cbiAgICBwcml2YXRlIHRpbWVySUQ6c3RyaW5nO1xuXG4gICAgcHVibGljIFNldChzZXNzaW9uSUQsbXNnSUQsc2VxLGRhdGFTZW5kLHN1Y2Nlc3NDYWxsYmFjazooZGF0YTpVaW50OEFycmF5KT0+dm9pZCxmYWlsQ2FsbGJhY2s6KGVyck1zZzpzdHJpbmcpPT52b2lkKVxuICAgIHtcbiAgICAgICAgdGhpcy5zZXNzaW9uSUQgPSBzZXNzaW9uSUQ7XG4gICAgICAgIHRoaXMubXNnSUQgPSBtc2dJRDtcbiAgICAgICAgdGhpcy5zZXEgPSBzZXE7XG4gICAgICAgIHRoaXMuZGF0YVNlbmQgPSBkYXRhU2VuZDtcbiAgICAgICAgdGhpcy5zdWNjZXNzQ2FsbGJhY2sgPSBzdWNjZXNzQ2FsbGJhY2s7XG4gICAgICAgIHRoaXMuZmFpbENhbGxiYWNrID0gZmFpbENhbGxiYWNrO1xuXG4gICAgICAgIGxldCB0aW1lT3V0ID0gMjA7XG4gICAgICAgIHRoaXMudGltZXJJRCA9IFRpbWVyTWFuYWdlci5HZXRJbnN0YW5jZSgpLkNhbGxBY3Rpb25EZWxheSgoKT0+e1xuICAgICAgICAgICAgaWYodGhpcy5tc2dJRCAhPSAxMDAwKVxuICAgICAgICAgICAgICAgIFRvYXN0LlNob3coTGFuZ3VhZ2UudGV4dDUpO1xuICAgICAgICAgICAgaWYoZmFpbENhbGxiYWNrICE9IG51bGwpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmFpbENhbGxiYWNrKExhbmd1YWdlLnRleHQ1ICsgXCIgbXNnSUQgXCIgKyBtc2dJRCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBUaW1lck1hbmFnZXIuR2V0SW5zdGFuY2UoKS5EZWxldGVUaW1lcih0aGlzLnRpbWVySUQpO1xuICAgICAgICB9LHRpbWVPdXQsbnVsbCwwLDAsdHJ1ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIENhbmNlbFRpbWVyKClcbiAgICB7XG4gICAgICAgIFRpbWVyTWFuYWdlci5HZXRJbnN0YW5jZSgpLkRlbGV0ZVRpbWVyKHRoaXMudGltZXJJRCk7XG4gICAgfVxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/Base/XTweenObserver.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4c9d6Ji1alAIb/XJvvzaGZs', 'XTweenObserver');
// Scripts/Tools/XTween/Base/XTweenObserver.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../../Util");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var XTweenObserver = /** @class */ (function (_super) {
    __extends(XTweenObserver, _super);
    function XTweenObserver() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.listTweeners = [];
        return _this;
    }
    XTweenObserver.prototype.GetListTweeners = function () {
        return this.listTweeners;
    };
    XTweenObserver.prototype.AddXTweener = function (xTweener) {
        for (var i = 0; i < this.listTweeners.length; i++) {
            var tweener = this.listTweeners[i];
            if (tweener.GetTypeMark() == xTweener.GetTypeMark() && xTweener.GetControlByParent()) {
                tweener.BeReplaced();
                break;
            }
        }
        this.listTweeners.push(xTweener);
    };
    XTweenObserver.prototype.RemoveTweener = function (xTweener) {
        // for(let i=0;i<this.listTweeners.length;i++)
        // {
        //     let tweener = this.listTweeners[i];
        //     if(tweener == xTweener)
        //     {
        //         Util.RemoveArray(this.listTweeners,)
        //     }
        // }
        Util_1.default.RemoveArray(this.listTweeners, xTweener);
    };
    XTweenObserver.prototype.onEnable = function () {
        for (var i = 0; i < this.listTweeners.length; i++) {
            var tweener = this.listTweeners[i];
            tweener.OnEnable();
        }
    };
    XTweenObserver.prototype.onDisable = function () {
        for (var i = 0; i < this.listTweeners.length; i++) {
            var tweener = this.listTweeners[i];
            tweener.OnDisable();
        }
    };
    XTweenObserver.prototype.onDestroy = function () {
        for (var i = 0; i < this.listTweeners.length; i++) {
            var tweener = this.listTweeners[i];
            tweener.OnDestroy();
        }
    };
    XTweenObserver = __decorate([
        ccclass
    ], XTweenObserver);
    return XTweenObserver;
}(cc.Component));
exports.default = XTweenObserver;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFhUd2VlblxcQmFzZVxcWFR3ZWVuT2JzZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsbUNBQThCO0FBRXhCLElBQUEsa0JBQW1DLEVBQWxDLG9CQUFPLEVBQUUsc0JBQXlCLENBQUM7QUFHMUM7SUFBNEMsa0NBQVk7SUFEeEQ7UUFBQSxxRUFnRUM7UUE3RFcsa0JBQVksR0FBcUIsRUFBRSxDQUFDOztJQTZEaEQsQ0FBQztJQTNEVSx3Q0FBZSxHQUF0QjtRQUVJLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRU0sb0NBQVcsR0FBbEIsVUFBbUIsUUFBbUI7UUFFbEMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUMxQztZQUNJLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkMsSUFBRyxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksUUFBUSxDQUFDLFdBQVcsRUFBRSxJQUFJLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxFQUNuRjtnQkFDSSxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQ3JCLE1BQU07YUFDVDtTQUNKO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVNLHNDQUFhLEdBQXBCLFVBQXFCLFFBQW1CO1FBRXBDLDhDQUE4QztRQUM5QyxJQUFJO1FBQ0osMENBQTBDO1FBQzFDLDhCQUE4QjtRQUM5QixRQUFRO1FBQ1IsK0NBQStDO1FBQy9DLFFBQVE7UUFDUixJQUFJO1FBQ0osY0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxpQ0FBUSxHQUFSO1FBRUksS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUMxQztZQUNJLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ3RCO0lBQ0wsQ0FBQztJQUVELGtDQUFTLEdBQVQ7UUFFSSxLQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQzFDO1lBQ0ksSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDdkI7SUFDTCxDQUFDO0lBRUQsa0NBQVMsR0FBVDtRQUVJLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFDMUM7WUFDSSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25DLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUN2QjtJQUNMLENBQUM7SUE3RGdCLGNBQWM7UUFEbEMsT0FBTztPQUNhLGNBQWMsQ0ErRGxDO0lBQUQscUJBQUM7Q0EvREQsQUErREMsQ0EvRDJDLEVBQUUsQ0FBQyxTQUFTLEdBK0R2RDtrQkEvRG9CLGNBQWMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgWFR3ZWVuZXIgZnJvbSBcIi4vWFR3ZWVuZXJcIjtcbmltcG9ydCBYVHdlZW5lcklGIGZyb20gXCIuL1hUd2VlbmVySUZcIjtcbmltcG9ydCBVdGlsIGZyb20gXCIuLi8uLi9VdGlsXCI7XG5cbmNvbnN0IHtjY2NsYXNzLCBwcm9wZXJ0eX0gPSBjYy5fZGVjb3JhdG9yO1xuXG5AY2NjbGFzc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWFR3ZWVuT2JzZXJ2ZXIgZXh0ZW5kcyBjYy5Db21wb25lbnQgXG57XG4gICAgcHJpdmF0ZSBsaXN0VHdlZW5lcnM6QXJyYXk8WFR3ZWVuZXJJRj4gPSBbXTtcblxuICAgIHB1YmxpYyBHZXRMaXN0VHdlZW5lcnMoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdFR3ZWVuZXJzO1xuICAgIH1cblxuICAgIHB1YmxpYyBBZGRYVHdlZW5lcih4VHdlZW5lcjpYVHdlZW5lcklGKVxuICAgIHtcbiAgICAgICAgZm9yKGxldCBpPTA7aTx0aGlzLmxpc3RUd2VlbmVycy5sZW5ndGg7aSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgdHdlZW5lciA9IHRoaXMubGlzdFR3ZWVuZXJzW2ldO1xuICAgICAgICAgICAgaWYodHdlZW5lci5HZXRUeXBlTWFyaygpID09IHhUd2VlbmVyLkdldFR5cGVNYXJrKCkgJiYgeFR3ZWVuZXIuR2V0Q29udHJvbEJ5UGFyZW50KCkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHdlZW5lci5CZVJlcGxhY2VkKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saXN0VHdlZW5lcnMucHVzaCh4VHdlZW5lcik7XG4gICAgfVxuXG4gICAgcHVibGljIFJlbW92ZVR3ZWVuZXIoeFR3ZWVuZXI6WFR3ZWVuZXJJRilcbiAgICB7XG4gICAgICAgIC8vIGZvcihsZXQgaT0wO2k8dGhpcy5saXN0VHdlZW5lcnMubGVuZ3RoO2krKylcbiAgICAgICAgLy8ge1xuICAgICAgICAvLyAgICAgbGV0IHR3ZWVuZXIgPSB0aGlzLmxpc3RUd2VlbmVyc1tpXTtcbiAgICAgICAgLy8gICAgIGlmKHR3ZWVuZXIgPT0geFR3ZWVuZXIpXG4gICAgICAgIC8vICAgICB7XG4gICAgICAgIC8vICAgICAgICAgVXRpbC5SZW1vdmVBcnJheSh0aGlzLmxpc3RUd2VlbmVycywpXG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH1cbiAgICAgICAgVXRpbC5SZW1vdmVBcnJheSh0aGlzLmxpc3RUd2VlbmVycyx4VHdlZW5lcik7XG4gICAgfVxuXG4gICAgb25FbmFibGUoKVxuICAgIHtcbiAgICAgICAgZm9yKGxldCBpPTA7aTx0aGlzLmxpc3RUd2VlbmVycy5sZW5ndGg7aSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgdHdlZW5lciA9IHRoaXMubGlzdFR3ZWVuZXJzW2ldO1xuICAgICAgICAgICAgdHdlZW5lci5PbkVuYWJsZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25EaXNhYmxlKClcbiAgICB7XG4gICAgICAgIGZvcihsZXQgaT0wO2k8dGhpcy5saXN0VHdlZW5lcnMubGVuZ3RoO2krKylcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IHR3ZWVuZXIgPSB0aGlzLmxpc3RUd2VlbmVyc1tpXTtcbiAgICAgICAgICAgIHR3ZWVuZXIuT25EaXNhYmxlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkRlc3Ryb3koKVxuICAgIHtcbiAgICAgICAgZm9yKGxldCBpPTA7aTx0aGlzLmxpc3RUd2VlbmVycy5sZW5ndGg7aSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgdHdlZW5lciA9IHRoaXMubGlzdFR3ZWVuZXJzW2ldO1xuICAgICAgICAgICAgdHdlZW5lci5PbkRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/Base/XTweener.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6651egCMMpPV5ycwMXKqoCC', 'XTweener');
// Scripts/Tools/XTween/Base/XTweener.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var XTweenCurv_1 = require("./XTweenCurv");
var XTweenGlobal_1 = require("./XTweenGlobal");
var XTweenUpdater_1 = require("./XTweenUpdater");
var XTweenObserver_1 = require("./XTweenObserver");
var XTweener = /** @class */ (function () {
    function XTweener() {
        this.data = null;
        this.state = XTweenGlobal_1.XTweenerState.BeforePlay;
        this.delay = 0;
        this.startCallback = null;
        this.finishCallback = null;
        this.controlByParent = false;
        this.speed = 1;
        this.shouldCallback = true;
        this.beReplaced = false;
        this.target = null;
        this.observer = null;
        this.gameObjectDisable = false;
        this.duration = 0;
        this.shouldFinishCallbackWhenDisable = false;
        this.currentTime = 0;
        this.timeProgress = 0;
        this.pingPong = false;
        this.currentRepeatTimes = 0;
        this.repeatTimes = 1;
        this.animationProgress = 0;
        this.curvType = XTweenCurv_1.XTweenCurvType.Liner;
        this.tCustomCurv = null;
        this.shouldNotFinishWhenDisable = false;
    }
    XTweener.prototype.InitTweenerData = function (playTimes, pingPong, curv) {
        if (curv === void 0) { curv = XTweenCurv_1.XTweenCurvType.Liner; }
        if (playTimes == null) {
            playTimes = 1;
        }
        if (pingPong == null) {
            pingPong = false;
        }
        if (curv == null) {
            curv = XTweenCurv_1.XTweenCurvType.Liner;
        }
        this.repeatTimes = playTimes;
        this.pingPong = pingPong;
        this.curvType = curv;
    };
    //interface
    XTweener.prototype.SetTweenerData = function (data) {
        this.data = data;
    };
    XTweener.prototype.GetTweenerData = function () {
        return this.data;
    };
    XTweener.prototype.SetDelay = function (delay) {
        this.delay = delay;
    };
    XTweener.prototype.GetDelay = function () {
        return this.delay;
    };
    XTweener.prototype.Play = function () {
        if (this.state == XTweenGlobal_1.XTweenerState.BeforePlay) {
            if (this.startCallback != null) {
                this.startCallback();
            }
        }
        this.state = XTweenGlobal_1.XTweenerState.Playing;
        if (this.controlByParent == false) {
            XTweenUpdater_1.default.GetInstance().AddTweener(this);
        }
        this.OnPlay();
    };
    XTweener.prototype.OnPlay = function () {
    };
    XTweener.prototype.Finish = function (shouldCallback) {
        if (shouldCallback === void 0) { shouldCallback = true; }
        this.state = XTweenGlobal_1.XTweenerState.End;
        this.shouldCallback = shouldCallback;
    };
    XTweener.prototype.Pause = function () {
        if (this.state == XTweenGlobal_1.XTweenerState.Playing)
            this.state = XTweenGlobal_1.XTweenerState.Pause;
    };
    XTweener.prototype.Resume = function () {
        if (this.state == XTweenGlobal_1.XTweenerState.Pause)
            this.state = XTweenGlobal_1.XTweenerState.Playing;
    };
    XTweener.prototype.SetSpeed = function (speed) {
        this.speed = speed;
    };
    XTweener.prototype.SetStartCallback = function (startCallback) {
        this.startCallback = startCallback;
    };
    XTweener.prototype.SetFinishCallback = function (finishCallback) {
        this.finishCallback = finishCallback;
    };
    XTweener.prototype.GetState = function () {
        return this.state;
    };
    XTweener.prototype.Update = function (deltaTime) {
        this.currentTime += deltaTime * this.speed;
        if (this.duration < 0.01) {
            if (this.currentTime > this.delay) {
                this.timeProgress = 1;
            }
            else {
                this.timeProgress = 0;
            }
        }
        else {
            if (this.pingPong == true && this.currentTime > this.duration) {
                this.timeProgress = (this.currentTime - this.delay - this.duration) / this.duration;
                this.timeProgress = 1 - this.timeProgress;
            }
            else {
                this.timeProgress = (this.currentTime - this.delay) / this.duration;
            }
        }
        if (this.timeProgress < 0) {
            this.timeProgress = 0;
        }
        else if (this.timeProgress > 1) {
            this.timeProgress = 1;
        }
        if (this.currentTime >= this.delay + this.duration * (this.pingPong == true ? 2 : 1)) {
            this.currentRepeatTimes++;
            if (this.currentRepeatTimes >= this.repeatTimes && this.repeatTimes != -1) {
                this.state = XTweenGlobal_1.XTweenerState.End;
            }
            else {
                this.currentTime = this.delay;
            }
        }
        this.animationProgress = XTweenCurv_1.XTweenCurv.GetProgress(this.curvType, this.timeProgress, this.tCustomCurv);
    };
    XTweener.prototype.SetControlByParent = function () {
        this.controlByParent = true;
    };
    XTweener.prototype.GetControlByParent = function () {
        return this.controlByParent;
    };
    XTweener.prototype.BeReplaced = function () {
        this.beReplaced = true;
    };
    XTweener.prototype.GetTypeMark = function () {
        return "XTweener";
    };
    XTweener.prototype.OnDestroy = function () {
        this.state = XTweenGlobal_1.XTweenerState.End;
    };
    XTweener.prototype.OnEnable = function () {
        this.gameObjectDisable = false;
    };
    XTweener.prototype.OnDisable = function () {
        if (this.shouldNotFinishWhenDisable == true)
            return;
        this.state = XTweenGlobal_1.XTweenerState.End;
        this.gameObjectDisable = true;
    };
    XTweener.prototype.AddObserver = function () {
        this.observer = this.target.getComponent(XTweenObserver_1.default);
        if (this.observer == null) {
            this.observer = this.target.addComponent(XTweenObserver_1.default);
        }
    };
    XTweener.prototype.SetTarget = function (target) {
        this.target = target;
        if (this.observer == null) {
            this.AddObserver();
        }
        this.observer.AddXTweener(this);
    };
    XTweener.prototype.SetCustomCurv = function (curv) {
        this.tCustomCurv = curv;
    };
    XTweener.prototype.SetTime = function (time) {
        this.duration = time;
    };
    XTweener.prototype.SetShouldNotFinishWhenDisable = function () {
        this.shouldNotFinishWhenDisable = true;
    };
    XTweener.prototype.SetShouldFinishCallbackWhenDisable = function () {
        this.shouldFinishCallbackWhenDisable = true;
    };
    XTweener.prototype.CheckFinish = function () {
        if (this.state == XTweenGlobal_1.XTweenerState.End) {
            this.observer.RemoveTweener(this);
            if (this.finishCallback != null
                && this.shouldCallback == true
                && (this.gameObjectDisable == false || (this.gameObjectDisable == true && this.shouldFinishCallbackWhenDisable == true))) {
                this.finishCallback();
            }
        }
    };
    return XTweener;
}());
exports.default = XTweener;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/SpriteUtil.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0d9d6/sxgtA4K/Pw9imHGB+', 'SpriteUtil');
// Scripts/Tools/SpriteUtil.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ccC_1 = require("./ccC");
var SpriteUtil = /** @class */ (function () {
    function SpriteUtil() {
    }
    SpriteUtil.LoadSpriteByPath = function (s, c) {
        if (s == null) {
            return;
        }
        ccC_1.default.loadRes(c, cc.SpriteFrame, function (err, resource) {
            if (err) {
                cc.error("err  " + err.message || err);
                return;
            }
            s.spriteFrame = resource;
        });
    };
    SpriteUtil.LoadSpriteByAtlas = function (Sprite, atlasPath, spriteName, callBack) {
        if (callBack === void 0) { callBack = null; }
        if (Sprite == null) {
            return;
        }
        ccC_1.default.loadRes(atlasPath, cc.SpriteAtlas, function (err, atlas) {
            if (err) {
                cc.error("err  " + err.message || err);
                return;
            }
            var atlass = atlas;
            Sprite.spriteFrame = atlass.getSpriteFrame(spriteName);
            if (callBack != null) {
                callBack();
            }
        });
    };
    return SpriteUtil;
}());
exports.default = SpriteUtil;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFNwcml0ZVV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw2QkFBd0I7QUFFeEI7SUFBQTtJQXVDQSxDQUFDO0lBckNpQiwyQkFBZ0IsR0FBOUIsVUFBK0IsQ0FBWSxFQUFFLENBQVE7UUFFakQsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFDO1lBRVYsT0FBTztTQUNWO1FBQ0QsYUFBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLFdBQVcsRUFBQyxVQUFDLEdBQVUsRUFBRSxRQUFhO1lBQ25ELElBQUksR0FBRyxFQUFFO2dCQUNMLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDLENBQUM7Z0JBQ3ZDLE9BQU87YUFDVjtZQUNELENBQUMsQ0FBQyxXQUFXLEdBQUcsUUFBMEIsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FBQztJQUVQLENBQUM7SUFFYSw0QkFBaUIsR0FBL0IsVUFBZ0MsTUFBaUIsRUFBQyxTQUFnQixFQUFDLFVBQWlCLEVBQUMsUUFBbUI7UUFBbkIseUJBQUEsRUFBQSxlQUFtQjtRQUVwRyxJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUM7WUFFZixPQUFPO1NBQ1Y7UUFFRCxhQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBQyxFQUFFLENBQUMsV0FBVyxFQUFDLFVBQUMsR0FBVSxFQUFFLEtBQVU7WUFDeEQsSUFBSSxHQUFHLEVBQUU7Z0JBQ0wsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sSUFBSSxHQUFHLENBQUMsQ0FBQztnQkFDdkMsT0FBTzthQUNWO1lBQ0QsSUFBSSxNQUFNLEdBQWtCLEtBQXVCLENBQUM7WUFDcEQsTUFBTSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3ZELElBQUcsUUFBUSxJQUFFLElBQUksRUFDakI7Z0JBQ0ksUUFBUSxFQUFFLENBQUM7YUFDZDtRQUVMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNMLGlCQUFDO0FBQUQsQ0F2Q0EsQUF1Q0MsSUFBQSIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjY0MgZnJvbSBcIi4vY2NDXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTcHJpdGVVdGlsXHJcbntcclxuICAgIHB1YmxpYyBzdGF0aWMgTG9hZFNwcml0ZUJ5UGF0aChzOiBjYy5TcHJpdGUsIGM6c3RyaW5nKVxyXG4gICAge1xyXG4gICAgICAgIGlmIChzID09IG51bGwpe1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjY0MubG9hZFJlcyhjLGNjLlNwcml0ZUZyYW1lLChlcnI6IEVycm9yLCByZXNvdXJjZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNjLmVycm9yKFwiZXJyICBcIiArIGVyci5tZXNzYWdlIHx8IGVycik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcy5zcHJpdGVGcmFtZSA9IHJlc291cmNlIGFzIGNjLlNwcml0ZUZyYW1lO1xyXG4gICAgICAgIH0pO1xyXG4gXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBMb2FkU3ByaXRlQnlBdGxhcyhTcHJpdGU6IGNjLlNwcml0ZSxhdGxhc1BhdGg6c3RyaW5nLHNwcml0ZU5hbWU6c3RyaW5nLGNhbGxCYWNrOmFueSA9IG51bGwpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKFNwcml0ZSA9PSBudWxsKXtcclxuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNjQy5sb2FkUmVzKGF0bGFzUGF0aCxjYy5TcHJpdGVBdGxhcywoZXJyOiBFcnJvciwgYXRsYXM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBjYy5lcnJvcihcImVyciAgXCIgKyBlcnIubWVzc2FnZSB8fCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBhdGxhc3M6Y2MuU3ByaXRlQXRsYXMgPSBhdGxhcyBhcyBjYy5TcHJpdGVBdGxhcztcclxuICAgICAgICAgICAgU3ByaXRlLnNwcml0ZUZyYW1lID0gYXRsYXNzLmdldFNwcml0ZUZyYW1lKHNwcml0ZU5hbWUpO1xyXG4gICAgICAgICAgICBpZihjYWxsQmFjayE9bnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2FsbEJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/JsTool/NoSleep.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '290c4hRV01J/6p9zSBp7LhP', 'NoSleep');
// Scripts/JsTool/NoSleep.js

"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*! NoSleep.js v0.9.0 - git.io/vfn01 - Rich Tibbett - MIT license */
(function webpackUniversalModuleDefinition(root, factory) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && (typeof module === "undefined" ? "undefined" : _typeof(module)) === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') exports["NoSleep"] = factory();else root["NoSleep"] = factory();
})(typeof self !== 'undefined' ? self : void 0, function () {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.l = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // define getter function for harmony exports

      /******/

      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            /******/
            configurable: false,

            /******/
            enumerable: true,

            /******/
            get: getter
            /******/

          });
          /******/
        }
        /******/

      };
      /******/

      /******/
      // getDefaultExport function for compatibility with non-harmony modules

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module['default'];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, 'a', getter);
        /******/


        return getter;
        /******/
      };
      /******/

      /******/
      // Object.prototype.hasOwnProperty.call

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/

      /******/
      // __webpack_public_path__

      /******/


      __webpack_require__.p = "";
      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(__webpack_require__.s = 0);
      /******/
    }(
    /************************************************************************/

    /******/
    [
    /* 0 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var _createClass = function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var _require = __webpack_require__(1),
          webm = _require.webm,
          mp4 = _require.mp4; // Detect iOS browsers < version 10


      var oldIOS = typeof navigator !== 'undefined' && parseFloat(('' + (/CPU.*OS ([0-9_]{3,4})[0-9_]{0,1}|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0, ''])[1]).replace('undefined', '3_2').replace('_', '.').replace('_', '')) < 10 && !window.MSStream;

      var NoSleep = function () {
        function NoSleep() {
          var _this = this;

          _classCallCheck(this, NoSleep);

          if (oldIOS) {
            this.noSleepTimer = null;
          } else {
            // Set up no sleep video element
            this.noSleepVideo = document.createElement('video');
            this.noSleepVideo.setAttribute('muted', '');
            this.noSleepVideo.setAttribute('title', 'No Sleep');
            this.noSleepVideo.setAttribute('playsinline', '');

            this._addSourceToVideo(this.noSleepVideo, 'webm', webm);

            this._addSourceToVideo(this.noSleepVideo, 'mp4', mp4);

            this.noSleepVideo.addEventListener('loadedmetadata', function () {
              if (_this.noSleepVideo.duration <= 1) {
                // webm source
                _this.noSleepVideo.setAttribute('loop', '');
              } else {
                // mp4 source
                _this.noSleepVideo.addEventListener('timeupdate', function () {
                  if (_this.noSleepVideo.currentTime > 0.5) {
                    _this.noSleepVideo.currentTime = Math.random();
                  }
                });
              }
            });
          }
        }

        _createClass(NoSleep, [{
          key: '_addSourceToVideo',
          value: function _addSourceToVideo(element, type, dataURI) {
            var source = document.createElement('source');
            source.src = dataURI;
            source.type = 'video/' + type;
            element.appendChild(source);
          }
        }, {
          key: 'enable',
          value: function enable() {
            if (oldIOS) {
              this.disable();
              console.warn('\n        NoSleep enabled for older iOS devices. This can interrupt\n        active or long-running network requests from completing successfully.\n        See https://github.com/richtr/NoSleep.js/issues/15 for more details.\n      ');
              this.noSleepTimer = window.setInterval(function () {
                if (!document.hidden) {
                  window.location.href = window.location.href.split('#')[0];
                  window.setTimeout(window.stop, 0);
                }
              }, 15000);
            } else {
              this.noSleepVideo.play();
            }
          }
        }, {
          key: 'disable',
          value: function disable() {
            if (oldIOS) {
              if (this.noSleepTimer) {
                console.warn('\n          NoSleep now disabled for older iOS devices.\n        ');
                window.clearInterval(this.noSleepTimer);
                this.noSleepTimer = null;
              }
            } else {
              this.noSleepVideo.pause();
            }
          }
        }]);

        return NoSleep;
      }();

      ;
      module.exports = NoSleep;
      /***/
    },
    /* 1 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      module.exports = {
        webm: 'data:video/webm;base64,GkXfo0AgQoaBAUL3gQFC8oEEQvOBCEKCQAR3ZWJtQoeBAkKFgQIYU4BnQI0VSalmQCgq17FAAw9CQE2AQAZ3aGFtbXlXQUAGd2hhbW15RIlACECPQAAAAAAAFlSua0AxrkAu14EBY8WBAZyBACK1nEADdW5khkAFVl9WUDglhohAA1ZQOIOBAeBABrCBCLqBCB9DtnVAIueBAKNAHIEAAIAwAQCdASoIAAgAAUAmJaQAA3AA/vz0AAA=',
        mp4: 'data:video/mp4;base64,AAAAIGZ0eXBtcDQyAAACAGlzb21pc28yYXZjMW1wNDEAAAAIZnJlZQAACKBtZGF0AAAC8wYF///v3EXpvebZSLeWLNgg2SPu73gyNjQgLSBjb3JlIDE0MiByMjQ3OSBkZDc5YTYxIC0gSC4yNjQvTVBFRy00IEFWQyBjb2RlYyAtIENvcHlsZWZ0IDIwMDMtMjAxNCAtIGh0dHA6Ly93d3cudmlkZW9sYW4ub3JnL3gyNjQuaHRtbCAtIG9wdGlvbnM6IGNhYmFjPTEgcmVmPTEgZGVibG9jaz0xOjA6MCBhbmFseXNlPTB4MToweDExMSBtZT1oZXggc3VibWU9MiBwc3k9MSBwc3lfcmQ9MS4wMDowLjAwIG1peGVkX3JlZj0wIG1lX3JhbmdlPTE2IGNocm9tYV9tZT0xIHRyZWxsaXM9MCA4eDhkY3Q9MCBjcW09MCBkZWFkem9uZT0yMSwxMSBmYXN0X3Bza2lwPTEgY2hyb21hX3FwX29mZnNldD0wIHRocmVhZHM9NiBsb29rYWhlYWRfdGhyZWFkcz0xIHNsaWNlZF90aHJlYWRzPTAgbnI9MCBkZWNpbWF0ZT0xIGludGVybGFjZWQ9MCBibHVyYXlfY29tcGF0PTAgY29uc3RyYWluZWRfaW50cmE9MCBiZnJhbWVzPTMgYl9weXJhbWlkPTIgYl9hZGFwdD0xIGJfYmlhcz0wIGRpcmVjdD0xIHdlaWdodGI9MSBvcGVuX2dvcD0wIHdlaWdodHA9MSBrZXlpbnQ9MzAwIGtleWludF9taW49MzAgc2NlbmVjdXQ9NDAgaW50cmFfcmVmcmVzaD0wIHJjX2xvb2thaGVhZD0xMCByYz1jcmYgbWJ0cmVlPTEgY3JmPTIwLjAgcWNvbXA9MC42MCBxcG1pbj0wIHFwbWF4PTY5IHFwc3RlcD00IHZidl9tYXhyYXRlPTIwMDAwIHZidl9idWZzaXplPTI1MDAwIGNyZl9tYXg9MC4wIG5hbF9ocmQ9bm9uZSBmaWxsZXI9MCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAAOWWIhAA3//p+C7v8tDDSTjf97w55i3SbRPO4ZY+hkjD5hbkAkL3zpJ6h/LR1CAABzgB1kqqzUorlhQAAAAxBmiQYhn/+qZYADLgAAAAJQZ5CQhX/AAj5IQADQGgcIQADQGgcAAAACQGeYUQn/wALKCEAA0BoHAAAAAkBnmNEJ/8ACykhAANAaBwhAANAaBwAAAANQZpoNExDP/6plgAMuSEAA0BoHAAAAAtBnoZFESwr/wAI+SEAA0BoHCEAA0BoHAAAAAkBnqVEJ/8ACykhAANAaBwAAAAJAZ6nRCf/AAsoIQADQGgcIQADQGgcAAAADUGarDRMQz/+qZYADLghAANAaBwAAAALQZ7KRRUsK/8ACPkhAANAaBwAAAAJAZ7pRCf/AAsoIQADQGgcIQADQGgcAAAACQGe60Qn/wALKCEAA0BoHAAAAA1BmvA0TEM//qmWAAy5IQADQGgcIQADQGgcAAAAC0GfDkUVLCv/AAj5IQADQGgcAAAACQGfLUQn/wALKSEAA0BoHCEAA0BoHAAAAAkBny9EJ/8ACyghAANAaBwAAAANQZs0NExDP/6plgAMuCEAA0BoHAAAAAtBn1JFFSwr/wAI+SEAA0BoHCEAA0BoHAAAAAkBn3FEJ/8ACyghAANAaBwAAAAJAZ9zRCf/AAsoIQADQGgcIQADQGgcAAAADUGbeDRMQz/+qZYADLkhAANAaBwAAAALQZ+WRRUsK/8ACPghAANAaBwhAANAaBwAAAAJAZ+1RCf/AAspIQADQGgcAAAACQGft0Qn/wALKSEAA0BoHCEAA0BoHAAAAA1Bm7w0TEM//qmWAAy4IQADQGgcAAAAC0Gf2kUVLCv/AAj5IQADQGgcAAAACQGf+UQn/wALKCEAA0BoHCEAA0BoHAAAAAkBn/tEJ/8ACykhAANAaBwAAAANQZvgNExDP/6plgAMuSEAA0BoHCEAA0BoHAAAAAtBnh5FFSwr/wAI+CEAA0BoHAAAAAkBnj1EJ/8ACyghAANAaBwhAANAaBwAAAAJAZ4/RCf/AAspIQADQGgcAAAADUGaJDRMQz/+qZYADLghAANAaBwAAAALQZ5CRRUsK/8ACPkhAANAaBwhAANAaBwAAAAJAZ5hRCf/AAsoIQADQGgcAAAACQGeY0Qn/wALKSEAA0BoHCEAA0BoHAAAAA1Bmmg0TEM//qmWAAy5IQADQGgcAAAAC0GehkUVLCv/AAj5IQADQGgcIQADQGgcAAAACQGepUQn/wALKSEAA0BoHAAAAAkBnqdEJ/8ACyghAANAaBwAAAANQZqsNExDP/6plgAMuCEAA0BoHCEAA0BoHAAAAAtBnspFFSwr/wAI+SEAA0BoHAAAAAkBnulEJ/8ACyghAANAaBwhAANAaBwAAAAJAZ7rRCf/AAsoIQADQGgcAAAADUGa8DRMQz/+qZYADLkhAANAaBwhAANAaBwAAAALQZ8ORRUsK/8ACPkhAANAaBwAAAAJAZ8tRCf/AAspIQADQGgcIQADQGgcAAAACQGfL0Qn/wALKCEAA0BoHAAAAA1BmzQ0TEM//qmWAAy4IQADQGgcAAAAC0GfUkUVLCv/AAj5IQADQGgcIQADQGgcAAAACQGfcUQn/wALKCEAA0BoHAAAAAkBn3NEJ/8ACyghAANAaBwhAANAaBwAAAANQZt4NExC//6plgAMuSEAA0BoHAAAAAtBn5ZFFSwr/wAI+CEAA0BoHCEAA0BoHAAAAAkBn7VEJ/8ACykhAANAaBwAAAAJAZ+3RCf/AAspIQADQGgcAAAADUGbuzRMQn/+nhAAYsAhAANAaBwhAANAaBwAAAAJQZ/aQhP/AAspIQADQGgcAAAACQGf+UQn/wALKCEAA0BoHCEAA0BoHCEAA0BoHCEAA0BoHCEAA0BoHCEAA0BoHAAACiFtb292AAAAbG12aGQAAAAA1YCCX9WAgl8AAAPoAAAH/AABAAABAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAGGlvZHMAAAAAEICAgAcAT////v7/AAAF+XRyYWsAAABcdGtoZAAAAAPVgIJf1YCCXwAAAAEAAAAAAAAH0AAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAEAAAAAAygAAAMoAAAAAACRlZHRzAAAAHGVsc3QAAAAAAAAAAQAAB9AAABdwAAEAAAAABXFtZGlhAAAAIG1kaGQAAAAA1YCCX9WAgl8AAV+QAAK/IFXEAAAAAAAtaGRscgAAAAAAAAAAdmlkZQAAAAAAAAAAAAAAAFZpZGVvSGFuZGxlcgAAAAUcbWluZgAAABR2bWhkAAAAAQAAAAAAAAAAAAAAJGRpbmYAAAAcZHJlZgAAAAAAAAABAAAADHVybCAAAAABAAAE3HN0YmwAAACYc3RzZAAAAAAAAAABAAAAiGF2YzEAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAygDKAEgAAABIAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY//8AAAAyYXZjQwFNQCj/4QAbZ01AKOyho3ySTUBAQFAAAAMAEAAr8gDxgxlgAQAEaO+G8gAAABhzdHRzAAAAAAAAAAEAAAA8AAALuAAAABRzdHNzAAAAAAAAAAEAAAABAAAB8GN0dHMAAAAAAAAAPAAAAAEAABdwAAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAAC7gAAAAAQAAF3AAAAABAAAAAAAAABxzdHNjAAAAAAAAAAEAAAABAAAAAQAAAAEAAAEEc3RzegAAAAAAAAAAAAAAPAAAAzQAAAAQAAAADQAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAANAAAADQAAAQBzdGNvAAAAAAAAADwAAAAwAAADZAAAA3QAAAONAAADoAAAA7kAAAPQAAAD6wAAA/4AAAQXAAAELgAABEMAAARcAAAEbwAABIwAAAShAAAEugAABM0AAATkAAAE/wAABRIAAAUrAAAFQgAABV0AAAVwAAAFiQAABaAAAAW1AAAFzgAABeEAAAX+AAAGEwAABiwAAAY/AAAGVgAABnEAAAaEAAAGnQAABrQAAAbPAAAG4gAABvUAAAcSAAAHJwAAB0AAAAdTAAAHcAAAB4UAAAeeAAAHsQAAB8gAAAfjAAAH9gAACA8AAAgmAAAIQQAACFQAAAhnAAAIhAAACJcAAAMsdHJhawAAAFx0a2hkAAAAA9WAgl/VgIJfAAAAAgAAAAAAAAf8AAAAAAAAAAAAAAABAQAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAACsm1kaWEAAAAgbWRoZAAAAADVgIJf1YCCXwAArEQAAWAAVcQAAAAAACdoZGxyAAAAAAAAAABzb3VuAAAAAAAAAAAAAAAAU3RlcmVvAAAAAmNtaW5mAAAAEHNtaGQAAAAAAAAAAAAAACRkaW5mAAAAHGRyZWYAAAAAAAAAAQAAAAx1cmwgAAAAAQAAAidzdGJsAAAAZ3N0c2QAAAAAAAAAAQAAAFdtcDRhAAAAAAAAAAEAAAAAAAAAAAACABAAAAAArEQAAAAAADNlc2RzAAAAAAOAgIAiAAIABICAgBRAFQAAAAADDUAAAAAABYCAgAISEAaAgIABAgAAABhzdHRzAAAAAAAAAAEAAABYAAAEAAAAABxzdHNjAAAAAAAAAAEAAAABAAAAAQAAAAEAAAAUc3RzegAAAAAAAAAGAAAAWAAAAXBzdGNvAAAAAAAAAFgAAAOBAAADhwAAA5oAAAOtAAADswAAA8oAAAPfAAAD5QAAA/gAAAQLAAAEEQAABCgAAAQ9AAAEUAAABFYAAARpAAAEgAAABIYAAASbAAAErgAABLQAAATHAAAE3gAABPMAAAT5AAAFDAAABR8AAAUlAAAFPAAABVEAAAVXAAAFagAABX0AAAWDAAAFmgAABa8AAAXCAAAFyAAABdsAAAXyAAAF+AAABg0AAAYgAAAGJgAABjkAAAZQAAAGZQAABmsAAAZ+AAAGkQAABpcAAAauAAAGwwAABskAAAbcAAAG7wAABwYAAAcMAAAHIQAABzQAAAc6AAAHTQAAB2QAAAdqAAAHfwAAB5IAAAeYAAAHqwAAB8IAAAfXAAAH3QAAB/AAAAgDAAAICQAACCAAAAg1AAAIOwAACE4AAAhhAAAIeAAACH4AAAiRAAAIpAAACKoAAAiwAAAItgAACLwAAAjCAAAAFnVkdGEAAAAObmFtZVN0ZXJlbwAAAHB1ZHRhAAAAaG1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAAO2lsc3QAAAAzqXRvbwAAACtkYXRhAAAAAQAAAABIYW5kQnJha2UgMC4xMC4yIDIwMTUwNjExMDA='
      };
      /***/
    }
    /******/
    ])
  );
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/XTween/Base/XTweenerGroupQueueItem.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '18724U82YBDHI8z6fxyRfsy', 'XTweenerGroupQueueItem');
// Scripts/Tools/XTween/Base/XTweenerGroupQueueItem.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var XTweenGlobal_1 = require("./XTweenGlobal");
var XTweenerGroupQueueItem = /** @class */ (function () {
    function XTweenerGroupQueueItem() {
        this.listTweeners = [];
    }
    XTweenerGroupQueueItem.prototype.AddTweener = function (tweener) {
        this.listTweeners.push(tweener);
    };
    XTweenerGroupQueueItem.prototype.Update = function (deltaTime) {
        for (var i = 0; i < this.listTweeners.length; i++) {
            var tweener = this.listTweeners[i];
            if (tweener.GetState() == XTweenGlobal_1.XTweenerState.BeforePlay) {
                tweener.Play();
            }
            if (tweener.GetState() == XTweenGlobal_1.XTweenerState.Playing) {
                tweener.Update(deltaTime);
            }
        }
    };
    XTweenerGroupQueueItem.prototype.CheckFinish = function () {
        var finish = true;
        for (var i = 0; i < this.listTweeners.length; i++) {
            if (this.listTweeners[i].GetState() != XTweenGlobal_1.XTweenerState.End) {
                finish = false;
                break;
            }
        }
        return finish;
    };
    return XTweenerGroupQueueItem;
}());
exports.default = XTweenerGroupQueueItem;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFhUd2VlblxcQmFzZVxcWFR3ZWVuZXJHcm91cFF1ZXVlSXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLCtDQUErQztBQUUvQztJQUFBO1FBRVksaUJBQVksR0FBcUIsRUFBRSxDQUFDO0lBbUNoRCxDQUFDO0lBbENVLDJDQUFVLEdBQWpCLFVBQWtCLE9BQWtCO1FBRWhDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFTSx1Q0FBTSxHQUFiLFVBQWMsU0FBUztRQUVuQixLQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQzFDO1lBQ0ksSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQyxJQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSw0QkFBYSxDQUFDLFVBQVUsRUFDakQ7Z0JBQ0ksT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2xCO1lBQ0QsSUFBRyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksNEJBQWEsQ0FBQyxPQUFPLEVBQzlDO2dCQUNJLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDN0I7U0FDSjtJQUNMLENBQUM7SUFFTSw0Q0FBVyxHQUFsQjtRQUVJLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztRQUNsQixLQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQzFDO1lBQ0ksSUFBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxJQUFJLDRCQUFhLENBQUMsR0FBRyxFQUN2RDtnQkFDSSxNQUFNLEdBQUcsS0FBSyxDQUFDO2dCQUNmLE1BQU07YUFDVDtTQUNKO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDZCQUFDO0FBQUQsQ0FyQ0EsQUFxQ0MsSUFBQSIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBYVHdlZW5lcklGIGZyb20gXCIuL1hUd2VlbmVySUZcIjtcbmltcG9ydCB7IFhUd2VlbmVyU3RhdGUgfSBmcm9tIFwiLi9YVHdlZW5HbG9iYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWFR3ZWVuZXJHcm91cFF1ZXVlSXRlbVxue1xuICAgIHByaXZhdGUgbGlzdFR3ZWVuZXJzOkFycmF5PFhUd2VlbmVySUY+ID0gW107XG4gICAgcHVibGljIEFkZFR3ZWVuZXIodHdlZW5lcjpYVHdlZW5lcklGKVxuICAgIHtcbiAgICAgICAgdGhpcy5saXN0VHdlZW5lcnMucHVzaCh0d2VlbmVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgVXBkYXRlKGRlbHRhVGltZSlcbiAgICB7XG4gICAgICAgIGZvcihsZXQgaT0wO2k8dGhpcy5saXN0VHdlZW5lcnMubGVuZ3RoO2krKylcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IHR3ZWVuZXIgPSB0aGlzLmxpc3RUd2VlbmVyc1tpXTtcbiAgICAgICAgICAgIGlmKHR3ZWVuZXIuR2V0U3RhdGUoKSA9PSBYVHdlZW5lclN0YXRlLkJlZm9yZVBsYXkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHdlZW5lci5QbGF5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZih0d2VlbmVyLkdldFN0YXRlKCkgPT0gWFR3ZWVuZXJTdGF0ZS5QbGF5aW5nKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR3ZWVuZXIuVXBkYXRlKGRlbHRhVGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgQ2hlY2tGaW5pc2goKTpib29sZWFuXG4gICAge1xuICAgICAgICBsZXQgZmluaXNoID0gdHJ1ZTtcbiAgICAgICAgZm9yKGxldCBpPTA7aTx0aGlzLmxpc3RUd2VlbmVycy5sZW5ndGg7aSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZih0aGlzLmxpc3RUd2VlbmVyc1tpXS5HZXRTdGF0ZSgpICE9IFhUd2VlbmVyU3RhdGUuRW5kKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbmlzaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaW5pc2g7XG4gICAgfVxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Tools/Random.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '5d478uYGKhFMq9TK/yhlbMM', 'Random');
// Scripts/Tools/Random.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Random = /** @class */ (function () {
    function Random() {
    }
    /**
     * 返回一个 [min,max) 的随机整数
     * @param min 最小整数
     * @param max 最大整数
     */
    Random.RangeInt = function (min, max) {
        return Math.floor(Math.random() * (max - min)) + min;
    };
    /**
     * 返回一个 [min,max) 的随机浮点数
     * @param min 最小值
     * @param max 最大值
     */
    Random.RangeFloat = function (min, max) {
        return Math.random() * (max - min) + min;
    };
    /**
     * 返回一个 [0,1) 的随机数
     */
    Random.Range = function () {
        return Math.random();
    };
    return Random;
}());
exports.Random = Random;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcVG9vbHNcXFJhbmRvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUNBO0lBQUE7SUF5QkEsQ0FBQztJQXhCQzs7OztPQUlHO0lBQ0ksZUFBUSxHQUFmLFVBQWdCLEdBQVcsRUFBRSxHQUFXO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDdkQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxpQkFBVSxHQUFqQixVQUFrQixHQUFXLEVBQUUsR0FBVztRQUN4QyxPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDM0MsQ0FBQztJQUVEOztPQUVHO0lBQ0ksWUFBSyxHQUFaO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUNILGFBQUM7QUFBRCxDQXpCQSxBQXlCQyxJQUFBO0FBekJZLHdCQUFNIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgY2xhc3MgUmFuZG9tIHtcbiAgLyoqXG4gICAqIOi/lOWbnuS4gOS4qiBbbWluLG1heCkg55qE6ZqP5py65pW05pWwXG4gICAqIEBwYXJhbSBtaW4g5pyA5bCP5pW05pWwXG4gICAqIEBwYXJhbSBtYXgg5pyA5aSn5pW05pWwXG4gICAqL1xuICBzdGF0aWMgUmFuZ2VJbnQobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xuICB9XG5cbiAgLyoqXG4gICAqIOi/lOWbnuS4gOS4qiBbbWluLG1heCkg55qE6ZqP5py65rWu54K55pWwXG4gICAqIEBwYXJhbSBtaW4g5pyA5bCP5YC8XG4gICAqIEBwYXJhbSBtYXgg5pyA5aSn5YC8XG4gICAqL1xuICBzdGF0aWMgUmFuZ2VGbG9hdChtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW47XG4gIH1cblxuICAvKipcbiAgICog6L+U5Zue5LiA5LiqIFswLDEpIOeahOmaj+acuuaVsFxuICAgKi9cbiAgc3RhdGljIFJhbmdlKCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpO1xuICB9XG59Il19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Network/Socket/TCPSession.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '2613aUtc3JBlaihWuTSnpra', 'TCPSession');
// Scripts/Network/Socket/TCPSession.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TimerManager_1 = require("../../Components/TimerManager");
var DataPacket_1 = require("./DataPacket");
var TCPSendTaskManager_1 = require("./TCPSendTaskManager");
var OpenNetworkingUI_1 = require("../../Tools/OpenNetworkingUI");
var Toast_1 = require("../../Tools/Toast");
var Global_1 = require("../../Global/Global");
var Handshake_1 = require("../../Protos/Handshake");
var Language_1 = require("../../Global/Language");
//对一次网络tcp对话的封装//
var TCPSession = /** @class */ (function () {
    function TCPSession() {
        //获取当前时间为。
        this.lastShowToastUI = Date.now();
        //序列号 1开始。
        this.seq = 1;
        //默认对话 没有绑定小游戏类型。
        // private gameType = GameTypeMgr.Config.None.gameType;
        //msgID对应(游戏类型和数据回调)。
        this.listenDatas = {};
        //握手成功标志。
        this.isHandShake = false;
        //8位无符号整型值 内容
        //A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the
        //* requested number of bytes could not be allocated an exception is raised.
        this.uint8Buffer = new Uint8Array(0);
    }
    TCPSession.prototype.Init = function (sessionID) {
        this.sessionID = sessionID;
    };
    //链接服务器（ip&port）
    TCPSession.prototype.Connect = function (ip, port, funcSuccess, funcFail) {
        var _this = this;
        TCPSendTaskManager_1.default.GetInstance().InitSession(this.sessionID); //为sessionID配置一份数据结构
        this.ip = ip;
        this.port = port;
        this.funcConnectSuccess = funcSuccess;
        this.funcConnectFail = funcFail;
        OpenNetworkingUI_1.default.Show(); //加载界面//
        //绕过闭包this限制
        var outside = this;
        var protocol = document.location.protocol;
        var prefix = "";
        //SSL(Secure Socket Layer，安全套接层) 
        if (protocol == "https:") {
            prefix = "wss://"; //Layer。安全套接层（Secure Socket Layer）上面运行的websocket//
        }
        else {
            prefix = "ws://";
        }
        var host = prefix + ip + ":" + port + "/ws";
        this.webSocket = new WebSocket(host); //初始化绑定host地址的websoket//
        if (Global_1.default.showLog == true)
            cc.log("Connect socket host: " + host);
        TimerManager_1.default.GetInstance().DeleteTimer(this.connectTimeoutTimerID);
        var connectTimeout = 10;
        this.connectTimeoutTimerID = TimerManager_1.default.GetInstance().CallActionDelay(function () {
            _this.Disconnect(); //10秒钟了还没反应,则关闭的一系列操作//
            funcFail("连接超时");
        }, connectTimeout, null, 0, 0, true);
        //套接字开启
        this.webSocket.onopen = function (event) {
            TimerManager_1.default.GetInstance().DeleteTimer(outside.connectTimeoutTimerID);
            OpenNetworkingUI_1.default.Hide();
            if (Global_1.default.showLog == true)
                cc.log("onopen " + event.type + " this.readyState " + this.readyState);
            if (outside.webSocket != null)
                outside.HandShake(funcSuccess, funcFail); //->握手
        };
        //接收服务器消息//
        this.webSocket.onmessage = function (event) {
            // cc.log("onmessage " + event.data + " typeof(event.data) " + typeof(event.data)); 解析数据
            var reader = new FileReader();
            //byte为blob对象 
            reader.readAsArrayBuffer(event.data); //blob对象转array//
            reader.onload = function (e) {
                var buf = new Uint8Array(reader.result);
                if (Global_1.default.showLog == true) {
                    // cc.error(event.data);
                    // cc.error("onreceive " + buf + " e.total " + e.total + " e.loaded " + e.loaded);
                }
                var tmpBuffer = new Uint8Array(outside.uint8Buffer.length + buf.length); //长度的 合并包//
                tmpBuffer.set(outside.uint8Buffer, 0); //
                tmpBuffer.set(buf, outside.uint8Buffer.length); //数据set 粘贴进tmpBuffer//
                outside.uint8Buffer = tmpBuffer; //换一下//
                var packageArray = new Array(); //解包一组 消息号+数据+消息序列号(这条协议的第几次数发送)//
                outside.uint8Buffer = DataPacket_1.default.UnPacket(outside.uint8Buffer, packageArray); //解包拆包 将数据凑一起。//
                //cc.error("outside.uint8Buffer.length " + outside.uint8Buffer.length);
                for (var i = 0; i < packageArray.length; i++) {
                    var packageGet = packageArray[i];
                    if (packageGet.msgID != 1001) {
                        //TODO:加入打印消息//yiba--//
                    }
                    if (packageGet.msgID != 1001) {
                        if (Global_1.default.showLog == true)
                            cc.log("receive: msgID " + packageGet.msgID + " data.length " + packageGet.data.length + " seq: " + packageGet.seq);
                    }
                    if (packageGet.seq != 0) {
                        var task = TCPSendTaskManager_1.default.GetInstance().GetTask(outside.sessionID, packageGet.seq); //获取到对应的task//
                        if (task != null) {
                            task.successCallback(packageGet.data);
                            TCPSendTaskManager_1.default.GetInstance().CancelTask(outside.sessionID, packageGet.seq);
                        }
                    }
                    else {
                        var listenData = outside.listenDatas[packageGet.msgID]; //
                        if (listenData != null) {
                            listenData.func(packageGet.data);
                        }
                    }
                }
            };
        };
        this.webSocket.onerror = function (event) {
            // TimerManager.GetInstance().DeleteTimer(timerID);
            //暂不依赖 onerror 回调
            OpenNetworkingUI_1.default.Hide();
            if (Global_1.default.showLog == true)
                cc.log("onerror " + event.returnValue + " event.type " + event.type);
        };
        this.webSocket.onclose = function (event) {
            // TimerManager.GetInstance().DeleteTimer(timerID);
            if (outside.webSocket != null) {
                //非主动断开
                outside.webSocket = null;
                TCPSendTaskManager_1.default.GetInstance().CleanSession(outside.sessionID);
            }
            if (Global_1.default.showLog == true)
                cc.log("onclose event.returnValue " + event.returnValue);
        };
    };
    TCPSession.prototype.HandShake = function (successCallback, failCallback) {
        var req = Handshake_1.HandshakeRequest.create();
        req.uid = window["selfId"];
        req.token = window["token"];
        var senddata = Handshake_1.HandshakeRequest.encode(req).finish();
        var outside = this;
        this.Send(1, senddata, function (data) {
            var res = Handshake_1.HandshakeResponse.decode(data);
            if (res.statusCode == 0) {
                if (Global_1.default.showLog == true)
                    cc.error("handshake success");
                outside.isHandShake = true;
                successCallback();
            }
            else {
                if (Global_1.default.showLog == true)
                    cc.error("handshake fail");
                outside.isHandShake = false;
                outside.Disconnect();
            }
        }, failCallback, true);
    };
    //关闭websoket 清除TCPSendTaskManager sessionID。
    //删除超时的计时器。
    TCPSession.prototype.Disconnect = function () {
        if (this.webSocket != null) {
            if (this.webSocket.readyState != WebSocket.CLOSED && this.webSocket.readyState != WebSocket.CLOSING)
                this.webSocket.close();
        }
        TCPSendTaskManager_1.default.GetInstance().CleanSession(this.sessionID);
        this.webSocket = null;
        TimerManager_1.default.GetInstance().DeleteTimer(this.connectTimeoutTimerID);
    };
    TCPSession.prototype.Send = function (msgID, data, successCallback, failCallback, hideNetworkingLoading) {
        var _this = this;
        if (this.webSocket == null) {
            //需要重连
            this.Connect(this.ip, this.port, function () {
                Toast_1.default.Show(Language_1.default.text6);
                //因为断网挂起的消息，只会挂起一个
                _this.hangOnSendFunc = function () {
                    _this.Send(msgID, data, successCallback, failCallback, hideNetworkingLoading);
                };
            }, function () {
                if (Date.now() - _this.lastShowToastUI > 1000 * 10) {
                    _this.lastShowToastUI = Date.now();
                    Toast_1.default.Show(Language_1.default.text7);
                }
                _this.Disconnect();
            });
            return;
        }
        if (this.webSocket.readyState != WebSocket.OPEN) {
            cc.error("非连接成功状态下的数据发送 msgID:" + msgID);
            return;
        }
        if (this.isHandShake == false && msgID != 1) {
            cc.error("未验证的连接，发送失败 isHandShake == false msgID:" + msgID);
            Toast_1.default.Show(Language_1.default.text8);
            return;
        }
        var dataSend = DataPacket_1.default.Packet(msgID, this.seq, data);
        TCPSendTaskManager_1.default.GetInstance().AddTask(this.sessionID, msgID, this.seq, data, function (dataRes) {
            if (successCallback != null) {
                if (hideNetworkingLoading == false)
                    OpenNetworkingUI_1.default.Hide();
                successCallback(dataRes);
            }
        }, function (errMsg) {
            OpenNetworkingUI_1.default.Hide();
            if (failCallback != null) {
                failCallback(errMsg);
            }
        });
        if (hideNetworkingLoading == false) {
            OpenNetworkingUI_1.default.Show();
        }
        // if(msgID != 1001){
        if (Global_1.default.showLog == true)
            cc.log("send msg: msgID " + msgID + " seq " + this.seq + " data.length " + data.length);
        // }
        // cc.error("dataSend  " + dataSend);
        this.webSocket.send(dataSend);
        this.seq++;
    };
    TCPSession.prototype.SendOneWay = function (msgID, data) {
        // this.SendOneWayWithGameType(GameTypeMgr.Config.None.gameType,msgID,data)
        if (this.webSocket == null)
            return;
        if (this.webSocket.readyState != WebSocket.OPEN)
            return;
        var dataSend = DataPacket_1.default.Packet(msgID, 0, data);
        this.webSocket.send(dataSend);
        if (Global_1.default.showLog == true)
            cc.log("send oneway msg: msgID " + msgID + " data.length " + data.length);
    };
    TCPSession.prototype.ListenMsg = function (msgID, func) {
        // this.ListenMsgWithGameType(GameTypeMgr.Config.None.gameType,msgID,func)
        var listenData = new ListenData();
        listenData.func = func;
        this.listenDatas[msgID] = listenData;
    };
    TCPSession.prototype.Clean = function () {
        this.Disconnect();
    };
    TCPSession.prototype.ResendHangOnMsg = function () {
        if (this.hangOnSendFunc != null) {
            this.hangOnSendFunc();
            this.hangOnSendFunc = null;
        }
    };
    TCPSession.prototype.RefreshIPAndPort = function (ip, port) {
        this.ip = ip;
        this.port = port;
    };
    TCPSession.prototype.ReConnectWhenHandShakeFail = function () {
        this.Connect(this.ip, this.port, this.funcConnectSuccess, this.funcConnectFail);
    };
    return TCPSession;
}());
exports.default = TCPSession;
var ListenData = /** @class */ (function () {
    function ListenData() {
    }
    return ListenData;
}());

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Manager/UpdateBeat.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd74dfQ143RHJ6XwbyJN8EOz', 'UpdateBeat');
// Scripts/Manager/UpdateBeat.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var UpdateBeat = /** @class */ (function (_super) {
    __extends(UpdateBeat, _super);
    /**
     *
     */
    function UpdateBeat() {
        var _this = _super.call(this) || this;
        _this.dicUpdateFuncs = {};
        // private dicDatas:{[id:number]:any} = {};
        _this.id = 0;
        _this.listWaitToDelete = [];
        _this.lastUpdateTime = Date.now();
        return _this;
    }
    UpdateBeat_1 = UpdateBeat;
    UpdateBeat.GetInstance = function () {
        if (this.m_Instance == null) {
            var node = new cc.Node("UpdateBeat");
            node.setParent(cc.find("Main"));
            this.m_Instance = node.addComponent(UpdateBeat_1);
        }
        return this.m_Instance;
    };
    UpdateBeat.prototype.Add = function (func) {
        if (func == null)
            return;
        this.id++;
        var idStr = this.id.toString();
        this.dicUpdateFuncs[idStr] = func;
        // this.dicDatas[idStr] = data;
        return idStr;
    };
    UpdateBeat.prototype.DeleteUpdateFuncs = function () {
        if (this.listWaitToDelete.length == 0)
            return;
        for (var i = 0; i < this.listWaitToDelete.length; i++) {
            delete this.dicUpdateFuncs[this.listWaitToDelete[i]];
            // delete this.dicDatas[this.listWaitToDelete[i]];
        }
        this.listWaitToDelete = [];
    };
    UpdateBeat.prototype.Remove = function (id) {
        if (id == null) {
            return;
        }
        if (this.dicUpdateFuncs[id] != null)
            this.listWaitToDelete.push(id);
    };
    /**
     * 只有登出的时候调用，其他时候别调用
     */
    // public ClearAll()
    // {
    //     for(let id in this.dicUpdateFuncs)
    //     {
    //         this.listWaitToDelete.push(id);
    //     }
    // }
    UpdateBeat.prototype.update = function (dt) {
        var timeNow = Date.now();
        var deltaTime = (timeNow - this.lastUpdateTime) / 1000;
        this.DeleteUpdateFuncs();
        for (var id in this.dicUpdateFuncs) {
            this.dicUpdateFuncs[id](deltaTime);
        }
        this.DeleteUpdateFuncs();
        this.lastUpdateTime = timeNow;
    };
    var UpdateBeat_1;
    UpdateBeat = UpdateBeat_1 = __decorate([
        ccclass
    ], UpdateBeat);
    return UpdateBeat;
}(cc.Component));
exports.default = UpdateBeat;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTWFuYWdlclxcVXBkYXRlQmVhdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDTSxJQUFBLGtCQUFtQyxFQUFsQyxvQkFBTyxFQUFFLHNCQUF5QixDQUFDO0FBRzFDO0lBQXdDLDhCQUFZO0lBcUJoRDs7T0FFRztJQUNIO1FBQUEsWUFDSSxpQkFBTyxTQUVWO1FBekJPLG9CQUFjLEdBQThCLEVBQUUsQ0FBQztRQUN2RCwyQ0FBMkM7UUFDbkMsUUFBRSxHQUFHLENBQUMsQ0FBQztRQUVQLHNCQUFnQixHQUFpQixFQUFFLENBQUM7UUFvQnhDLEtBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDOztJQUNyQyxDQUFDO21CQTNCZ0IsVUFBVTtJQVViLHNCQUFXLEdBQXpCO1FBRUksSUFBRyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksRUFDMUI7WUFDSSxJQUFJLElBQUksR0FBVyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDaEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVUsQ0FBQyxDQUFDO1NBQ25EO1FBQ0QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzNCLENBQUM7SUFVTSx3QkFBRyxHQUFWLFVBQVcsSUFBNkI7UUFFcEMsSUFBRyxJQUFJLElBQUksSUFBSTtZQUNYLE9BQU87UUFDWCxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDVixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2xDLCtCQUErQjtRQUMvQixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRU8sc0NBQWlCLEdBQXpCO1FBRUksSUFBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxJQUFJLENBQUM7WUFDaEMsT0FBTztRQUNYLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUNoRDtZQUNJLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyRCxrREFBa0Q7U0FDckQ7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFTSwyQkFBTSxHQUFiLFVBQWMsRUFBUztRQUVuQixJQUFHLEVBQUUsSUFBSSxJQUFJLEVBQ2I7WUFDSSxPQUFPO1NBQ1Y7UUFDRCxJQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSTtZQUM5QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7T0FFRztJQUNILG9CQUFvQjtJQUNwQixJQUFJO0lBQ0oseUNBQXlDO0lBQ3pDLFFBQVE7SUFDUiwwQ0FBMEM7SUFDMUMsUUFBUTtJQUNSLElBQUk7SUFFSiwyQkFBTSxHQUFOLFVBQVEsRUFBRTtRQUVOLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN6QixJQUFJLFNBQVMsR0FBRyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRXZELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBRXpCLEtBQUksSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLGNBQWMsRUFDakM7WUFDSSxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFekIsSUFBSSxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUM7SUFDbEMsQ0FBQzs7SUF4RmdCLFVBQVU7UUFEOUIsT0FBTztPQUNhLFVBQVUsQ0F5RjlCO0lBQUQsaUJBQUM7Q0F6RkQsQUF5RkMsQ0F6RnVDLEVBQUUsQ0FBQyxTQUFTLEdBeUZuRDtrQkF6Rm9CLFVBQVUiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IHtjY2NsYXNzLCBwcm9wZXJ0eX0gPSBjYy5fZGVjb3JhdG9yO1xuXG5AY2NjbGFzc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXBkYXRlQmVhdCBleHRlbmRzIGNjLkNvbXBvbmVudCBcbntcbiAgICBwcml2YXRlIGRpY1VwZGF0ZUZ1bmNzOntbaWQ6bnVtYmVyXTooZGF0YSk9PnZvaWR9ID0ge307XG4gICAgLy8gcHJpdmF0ZSBkaWNEYXRhczp7W2lkOm51bWJlcl06YW55fSA9IHt9O1xuICAgIHByaXZhdGUgaWQgPSAwO1xuXG4gICAgcHJpdmF0ZSBsaXN0V2FpdFRvRGVsZXRlOkFycmF5PHN0cmluZz4gPSBbXTtcbiAgICBwcml2YXRlIGxhc3RVcGRhdGVUaW1lO1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgbV9JbnN0YW5jZTpVcGRhdGVCZWF0O1xuICAgIHB1YmxpYyBzdGF0aWMgR2V0SW5zdGFuY2UoKTpVcGRhdGVCZWF0XG4gICAge1xuICAgICAgICBpZih0aGlzLm1fSW5zdGFuY2UgPT0gbnVsbClcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IG5vZGU6Y2MuTm9kZSA9IG5ldyBjYy5Ob2RlKFwiVXBkYXRlQmVhdFwiKTtcbiAgICAgICAgICAgIG5vZGUuc2V0UGFyZW50KGNjLmZpbmQoXCJNYWluXCIpKTtcbiAgICAgICAgICAgIHRoaXMubV9JbnN0YW5jZSA9IG5vZGUuYWRkQ29tcG9uZW50KFVwZGF0ZUJlYXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm1fSW5zdGFuY2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5sYXN0VXBkYXRlVGltZSA9IERhdGUubm93KCk7XG4gICAgfVxuXG4gICAgcHVibGljIEFkZChmdW5jOihkZWx0YVRpbWU6bnVtYmVyKT0+dm9pZCk6c3RyaW5nXG4gICAge1xuICAgICAgICBpZihmdW5jID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuaWQrKztcbiAgICAgICAgbGV0IGlkU3RyID0gdGhpcy5pZC50b1N0cmluZygpO1xuICAgICAgICB0aGlzLmRpY1VwZGF0ZUZ1bmNzW2lkU3RyXSA9IGZ1bmM7XG4gICAgICAgIC8vIHRoaXMuZGljRGF0YXNbaWRTdHJdID0gZGF0YTtcbiAgICAgICAgcmV0dXJuIGlkU3RyO1xuICAgIH1cblxuICAgIHByaXZhdGUgRGVsZXRlVXBkYXRlRnVuY3MoKVxuICAgIHtcbiAgICAgICAgaWYodGhpcy5saXN0V2FpdFRvRGVsZXRlLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBmb3IobGV0IGkgPSAwO2k8dGhpcy5saXN0V2FpdFRvRGVsZXRlLmxlbmd0aDtpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRpY1VwZGF0ZUZ1bmNzW3RoaXMubGlzdFdhaXRUb0RlbGV0ZVtpXV07XG4gICAgICAgICAgICAvLyBkZWxldGUgdGhpcy5kaWNEYXRhc1t0aGlzLmxpc3RXYWl0VG9EZWxldGVbaV1dO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGlzdFdhaXRUb0RlbGV0ZSA9IFtdO1xuICAgIH1cblxuICAgIHB1YmxpYyBSZW1vdmUoaWQ6c3RyaW5nKVxuICAgIHtcbiAgICAgICAgaWYoaWQgPT0gbnVsbClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmKHRoaXMuZGljVXBkYXRlRnVuY3NbaWRdICE9IG51bGwpXG4gICAgICAgICAgICB0aGlzLmxpc3RXYWl0VG9EZWxldGUucHVzaChpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Y+q5pyJ55m75Ye655qE5pe25YCZ6LCD55So77yM5YW25LuW5pe25YCZ5Yir6LCD55SoXG4gICAgICovXG4gICAgLy8gcHVibGljIENsZWFyQWxsKClcbiAgICAvLyB7XG4gICAgLy8gICAgIGZvcihsZXQgaWQgaW4gdGhpcy5kaWNVcGRhdGVGdW5jcylcbiAgICAvLyAgICAge1xuICAgIC8vICAgICAgICAgdGhpcy5saXN0V2FpdFRvRGVsZXRlLnB1c2goaWQpO1xuICAgIC8vICAgICB9XG4gICAgLy8gfVxuXG4gICAgdXBkYXRlIChkdCkgXG4gICAge1xuICAgICAgICBsZXQgdGltZU5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIGxldCBkZWx0YVRpbWUgPSAodGltZU5vdyAtIHRoaXMubGFzdFVwZGF0ZVRpbWUpIC8gMTAwMDtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuRGVsZXRlVXBkYXRlRnVuY3MoKTtcbiAgICAgICAgXG4gICAgICAgIGZvcihsZXQgaWQgaW4gdGhpcy5kaWNVcGRhdGVGdW5jcylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5kaWNVcGRhdGVGdW5jc1tpZF0oZGVsdGFUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuRGVsZXRlVXBkYXRlRnVuY3MoKTtcblxuICAgICAgICB0aGlzLmxhc3RVcGRhdGVUaW1lID0gdGltZU5vdztcbiAgICB9XG59XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Components/ResizeComponent.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f68e9QZzNVKJ6qv0bcCVep9', 'ResizeComponent');
// Scripts/Components/ResizeComponent.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var ResizeComponent = /** @class */ (function (_super) {
    __extends(ResizeComponent, _super);
    function ResizeComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ResizeComponent.prototype.Resize = function () {
        var canvas = cc.Canvas.instance;
        canvas.fitWidth = true;
        canvas.fitHeight = true;
        var frameWidth = cc.view.getFrameSize().width;
        var frameHeight = cc.view.getFrameSize().height;
        if (frameHeight / frameWidth > 16 / 9) {
            canvas.designResolution = new cc.Size(720, frameHeight / (frameWidth / 720));
        }
        else {
            canvas.designResolution = new cc.Size(frameWidth / frameHeight * 1280, 1280);
        }
    };
    ResizeComponent.prototype.onLoad = function () {
        var _this = this;
        this.Resize();
        if (cc.sys.os != cc.sys.OS_ANDROID) {
            window.addEventListener("resize", function () {
                _this.Resize();
            });
        }
    };
    ResizeComponent = __decorate([
        ccclass
    ], ResizeComponent);
    return ResizeComponent;
}(cc.Component));
exports.default = ResizeComponent;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcQ29tcG9uZW50c1xcUmVzaXplQ29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFNLElBQUEsa0JBQW1DLEVBQWxDLG9CQUFPLEVBQUUsc0JBQXlCLENBQUM7QUFHMUM7SUFBNkMsbUNBQVk7SUFBekQ7O0lBZ0NBLENBQUM7SUE5QlcsZ0NBQU0sR0FBZDtRQUVJLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQzlDLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsTUFBTSxDQUFDO1FBRWhELElBQUcsV0FBVyxHQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUMsQ0FBQyxFQUNoQztZQUNJLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFdBQVcsR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2hGO2FBRUQ7WUFDSSxNQUFNLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxXQUFXLEdBQUcsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzlFO0lBQ0wsQ0FBQztJQUVELGdDQUFNLEdBQU47UUFBQSxpQkFVQztRQVRHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVkLElBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQ2pDO1lBQ0ksTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBQztnQkFDN0IsS0FBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2xCLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFFTCxDQUFDO0lBOUJnQixlQUFlO1FBRG5DLE9BQU87T0FDYSxlQUFlLENBZ0NuQztJQUFELHNCQUFDO0NBaENELEFBZ0NDLENBaEM0QyxFQUFFLENBQUMsU0FBUyxHQWdDeEQ7a0JBaENvQixlQUFlIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge2NjY2xhc3MsIHByb3BlcnR5fSA9IGNjLl9kZWNvcmF0b3I7XG5cbkBjY2NsYXNzXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXNpemVDb21wb25lbnQgZXh0ZW5kcyBjYy5Db21wb25lbnQge1xuXG4gICAgcHJpdmF0ZSBSZXNpemUoKVxuICAgIHtcbiAgICAgICAgbGV0IGNhbnZhcyA9IGNjLkNhbnZhcy5pbnN0YW5jZTtcbiAgICAgICAgY2FudmFzLmZpdFdpZHRoID0gdHJ1ZTtcbiAgICAgICAgY2FudmFzLmZpdEhlaWdodCA9IHRydWU7XG4gICAgICAgIGxldCBmcmFtZVdpZHRoID0gY2Mudmlldy5nZXRGcmFtZVNpemUoKS53aWR0aDtcbiAgICAgICAgbGV0IGZyYW1lSGVpZ2h0ID0gY2Mudmlldy5nZXRGcmFtZVNpemUoKS5oZWlnaHQ7XG5cbiAgICAgICAgaWYoZnJhbWVIZWlnaHQvZnJhbWVXaWR0aCA+IDE2LzkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNhbnZhcy5kZXNpZ25SZXNvbHV0aW9uID0gbmV3IGNjLlNpemUoNzIwLCBmcmFtZUhlaWdodCAvIChmcmFtZVdpZHRoIC8gNzIwKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICBjYW52YXMuZGVzaWduUmVzb2x1dGlvbiA9IG5ldyBjYy5TaXplKGZyYW1lV2lkdGgvZnJhbWVIZWlnaHQgKiAxMjgwLCAxMjgwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uTG9hZCAoKSB7XG4gICAgICAgIHRoaXMuUmVzaXplKCk7XG4gICAgICAgIFxuICAgICAgICBpZihjYy5zeXMub3MgIT0gY2Muc3lzLk9TX0FORFJPSUQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLlJlc2l6ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuXG59XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Components/QRCodeComponent.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '17ab5zAab5MEa0BzemXboEb', 'QRCodeComponent');
// Scripts/Components/QRCodeComponent.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var JSGenQrcode_1 = require("../JsTool/JSGenQrcode");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var QRCodeComponent = /** @class */ (function (_super) {
    __extends(QRCodeComponent, _super);
    function QRCodeComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QRCodeComponent.prototype.Gen = function (url) {
        var graphic = this.node.getComponent(cc.Graphics);
        if (graphic == null) {
            graphic = this.node.addComponent(cc.Graphics);
        }
        graphic.clear();
        graphic.fillColor = cc.Color.BLACK;
        var size = this.node.width;
        var data = JSGenQrcode_1.JSGenQrcode.Gen(url);
        var num = data.length;
        var tileW = size / num;
        var tileH = size / num;
        for (var row = 0; row < num; row++) {
            for (var col = 0; col < num; col++) {
                if (data[row][col]) {
                    var w = (Math.ceil((col + 1) * tileW) - Math.floor(col * tileW));
                    var h = (Math.ceil((row + 1) * tileW) - Math.floor(row * tileW));
                    graphic.rect(Math.round(col * tileW) - size / 2, size - tileH - Math.round(row * tileH) - size / 2, w, h);
                    graphic.fill();
                }
                else {
                    // graphic.fillColor = cc.Color.WHITE;
                    // var w = (Math.ceil((col + 1) * tileW) - Math.floor(col * tileW));
                    // var h = (Math.ceil((row + 1) * tileW) - Math.floor(row * tileW));
                    // graphic.rect(Math.round(col * tileW), size - tileH - Math.round(row * tileH), w, h);
                    // graphic.fill();
                }
            }
        }
    };
    QRCodeComponent = __decorate([
        ccclass
    ], QRCodeComponent);
    return QRCodeComponent;
}(cc.Component));
exports.default = QRCodeComponent;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcQ29tcG9uZW50c1xcUVJDb2RlQ29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHFEQUFvRDtBQUU5QyxJQUFBLGtCQUFtQyxFQUFsQyxvQkFBTyxFQUFFLHNCQUF5QixDQUFDO0FBSTFDO0lBQTZDLG1DQUFZO0lBQXpEOztJQXdDQSxDQUFDO0lBckNVLDZCQUFHLEdBQVYsVUFBVyxHQUFVO1FBRWpCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsRCxJQUFHLE9BQU8sSUFBSSxJQUFJLEVBQ2xCO1lBQ0ksT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNqRDtRQUNELE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ25DLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzNCLElBQUksSUFBSSxHQUFHLHlCQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUM3QixJQUFJLEtBQUssR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2pCLEtBQUksSUFBSSxHQUFHLEdBQUMsQ0FBQyxFQUFDLEdBQUcsR0FBQyxHQUFHLEVBQUMsR0FBRyxFQUFFLEVBQzNCO1lBQ0ksS0FBSSxJQUFJLEdBQUcsR0FBQyxDQUFDLEVBQUMsR0FBRyxHQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUUsRUFDM0I7Z0JBQ0ksSUFBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQ2pCO29CQUNJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNqRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDakUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQzFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDbEI7cUJBRUQ7b0JBQ0ksc0NBQXNDO29CQUN0QyxvRUFBb0U7b0JBQ3BFLG9FQUFvRTtvQkFDcEUsdUZBQXVGO29CQUN2RixrQkFBa0I7aUJBQ3JCO2FBQ0o7U0FDSjtJQUNMLENBQUM7SUF0Q2dCLGVBQWU7UUFGbkMsT0FBTztPQUVhLGVBQWUsQ0F3Q25DO0lBQUQsc0JBQUM7Q0F4Q0QsQUF3Q0MsQ0F4QzRDLEVBQUUsQ0FBQyxTQUFTLEdBd0N4RDtrQkF4Q29CLGVBQWUiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKU0dlblFyY29kZSB9IGZyb20gXCIuLi9Kc1Rvb2wvSlNHZW5RcmNvZGVcIjtcblxuY29uc3Qge2NjY2xhc3MsIHByb3BlcnR5fSA9IGNjLl9kZWNvcmF0b3I7XG5cbkBjY2NsYXNzXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFFSQ29kZUNvbXBvbmVudCBleHRlbmRzIGNjLkNvbXBvbmVudCBcbntcblxuICAgIHB1YmxpYyBHZW4odXJsOnN0cmluZylcbiAgICB7XG4gICAgICAgIGxldCBncmFwaGljID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChjYy5HcmFwaGljcyk7XG4gICAgICAgIGlmKGdyYXBoaWMgPT0gbnVsbClcbiAgICAgICAge1xuICAgICAgICAgICAgZ3JhcGhpYyA9IHRoaXMubm9kZS5hZGRDb21wb25lbnQoY2MuR3JhcGhpY3MpO1xuICAgICAgICB9XG4gICAgICAgIGdyYXBoaWMuY2xlYXIoKTtcbiAgICAgICAgZ3JhcGhpYy5maWxsQ29sb3IgPSBjYy5Db2xvci5CTEFDSztcbiAgICAgICAgbGV0IHNpemUgPSB0aGlzLm5vZGUud2lkdGg7XG4gICAgICAgIGxldCBkYXRhID0gSlNHZW5RcmNvZGUuR2VuKHVybCk7XG4gICAgICAgIGxldCBudW0gPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgdmFyIHRpbGVXID0gc2l6ZSAvIG51bTtcblx0XHR2YXIgdGlsZUggPSBzaXplIC8gbnVtO1xuICAgICAgICBmb3IobGV0IHJvdz0wO3JvdzxudW07cm93KyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvcihsZXQgY29sPTA7Y29sPG51bTtjb2wrKylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZihkYXRhW3Jvd11bY29sXSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3ID0gKE1hdGguY2VpbCgoY29sICsgMSkgKiB0aWxlVykgLSBNYXRoLmZsb29yKGNvbCAqIHRpbGVXKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoID0gKE1hdGguY2VpbCgocm93ICsgMSkgKiB0aWxlVykgLSBNYXRoLmZsb29yKHJvdyAqIHRpbGVXKSk7XG4gICAgICAgICAgICAgICAgICAgIGdyYXBoaWMucmVjdChNYXRoLnJvdW5kKGNvbCAqIHRpbGVXKSAtIHNpemUgLyAyLCBzaXplIC0gdGlsZUggLSBNYXRoLnJvdW5kKHJvdyAqIHRpbGVIKSAtIHNpemUgLyAyLCB3LCBoKTtcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGhpYy5maWxsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGdyYXBoaWMuZmlsbENvbG9yID0gY2MuQ29sb3IuV0hJVEU7XG4gICAgICAgICAgICAgICAgICAgIC8vIHZhciB3ID0gKE1hdGguY2VpbCgoY29sICsgMSkgKiB0aWxlVykgLSBNYXRoLmZsb29yKGNvbCAqIHRpbGVXKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHZhciBoID0gKE1hdGguY2VpbCgocm93ICsgMSkgKiB0aWxlVykgLSBNYXRoLmZsb29yKHJvdyAqIHRpbGVXKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGdyYXBoaWMucmVjdChNYXRoLnJvdW5kKGNvbCAqIHRpbGVXKSwgc2l6ZSAtIHRpbGVIIC0gTWF0aC5yb3VuZChyb3cgKiB0aWxlSCksIHcsIGgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBncmFwaGljLmZpbGwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Components/ScrollViewListener.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '19a69412WNKS5S50MTIt39M', 'ScrollViewListener');
// Scripts/Components/ScrollViewListener.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var ScrollViewListener = /** @class */ (function (_super) {
    __extends(ScrollViewListener, _super);
    function ScrollViewListener() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScrollViewListener.prototype.SetScrollEventAction = function (callback) {
        this.scrollEventAction = callback;
    };
    ScrollViewListener.prototype.onLoad = function () {
        this.scrollEventHandler = new cc.Component.EventHandler();
        this.scrollEventHandler.target = this.node;
        this.scrollEventHandler.component = "ScrollViewListener";
        this.scrollEventHandler.handler = "OnScrollCallback";
        this.scrollView = this.node.getComponent(cc.ScrollView);
        this.scrollView.scrollEvents.push(this.scrollEventHandler);
    };
    ScrollViewListener.prototype.OnScrollCallback = function (scrollView, eventType, customEventData) {
        if (this.scrollEventAction != null)
            this.scrollEventAction(scrollView, eventType, customEventData);
    };
    ScrollViewListener = __decorate([
        ccclass
    ], ScrollViewListener);
    return ScrollViewListener;
}(cc.Component));
exports.default = ScrollViewListener;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcQ29tcG9uZW50c1xcU2Nyb2xsVmlld0xpc3RlbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFNLElBQUEsa0JBQW1DLEVBQWxDLG9CQUFPLEVBQUUsc0JBQXlCLENBQUM7QUFHMUM7SUFBZ0Qsc0NBQVk7SUFBNUQ7O0lBMkJBLENBQUM7SUFyQlUsaURBQW9CLEdBQTNCLFVBQTRCLFFBQXNGO1FBRTlHLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxRQUFRLENBQUM7SUFDdEMsQ0FBQztJQUVELG1DQUFNLEdBQU47UUFFSSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzFELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUMzQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxHQUFHLG9CQUFvQixDQUFDO1FBQ3pELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEdBQUcsa0JBQWtCLENBQUM7UUFFckQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCw2Q0FBZ0IsR0FBaEIsVUFBaUIsVUFBd0IsRUFBRSxTQUFpQyxFQUFFLGVBQXNCO1FBRWhHLElBQUksSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUk7WUFDOUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQTFCZ0Isa0JBQWtCO1FBRHRDLE9BQU87T0FDYSxrQkFBa0IsQ0EyQnRDO0lBQUQseUJBQUM7Q0EzQkQsQUEyQkMsQ0EzQitDLEVBQUUsQ0FBQyxTQUFTLEdBMkIzRDtrQkEzQm9CLGtCQUFrQiIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtjY2NsYXNzLCBwcm9wZXJ0eX0gPSBjYy5fZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3NcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Nyb2xsVmlld0xpc3RlbmVyIGV4dGVuZHMgY2MuQ29tcG9uZW50IFxyXG57XHJcbiAgICBwcml2YXRlIHNjcm9sbFZpZXc6Y2MuU2Nyb2xsVmlldztcclxuICAgIHByaXZhdGUgc2Nyb2xsRXZlbnRIYW5kbGVyOmNjLkNvbXBvbmVudC5FdmVudEhhbmRsZXI7XHJcbiAgICBwcml2YXRlIHNjcm9sbEV2ZW50QWN0aW9uOihzY3JvbGxWaWV3OmNjLlNjcm9sbFZpZXcsIGV2ZW50VHlwZTpjYy5TY3JvbGxWaWV3LkV2ZW50VHlwZSwgZGF0YTphbnkpPT52b2lkO1xyXG5cclxuICAgIHB1YmxpYyBTZXRTY3JvbGxFdmVudEFjdGlvbihjYWxsYmFjazooc2Nyb2xsVmlldzpjYy5TY3JvbGxWaWV3LCBldmVudFR5cGU6Y2MuU2Nyb2xsVmlldy5FdmVudFR5cGUsIGRhdGE6YW55KT0+dm9pZClcclxuICAgIHtcclxuICAgICAgICB0aGlzLnNjcm9sbEV2ZW50QWN0aW9uID0gY2FsbGJhY2s7XHJcbiAgICB9XHJcblxyXG4gICAgb25Mb2FkKCkgXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5zY3JvbGxFdmVudEhhbmRsZXIgPSBuZXcgY2MuQ29tcG9uZW50LkV2ZW50SGFuZGxlcigpO1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsRXZlbnRIYW5kbGVyLnRhcmdldCA9IHRoaXMubm9kZTtcclxuICAgICAgICB0aGlzLnNjcm9sbEV2ZW50SGFuZGxlci5jb21wb25lbnQgPSBcIlNjcm9sbFZpZXdMaXN0ZW5lclwiO1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsRXZlbnRIYW5kbGVyLmhhbmRsZXIgPSBcIk9uU2Nyb2xsQ2FsbGJhY2tcIjtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnNjcm9sbFZpZXcgPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KGNjLlNjcm9sbFZpZXcpO1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsVmlldy5zY3JvbGxFdmVudHMucHVzaCh0aGlzLnNjcm9sbEV2ZW50SGFuZGxlcik7XHJcbiAgICB9XHJcblxyXG4gICAgT25TY3JvbGxDYWxsYmFjayhzY3JvbGxWaWV3OmNjLlNjcm9sbFZpZXcsIGV2ZW50VHlwZTpjYy5TY3JvbGxWaWV3LkV2ZW50VHlwZSwgY3VzdG9tRXZlbnREYXRhOnN0cmluZykgXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2Nyb2xsRXZlbnRBY3Rpb24gIT0gbnVsbClcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGxFdmVudEFjdGlvbihzY3JvbGxWaWV3LCBldmVudFR5cGUsIGN1c3RvbUV2ZW50RGF0YSk7XHJcbiAgICB9XHJcbn1cclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Components/ButtonListener.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '41e5e4OSOFMO6vOusXfiupi', 'ButtonListener');
// Scripts/Components/ButtonListener.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var ButtonListener = /** @class */ (function (_super) {
    __extends(ButtonListener, _super);
    function ButtonListener() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ButtonListener.prototype.Init = function () {
        this.clickEventHandler = new cc.Component.EventHandler();
        this.clickEventHandler.target = this.node;
        this.clickEventHandler.component = "ButtonListener";
        this.clickEventHandler.handler = "OnClickCallback";
        this.button = this.node.getComponent(cc.Button);
        this.button.clickEvents = [];
        this.button.clickEvents.push(this.clickEventHandler);
    };
    ButtonListener.prototype.SetData = function (data) {
        this.clickEventHandler.customEventData = data;
    };
    ButtonListener.prototype.SetAudioName = function (audioName) {
        this.audioName = audioName;
    };
    ButtonListener.prototype.SetOnClickCallback = function (callback) {
        this.onclickCallback = callback;
    };
    ButtonListener.prototype.onLoad = function () {
    };
    ButtonListener.prototype.OnClickCallback = function (event, customEventData) {
        if (this.onclickCallback != null) {
            this.onclickCallback(this.button, customEventData);
            // if(this.audioName == null)
            // {
            //     this.audioName = "MainGame/_Audio/_HallAudio/Click_btn";
            // }
            // AudioManager.GetInstance().SoundPlay(this.audioName);
            /* TODO:A
        if audioName == nil then
            local btnName = string.lower(button.name)

            local containClose = string.contains(btnName, "close")
            local containBack = string.contains(btnName, "back")
            local containExit = string.contains(btnName, "exit")

            if containBack or containClose or containExit then
                AudioManager:GetInstance():SoundPlay(Res.Audios.SoundClose)
            else
                AudioManager:GetInstance():SoundPlay(Res.Audios.SoundClick)
            end
        else
            if audioName~="" then
                AudioManager:GetInstance():SoundPlay(audioName)
            end
        end
        */
        }
    };
    ButtonListener = __decorate([
        ccclass
    ], ButtonListener);
    return ButtonListener;
}(cc.Component));
exports.default = ButtonListener;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcQ29tcG9uZW50c1xcQnV0dG9uTGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRU0sSUFBQSxrQkFBbUMsRUFBbEMsb0JBQU8sRUFBRSxzQkFBeUIsQ0FBQztBQUcxQztJQUE0QyxrQ0FBWTtJQUF4RDs7SUEyRUEsQ0FBQztJQXBFVSw2QkFBSSxHQUFYO1FBRUksSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN6RCxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDMUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztRQUNwRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxHQUFHLGlCQUFpQixDQUFDO1FBRW5ELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVNLGdDQUFPLEdBQWQsVUFBZSxJQUFXO1FBRXRCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0lBQ2xELENBQUM7SUFFTSxxQ0FBWSxHQUFuQixVQUFvQixTQUFnQjtRQUdoQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUMvQixDQUFDO0lBRU0sMkNBQWtCLEdBQXpCLFVBQTBCLFFBQTBDO1FBRWhFLElBQUksQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDO0lBQ3BDLENBQUM7SUFFRCwrQkFBTSxHQUFOO0lBR0EsQ0FBQztJQUVELHdDQUFlLEdBQWYsVUFBZ0IsS0FBZ0IsRUFBQyxlQUFzQjtRQUVuRCxJQUFHLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxFQUMvQjtZQUNJLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBQyxlQUFlLENBQUMsQ0FBQztZQUVsRCw2QkFBNkI7WUFDN0IsSUFBSTtZQUNKLCtEQUErRDtZQUMvRCxJQUFJO1lBQ0osd0RBQXdEO1lBQ3hEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7VUFrQkY7U0FDRDtJQUNMLENBQUM7SUF2RWdCLGNBQWM7UUFEbEMsT0FBTztPQUNhLGNBQWMsQ0EyRWxDO0lBQUQscUJBQUM7Q0EzRUQsQUEyRUMsQ0EzRTJDLEVBQUUsQ0FBQyxTQUFTLEdBMkV2RDtrQkEzRW9CLGNBQWMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXVkaW9NYW5hZ2VyIGZyb20gXCIuLi9NYW5hZ2VyL0F1ZGlvTWFuYWdlclwiO1xuXG5jb25zdCB7Y2NjbGFzcywgcHJvcGVydHl9ID0gY2MuX2RlY29yYXRvcjtcblxuQGNjY2xhc3NcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1dHRvbkxpc3RlbmVyIGV4dGVuZHMgY2MuQ29tcG9uZW50IFxue1xuICAgIHByaXZhdGUgY2xpY2tFdmVudEhhbmRsZXI6Y2MuQ29tcG9uZW50LkV2ZW50SGFuZGxlcjtcbiAgICBwcml2YXRlIGJ1dHRvbjpjYy5CdXR0b247XG4gICAgcHJpdmF0ZSBvbmNsaWNrQ2FsbGJhY2s6KGJ1dHRvbjpjYy5CdXR0b24sZGF0YTphbnkpPT52b2lkO1xuICAgIHByaXZhdGUgYXVkaW9OYW1lOnN0cmluZztcblxuICAgIHB1YmxpYyBJbml0KClcbiAgICB7XG4gICAgICAgIHRoaXMuY2xpY2tFdmVudEhhbmRsZXIgPSBuZXcgY2MuQ29tcG9uZW50LkV2ZW50SGFuZGxlcigpO1xuICAgICAgICB0aGlzLmNsaWNrRXZlbnRIYW5kbGVyLnRhcmdldCA9IHRoaXMubm9kZTtcbiAgICAgICAgdGhpcy5jbGlja0V2ZW50SGFuZGxlci5jb21wb25lbnQgPSBcIkJ1dHRvbkxpc3RlbmVyXCI7XG4gICAgICAgIHRoaXMuY2xpY2tFdmVudEhhbmRsZXIuaGFuZGxlciA9IFwiT25DbGlja0NhbGxiYWNrXCI7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmJ1dHRvbiA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoY2MuQnV0dG9uKTtcbiAgICAgICAgdGhpcy5idXR0b24uY2xpY2tFdmVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5idXR0b24uY2xpY2tFdmVudHMucHVzaCh0aGlzLmNsaWNrRXZlbnRIYW5kbGVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgU2V0RGF0YShkYXRhOnN0cmluZylcbiAgICB7XG4gICAgICAgIHRoaXMuY2xpY2tFdmVudEhhbmRsZXIuY3VzdG9tRXZlbnREYXRhID0gZGF0YTtcbiAgICB9XG5cbiAgICBwdWJsaWMgU2V0QXVkaW9OYW1lKGF1ZGlvTmFtZTpzdHJpbmcpXG4gICAge1xuICAgIFxuICAgICAgICB0aGlzLmF1ZGlvTmFtZSA9IGF1ZGlvTmFtZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgU2V0T25DbGlja0NhbGxiYWNrKGNhbGxiYWNrOihidXR0b246Y2MuQnV0dG9uLGRhdGE6YW55KT0+dm9pZClcbiAgICB7XG4gICAgICAgIHRoaXMub25jbGlja0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgb25Mb2FkKCkgXG4gICAge1xuICAgICAgICBcbiAgICB9XG5cbiAgICBPbkNsaWNrQ2FsbGJhY2soZXZlbnQ6VG91Y2hFdmVudCxjdXN0b21FdmVudERhdGE6c3RyaW5nKVxuICAgIHtcbiAgICAgICAgaWYodGhpcy5vbmNsaWNrQ2FsbGJhY2sgIT0gbnVsbClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5vbmNsaWNrQ2FsbGJhY2sodGhpcy5idXR0b24sY3VzdG9tRXZlbnREYXRhKTtcblxuICAgICAgICAgICAgLy8gaWYodGhpcy5hdWRpb05hbWUgPT0gbnVsbClcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICB0aGlzLmF1ZGlvTmFtZSA9IFwiTWFpbkdhbWUvX0F1ZGlvL19IYWxsQXVkaW8vQ2xpY2tfYnRuXCI7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAvLyBBdWRpb01hbmFnZXIuR2V0SW5zdGFuY2UoKS5Tb3VuZFBsYXkodGhpcy5hdWRpb05hbWUpO1xuICAgICAgICAgICAgLyogVE9ETzpBXG4gICAgICAgIGlmIGF1ZGlvTmFtZSA9PSBuaWwgdGhlblxuICAgICAgICAgICAgbG9jYWwgYnRuTmFtZSA9IHN0cmluZy5sb3dlcihidXR0b24ubmFtZSlcblxuICAgICAgICAgICAgbG9jYWwgY29udGFpbkNsb3NlID0gc3RyaW5nLmNvbnRhaW5zKGJ0bk5hbWUsIFwiY2xvc2VcIilcbiAgICAgICAgICAgIGxvY2FsIGNvbnRhaW5CYWNrID0gc3RyaW5nLmNvbnRhaW5zKGJ0bk5hbWUsIFwiYmFja1wiKVxuICAgICAgICAgICAgbG9jYWwgY29udGFpbkV4aXQgPSBzdHJpbmcuY29udGFpbnMoYnRuTmFtZSwgXCJleGl0XCIpXG5cbiAgICAgICAgICAgIGlmIGNvbnRhaW5CYWNrIG9yIGNvbnRhaW5DbG9zZSBvciBjb250YWluRXhpdCB0aGVuXG4gICAgICAgICAgICAgICAgQXVkaW9NYW5hZ2VyOkdldEluc3RhbmNlKCk6U291bmRQbGF5KFJlcy5BdWRpb3MuU291bmRDbG9zZSlcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBBdWRpb01hbmFnZXI6R2V0SW5zdGFuY2UoKTpTb3VuZFBsYXkoUmVzLkF1ZGlvcy5Tb3VuZENsaWNrKVxuICAgICAgICAgICAgZW5kXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGlmIGF1ZGlvTmFtZX49XCJcIiB0aGVuXG4gICAgICAgICAgICAgICAgQXVkaW9NYW5hZ2VyOkdldEluc3RhbmNlKCk6U291bmRQbGF5KGF1ZGlvTmFtZSlcbiAgICAgICAgICAgIGVuZFxuICAgICAgICBlbmRcbiAgICAgICAgKi9cbiAgICAgICAgfVxuICAgIH1cbiAgICBcblxuXG59XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Components/SliderListener.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '8e56fY7uMJNM51FZOnTmVnH', 'SliderListener');
// Scripts/Components/SliderListener.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var SliderListener = /** @class */ (function (_super) {
    __extends(SliderListener, _super);
    function SliderListener() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SliderListener.prototype.SetSliderValueChangeCallback = function (callback) {
        this.sliderEventAction = callback;
    };
    SliderListener.prototype.onLoad = function () {
        this.sliderEventHandler = new cc.Component.EventHandler();
        this.sliderEventHandler.target = this.node;
        this.sliderEventHandler.component = "SliderListener";
        this.sliderEventHandler.handler = "OnValueCallback";
        this.slider = this.node.getComponent(cc.Slider);
        this.slider.slideEvents.push(this.sliderEventHandler);
    };
    SliderListener.prototype.OnValueCallback = function (slider, customEventData) {
        this.sliderEventAction(slider, customEventData);
    };
    SliderListener = __decorate([
        ccclass
    ], SliderListener);
    return SliderListener;
}(cc.Component));
exports.default = SliderListener;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcQ29tcG9uZW50c1xcU2xpZGVyTGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU0sSUFBQSxrQkFBbUMsRUFBbEMsb0JBQU8sRUFBRSxzQkFBeUIsQ0FBQztBQUcxQztJQUE0QyxrQ0FBWTtJQUF4RDs7SUEwQkEsQ0FBQztJQXBCVSxxREFBNEIsR0FBbkMsVUFBb0MsUUFBMEM7UUFFMUUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFFBQVEsQ0FBQztJQUN0QyxDQUFDO0lBRUQsK0JBQU0sR0FBTjtRQUVJLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDMUQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzNDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUM7UUFDckQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQztRQUVwRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELHdDQUFlLEdBQWYsVUFBZ0IsTUFBZ0IsRUFBRSxlQUFzQjtRQUVwRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUF6QmdCLGNBQWM7UUFEbEMsT0FBTztPQUNhLGNBQWMsQ0EwQmxDO0lBQUQscUJBQUM7Q0ExQkQsQUEwQkMsQ0ExQjJDLEVBQUUsQ0FBQyxTQUFTLEdBMEJ2RDtrQkExQm9CLGNBQWMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7Y2NjbGFzcywgcHJvcGVydHl9ID0gY2MuX2RlY29yYXRvcjtcblxuQGNjY2xhc3NcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNsaWRlckxpc3RlbmVyIGV4dGVuZHMgY2MuQ29tcG9uZW50IHtcblxuICAgIHByaXZhdGUgc2xpZGVyOmNjLlNsaWRlcjtcbiAgICBwcml2YXRlIHNsaWRlckV2ZW50SGFuZGxlcjpjYy5Db21wb25lbnQuRXZlbnRIYW5kbGVyO1xuICAgIHByaXZhdGUgc2xpZGVyRXZlbnRBY3Rpb246KHNsaWRlcjpjYy5TbGlkZXIsZGF0YTphbnkpPT52b2lkO1xuXG4gICAgcHVibGljIFNldFNsaWRlclZhbHVlQ2hhbmdlQ2FsbGJhY2soY2FsbGJhY2s6KHNsaWRlcjpjYy5TbGlkZXIsZGF0YTphbnkpPT52b2lkKVxuICAgIHtcbiAgICAgICAgdGhpcy5zbGlkZXJFdmVudEFjdGlvbiA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIG9uTG9hZCgpIFxuICAgIHtcbiAgICAgICAgdGhpcy5zbGlkZXJFdmVudEhhbmRsZXIgPSBuZXcgY2MuQ29tcG9uZW50LkV2ZW50SGFuZGxlcigpO1xuICAgICAgICB0aGlzLnNsaWRlckV2ZW50SGFuZGxlci50YXJnZXQgPSB0aGlzLm5vZGU7XG4gICAgICAgIHRoaXMuc2xpZGVyRXZlbnRIYW5kbGVyLmNvbXBvbmVudCA9IFwiU2xpZGVyTGlzdGVuZXJcIjtcbiAgICAgICAgdGhpcy5zbGlkZXJFdmVudEhhbmRsZXIuaGFuZGxlciA9IFwiT25WYWx1ZUNhbGxiYWNrXCI7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNsaWRlciA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoY2MuU2xpZGVyKTtcbiAgICAgICAgdGhpcy5zbGlkZXIuc2xpZGVFdmVudHMucHVzaCh0aGlzLnNsaWRlckV2ZW50SGFuZGxlcik7XG4gICAgfVxuXG4gICAgT25WYWx1ZUNhbGxiYWNrKHNsaWRlcjpjYy5TbGlkZXIsIGN1c3RvbUV2ZW50RGF0YTpzdHJpbmcpIFxuICAgIHtcbiAgICAgICAgdGhpcy5zbGlkZXJFdmVudEFjdGlvbihzbGlkZXIsY3VzdG9tRXZlbnREYXRhKTtcbiAgICB9XG59XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Components/UIAnimation.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4fdf56r8AhF5rCLiCi2J2z1', 'UIAnimation');
// Scripts/Components/UIAnimation.ts

"use strict";
/*
序列帧动画控件
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var UIAnimation = /** @class */ (function (_super) {
    __extends(UIAnimation, _super);
    function UIAnimation() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // 当前帧的图片
        _this.sprite = null;
        /** 播放动画所需要的图集 */
        _this.spriteFrameList = [];
        /** 播放动画所需要的间隔时间 */
        _this.duration = 0.2;
        /** 是否循环播放 */
        _this.is_loop = false;
        /** 是否加载的时候播放 */
        _this.is_play_onload = false;
        /** 播放完成后是否消耗 */
        _this.is_destroy = false;
        /** 延迟多少秒播放动画 */
        _this.timeDelay = 0;
        /** 如果是重复播放动画多少秒后在播放 */
        _this.playTimeEndDelay = 0;
        _this.played_time = 0;
        _this.is_playing = false;
        _this._currentDelay = false;
        _this._currentPlayDelay = false;
        return _this;
    }
    UIAnimation.prototype.start = function () {
        if (this.is_play_onload) {
            this.play();
        }
    };
    UIAnimation.prototype.play = function () {
        if (this.is_loop) {
            this.play_loop();
        }
        else {
            this.play_once();
        }
    };
    UIAnimation.prototype.play_once = function () {
        if (this.spriteFrameList.length <= 1) {
            return;
        }
        if (this.timeDelay > 0) {
            this._currentDelay = true;
            this.scheduleOnce(this._updateTimeDelayState.bind(this), this.timeDelay);
        }
        this.played_time = 0;
        this.is_playing = true;
        this.is_loop = false;
    };
    UIAnimation.prototype.play_loop = function () {
        if (this.spriteFrameList.length <= 1) {
            return;
        }
        if (this.timeDelay > 0) {
            this._currentDelay = true;
            this.scheduleOnce(this._updateTimeDelayState.bind(this), this.timeDelay);
        }
        this.played_time = 0;
        this.is_playing = true;
        this.is_loop = true;
    };
    UIAnimation.prototype.stop = function () {
        this.is_playing = false;
        this.played_time = 0;
    };
    UIAnimation.prototype._updateTimeDelayState = function () {
        this._currentDelay = false;
    };
    UIAnimation.prototype._updatePlayTimeDelayState = function () {
        this._currentPlayDelay = false;
    };
    UIAnimation.prototype.update = function (dt) {
        if (!this.is_playing) {
            return;
        }
        if (this._currentDelay || this._currentPlayDelay) {
            return;
        }
        this.played_time += dt;
        var index = Math.floor(this.played_time / this.duration);
        if (!this.is_loop) {
            if (index >= this.spriteFrameList.length) {
                this.is_playing = false;
                this.played_time = 0;
                if (this.is_destroy) {
                    this.node.destroy();
                }
                return;
            }
            this.sprite.spriteFrame = this.spriteFrameList[index];
        }
        else {
            if (index >= this.spriteFrameList.length) {
                this.played_time -= (this.duration * this.spriteFrameList.length);
                index -= this.spriteFrameList.length;
                this._currentPlayDelay = (this.timeDelay > 0);
                this.scheduleOnce(this._updatePlayTimeDelayState.bind(this), this.playTimeEndDelay);
            }
            this.sprite.spriteFrame = this.spriteFrameList[index];
        }
    };
    __decorate([
        property(cc.Sprite)
    ], UIAnimation.prototype, "sprite", void 0);
    __decorate([
        property([cc.SpriteFrame])
    ], UIAnimation.prototype, "spriteFrameList", void 0);
    __decorate([
        property(cc.Integer)
    ], UIAnimation.prototype, "duration", void 0);
    __decorate([
        property(cc.Boolean)
    ], UIAnimation.prototype, "is_loop", void 0);
    __decorate([
        property(cc.Boolean)
    ], UIAnimation.prototype, "is_play_onload", void 0);
    __decorate([
        property(cc.Boolean)
    ], UIAnimation.prototype, "is_destroy", void 0);
    __decorate([
        property(cc.Integer)
    ], UIAnimation.prototype, "timeDelay", void 0);
    __decorate([
        property(cc.Integer)
    ], UIAnimation.prototype, "playTimeEndDelay", void 0);
    UIAnimation = __decorate([
        ccclass
    ], UIAnimation);
    return UIAnimation;
}(cc.Component));
exports.default = UIAnimation;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Components/ScrollPage.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '51615YbSVdHbZxdrPvz8tL+', 'ScrollPage');
// Scripts/Components/ScrollPage.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Tools/Util");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var ScrollPage = /** @class */ (function (_super) {
    __extends(ScrollPage, _super);
    function ScrollPage() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.BtnLeft = null;
        _this.BtnRight = null;
        _this.parentWidth = 0;
        _this.initOffset = 0;
        _this.MoveOffset = 260 * 4;
        return _this;
    }
    ScrollPage.prototype.onLoad = function () {
        var _this = this;
        this.scrollView = this.getComponent(cc.ScrollView);
        this.parentWidth = this.scrollView.content.parent.getContentSize().width;
        this.initOffset = this.parentWidth * 0.5;
        /*
        Util.SetScrollViewScrollEvent(
            this.getComponent(cc.ScrollView),
            (scrollView:cc.ScrollView, eventType:cc.ScrollView.EventType, data:any)=>{
                if (eventType == cc.ScrollView.EventType.SCROLL_ENDED)
                {
                    this.OnEndDrag();
                }
            }
        );
        */
        this.BtnRight.node.active = false;
        this.BtnLeft.node.active = false;
        Util_1.default.SetClickAction(this.BtnLeft, function (btn, data) {
            _this.MoveLeft();
        });
        Util_1.default.SetClickAction(this.BtnRight, function (btn, data) {
            _this.MoveRight();
        });
        this.lastOffsetX = -999;
        this.lastMaxOffsetX = -999;
    };
    ScrollPage.prototype.update = function (dt) {
        if (this.scrollView.isScrolling())
            return;
        this.ShowButtons();
    };
    // private OnEndDrag()
    // {
    //     this.ShowButtons();
    // }
    ScrollPage.prototype.ShowButtons = function () {
        if (this.scrollView.getMaxScrollOffset().x < 100) {
            if (Math.abs(this.lastMaxOffsetX - this.scrollView.getMaxScrollOffset().x) < 50)
                return;
            this.lastMaxOffsetX = this.scrollView.getMaxScrollOffset().x;
            this.BtnLeft.node.active = false;
            this.BtnRight.node.active = false;
        }
        else {
            if (Math.abs(this.lastOffsetX - this.scrollView.getScrollOffset().x) < 50)
                return;
            this.lastOffsetX = this.scrollView.getScrollOffset().x;
            var scrollOffset = -this.scrollView.getScrollOffset().x / this.scrollView.getMaxScrollOffset().x;
            if (scrollOffset > 0.2) {
                this.BtnLeft.node.active = true;
            }
            else {
                this.BtnLeft.node.active = false;
            }
            if (scrollOffset < 0.8) {
                this.BtnRight.node.active = true;
            }
            else {
                this.BtnRight.node.active = false;
            }
        }
    };
    ScrollPage.prototype.MoveLeft = function () {
        var totalWidth = this.scrollView.content.width - this.parentWidth;
        if (totalWidth <= 0)
            return;
        var oldx = this.scrollView.content.position.x;
        var newx = oldx + this.MoveOffset;
        if (newx > -this.initOffset) {
            newx = -this.initOffset;
            this.BtnLeft.node.active = false;
            this.BtnRight.node.active = true;
        }
        newx += this.initOffset;
        var percent = Math.abs(newx / totalWidth);
        this.scrollView.scrollToPercentHorizontal(percent, 0.1);
    };
    ScrollPage.prototype.MoveRight = function () {
        var totalWidth = this.scrollView.content.width - this.parentWidth;
        if (totalWidth <= 0)
            return;
        var oldx = this.scrollView.content.position.x;
        var newx = oldx - this.MoveOffset;
        if (newx < -totalWidth) {
            newx = -totalWidth;
            this.BtnLeft.node.active = true;
            this.BtnRight.node.active = false;
        }
        newx -= this.initOffset;
        var percent = Math.abs(newx / totalWidth);
        this.scrollView.scrollToPercentHorizontal(percent, 0.1);
    };
    __decorate([
        property(cc.Button)
    ], ScrollPage.prototype, "BtnLeft", void 0);
    __decorate([
        property(cc.Button)
    ], ScrollPage.prototype, "BtnRight", void 0);
    ScrollPage = __decorate([
        ccclass
    ], ScrollPage);
    return ScrollPage;
}(cc.Component));
exports.default = ScrollPage;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/JsTool/JSOpenUrl.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '2d8e6vNMHRMqJS3TwmWMUgj', 'JSOpenUrl');
// Scripts/JsTool/JSOpenUrl.js

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JSOpenUrl = JSOpenUrl;

function JSOpenUrl() {} //directOpenUrl
//blankOpenUrl
//justOpenUrl


JSOpenUrl.JustOpen = function (url) {
  if (window["directOpenUrl"] == "1") {
    JSOpenUrl.DirectOpen(url);
    return;
  }

  if (window["blankOpenUrl"] == "1") {
    JSOpenUrl.BlankOpen(url);
    return;
  }

  window.open(url);
};

JSOpenUrl.DirectOpen = function (url) {
  if (window["blankOpenUrl"] == "1") {
    JSOpenUrl.BlankOpen(url);
    return;
  }

  if (window["justOpenUrl"] == "1") {
    JSOpenUrl.JustOpen(url);
    return;
  }

  document.location = url;
};

JSOpenUrl.BlankOpen = function (url) {
  if (window["directOpenUrl"] == "1") {
    JSOpenUrl.DirectOpen(url);
    return;
  }

  if (window["justOpenUrl"] == "1") {
    JSOpenUrl.JustOpen(url);
    return;
  }

  var tempwindow = window.open('_blank'); // 先打开页面

  if (tempwindow == null || typeof tempwindow == 'undefined') {
    document.location = url;
  } else {
    tempwindow.location = url; // 后更改页面地址
  }
}; // JSOpenUrl.Open = function(url)
// {
//     if(window["directOpenUrl"] == "1")
//     {
//         JSOpenUrl.DirectOpen(url);
//         return;
//     }
//     if(window["blankOpenUrl"] == "1")
//     {
//         JSOpenUrl.BlankOpen(url);
//         return;
//     }
//     if(window["justOpenUrl"] == "1")
//     {
//         JSOpenUrl.JustOpen(url);
//         return;
//     }
//     if(navigator.userAgent.indexOf("Android") != -1)
//     {
//         JSOpenUrl.BlankOpen(url);
//     }
//     else if(navigator.userAgent.indexOf("iPhone") != -1)
//     {
//         //苹果手机端
//         if(navigator.userAgent.indexOf("AppleWebKit") != -1 && navigator.userAgent.indexOf("Mobile") != -1)
//         {
//             var splits = navigator.userAgent.split(" ");
//             for(var i=0;i<splits.length;i++)
//             {
//                 var str = splits[i];
//                 if(str.indexOf("Mobile/") != -1)
//                 {
//                     if(i == splits.length - 1)
//                     {
//                         console.log("app内置webview");
//                         JSOpenUrl.JustOpen(url);
//                     }
//                     else
//                     {
//                         var str1 = splits[splits.length - 1];
//                         if(str1.indexOf("Safari") != -1)
//                         {
//                             console.log("手机端浏览器");
//                         }
//                         else
//                         {
//                             console.log("浏览器app");
//                         }
//                         JSOpenUrl.BlankOpen(url);
//                     }
//                     break;
//                 }
//             }
//         }
//         else
//         {
//             JSOpenUrl.BlankOpen(url);
//         }
//     }
//     else
//     {
//         JSOpenUrl.BlankOpen(url);
//     }
// }

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcSnNUb29sXFxKU09wZW5VcmwuanMiXSwibmFtZXMiOlsiSlNPcGVuVXJsIiwiSnVzdE9wZW4iLCJ1cmwiLCJ3aW5kb3ciLCJEaXJlY3RPcGVuIiwiQmxhbmtPcGVuIiwib3BlbiIsImRvY3VtZW50IiwibG9jYXRpb24iLCJ0ZW1wd2luZG93Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sU0FBU0EsU0FBVCxHQUNQLENBRUMsRUFFRDtBQUNBO0FBQ0E7OztBQUVBQSxTQUFTLENBQUNDLFFBQVYsR0FBcUIsVUFBU0MsR0FBVCxFQUNyQjtBQUNJLE1BQUdDLE1BQU0sQ0FBQyxlQUFELENBQU4sSUFBMkIsR0FBOUIsRUFDQTtBQUNJSCxJQUFBQSxTQUFTLENBQUNJLFVBQVYsQ0FBcUJGLEdBQXJCO0FBQ0E7QUFDSDs7QUFDRCxNQUFHQyxNQUFNLENBQUMsY0FBRCxDQUFOLElBQTBCLEdBQTdCLEVBQ0E7QUFDSUgsSUFBQUEsU0FBUyxDQUFDSyxTQUFWLENBQW9CSCxHQUFwQjtBQUNBO0FBQ0g7O0FBRURDLEVBQUFBLE1BQU0sQ0FBQ0csSUFBUCxDQUFZSixHQUFaO0FBQ0gsQ0FkRDs7QUFnQkFGLFNBQVMsQ0FBQ0ksVUFBVixHQUF1QixVQUFTRixHQUFULEVBQ3ZCO0FBQ0ksTUFBR0MsTUFBTSxDQUFDLGNBQUQsQ0FBTixJQUEwQixHQUE3QixFQUNBO0FBQ0lILElBQUFBLFNBQVMsQ0FBQ0ssU0FBVixDQUFvQkgsR0FBcEI7QUFDQTtBQUNIOztBQUNELE1BQUdDLE1BQU0sQ0FBQyxhQUFELENBQU4sSUFBeUIsR0FBNUIsRUFDQTtBQUNJSCxJQUFBQSxTQUFTLENBQUNDLFFBQVYsQ0FBbUJDLEdBQW5CO0FBQ0E7QUFDSDs7QUFFREssRUFBQUEsUUFBUSxDQUFDQyxRQUFULEdBQW9CTixHQUFwQjtBQUNILENBZEQ7O0FBZ0JBRixTQUFTLENBQUNLLFNBQVYsR0FBc0IsVUFBU0gsR0FBVCxFQUN0QjtBQUNJLE1BQUdDLE1BQU0sQ0FBQyxlQUFELENBQU4sSUFBMkIsR0FBOUIsRUFDQTtBQUNJSCxJQUFBQSxTQUFTLENBQUNJLFVBQVYsQ0FBcUJGLEdBQXJCO0FBQ0E7QUFDSDs7QUFDRCxNQUFHQyxNQUFNLENBQUMsYUFBRCxDQUFOLElBQXlCLEdBQTVCLEVBQ0E7QUFDSUgsSUFBQUEsU0FBUyxDQUFDQyxRQUFWLENBQW1CQyxHQUFuQjtBQUNBO0FBQ0g7O0FBRUQsTUFBSU8sVUFBVSxHQUFDTixNQUFNLENBQUNHLElBQVAsQ0FBWSxRQUFaLENBQWYsQ0FaSixDQVkwQzs7QUFDdEMsTUFBR0csVUFBVSxJQUFJLElBQWQsSUFBc0IsT0FBT0EsVUFBUCxJQUFvQixXQUE3QyxFQUNBO0FBQ0lGLElBQUFBLFFBQVEsQ0FBQ0MsUUFBVCxHQUFvQk4sR0FBcEI7QUFDSCxHQUhELE1BS0E7QUFDSU8sSUFBQUEsVUFBVSxDQUFDRCxRQUFYLEdBQXNCTixHQUF0QixDQURKLENBQzhCO0FBQzdCO0FBQ0osQ0F0QkQsRUF3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0EiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBKU09wZW5VcmwoKSBcbnsgXG5cbn1cblxuLy9kaXJlY3RPcGVuVXJsXG4vL2JsYW5rT3BlblVybFxuLy9qdXN0T3BlblVybFxuXG5KU09wZW5VcmwuSnVzdE9wZW4gPSBmdW5jdGlvbih1cmwpXG57XG4gICAgaWYod2luZG93W1wiZGlyZWN0T3BlblVybFwiXSA9PSBcIjFcIilcbiAgICB7XG4gICAgICAgIEpTT3BlblVybC5EaXJlY3RPcGVuKHVybCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYod2luZG93W1wiYmxhbmtPcGVuVXJsXCJdID09IFwiMVwiKVxuICAgIHtcbiAgICAgICAgSlNPcGVuVXJsLkJsYW5rT3Blbih1cmwpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2luZG93Lm9wZW4odXJsKTtcbn1cblxuSlNPcGVuVXJsLkRpcmVjdE9wZW4gPSBmdW5jdGlvbih1cmwpXG57XG4gICAgaWYod2luZG93W1wiYmxhbmtPcGVuVXJsXCJdID09IFwiMVwiKVxuICAgIHtcbiAgICAgICAgSlNPcGVuVXJsLkJsYW5rT3Blbih1cmwpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmKHdpbmRvd1tcImp1c3RPcGVuVXJsXCJdID09IFwiMVwiKVxuICAgIHtcbiAgICAgICAgSlNPcGVuVXJsLkp1c3RPcGVuKHVybCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5sb2NhdGlvbiA9IHVybFxufVxuXG5KU09wZW5VcmwuQmxhbmtPcGVuID0gZnVuY3Rpb24odXJsKVxue1xuICAgIGlmKHdpbmRvd1tcImRpcmVjdE9wZW5VcmxcIl0gPT0gXCIxXCIpXG4gICAge1xuICAgICAgICBKU09wZW5VcmwuRGlyZWN0T3Blbih1cmwpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmKHdpbmRvd1tcImp1c3RPcGVuVXJsXCJdID09IFwiMVwiKVxuICAgIHtcbiAgICAgICAgSlNPcGVuVXJsLkp1c3RPcGVuKHVybCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGVtcHdpbmRvdz13aW5kb3cub3BlbignX2JsYW5rJyk7IC8vIOWFiOaJk+W8gOmhtemdolxuICAgIGlmKHRlbXB3aW5kb3cgPT0gbnVsbCB8fCB0eXBlb2YodGVtcHdpbmRvdyk9PSd1bmRlZmluZWQnKVxuICAgIHtcbiAgICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSB1cmxcbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgICAgdGVtcHdpbmRvdy5sb2NhdGlvbiA9IHVybCAvLyDlkI7mm7TmlLnpobXpnaLlnLDlnYBcbiAgICB9XG59XG5cbi8vIEpTT3BlblVybC5PcGVuID0gZnVuY3Rpb24odXJsKVxuLy8ge1xuLy8gICAgIGlmKHdpbmRvd1tcImRpcmVjdE9wZW5VcmxcIl0gPT0gXCIxXCIpXG4vLyAgICAge1xuLy8gICAgICAgICBKU09wZW5VcmwuRGlyZWN0T3Blbih1cmwpO1xuLy8gICAgICAgICByZXR1cm47XG4vLyAgICAgfVxuLy8gICAgIGlmKHdpbmRvd1tcImJsYW5rT3BlblVybFwiXSA9PSBcIjFcIilcbi8vICAgICB7XG4vLyAgICAgICAgIEpTT3BlblVybC5CbGFua09wZW4odXJsKTtcbi8vICAgICAgICAgcmV0dXJuO1xuLy8gICAgIH1cbi8vICAgICBpZih3aW5kb3dbXCJqdXN0T3BlblVybFwiXSA9PSBcIjFcIilcbi8vICAgICB7XG4vLyAgICAgICAgIEpTT3BlblVybC5KdXN0T3Blbih1cmwpO1xuLy8gICAgICAgICByZXR1cm47XG4vLyAgICAgfVxuXG4vLyAgICAgaWYobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiQW5kcm9pZFwiKSAhPSAtMSlcbi8vICAgICB7XG4vLyAgICAgICAgIEpTT3BlblVybC5CbGFua09wZW4odXJsKTtcbi8vICAgICB9XG4vLyAgICAgZWxzZSBpZihuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJpUGhvbmVcIikgIT0gLTEpXG4vLyAgICAge1xuLy8gICAgICAgICAvL+iLueaenOaJi+acuuerr1xuLy8gICAgICAgICBpZihuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJBcHBsZVdlYktpdFwiKSAhPSAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJNb2JpbGVcIikgIT0gLTEpXG4vLyAgICAgICAgIHtcbi8vICAgICAgICAgICAgIHZhciBzcGxpdHMgPSBuYXZpZ2F0b3IudXNlckFnZW50LnNwbGl0KFwiIFwiKTtcbi8vICAgICAgICAgICAgIGZvcih2YXIgaT0wO2k8c3BsaXRzLmxlbmd0aDtpKyspXG4vLyAgICAgICAgICAgICB7XG4vLyAgICAgICAgICAgICAgICAgdmFyIHN0ciA9IHNwbGl0c1tpXTtcbi8vICAgICAgICAgICAgICAgICBpZihzdHIuaW5kZXhPZihcIk1vYmlsZS9cIikgIT0gLTEpXG4vLyAgICAgICAgICAgICAgICAge1xuLy8gICAgICAgICAgICAgICAgICAgICBpZihpID09IHNwbGl0cy5sZW5ndGggLSAxKVxuLy8gICAgICAgICAgICAgICAgICAgICB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImFwcOWGhee9rndlYnZpZXdcIik7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBKU09wZW5VcmwuSnVzdE9wZW4odXJsKTtcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICBlbHNlXG4vLyAgICAgICAgICAgICAgICAgICAgIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHIxID0gc3BsaXRzW3NwbGl0cy5sZW5ndGggLSAxXTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHN0cjEuaW5kZXhPZihcIlNhZmFyaVwiKSAhPSAtMSlcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuaJi+acuuerr+a1j+iniOWZqFwiKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Vcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIua1j+iniOWZqGFwcFwiKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgIEpTT3BlblVybC5CbGFua09wZW4odXJsKTtcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgIFxuLy8gICAgICAgICAgICAgICAgICAgICBicmVhaztcbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH1cbi8vICAgICAgICAgZWxzZVxuLy8gICAgICAgICB7XG4vLyAgICAgICAgICAgICBKU09wZW5VcmwuQmxhbmtPcGVuKHVybCk7XG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyAgICAgZWxzZVxuLy8gICAgIHtcbi8vICAgICAgICAgSlNPcGVuVXJsLkJsYW5rT3Blbih1cmwpO1xuLy8gICAgIH1cbiAgIFxuXG4vLyB9XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Global/Language.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd608fJHW5xLrKrd7ZE3mMxy', 'Language');
// Scripts/Global/Language.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Language = /** @class */ (function () {
    function Language() {
    }
    Language.text1 = "Can't leave blank";
    Language.text4 = "Failed to connect server";
    Language.text5 = "Data send time out";
    Language.text6 = "Network re-connected";
    Language.text7 = "Connection failed, please check your network";
    Language.text8 = "Network data sending failed";
    Language.CopySuccess = "复制成功";
    Language.Chargetip1 = "金额不能为空";
    Language.Chargetip2 = "请填写正确金额";
    Language.Chargetip3 = "请选择银行";
    Language.Chargetip4 = "图片加载失败";
    return Language;
}());
exports.default = Language;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcR2xvYmFsXFxMYW5ndWFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0lBQUE7SUFhQSxDQUFDO0lBWmlCLGNBQUssR0FBRyxtQkFBbUIsQ0FBQztJQUM1QixjQUFLLEdBQUcsMEJBQTBCLENBQUM7SUFDbkMsY0FBSyxHQUFHLG9CQUFvQixDQUFDO0lBQzdCLGNBQUssR0FBRyxzQkFBc0IsQ0FBQztJQUMvQixjQUFLLEdBQUcsOENBQThDLENBQUM7SUFDdkQsY0FBSyxHQUFHLDZCQUE2QixDQUFDO0lBRXRDLG9CQUFXLEdBQUcsTUFBTSxDQUFDO0lBQ3JCLG1CQUFVLEdBQUcsUUFBUSxDQUFDO0lBQ3RCLG1CQUFVLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLG1CQUFVLEdBQUcsT0FBTyxDQUFDO0lBQ3JCLG1CQUFVLEdBQUcsUUFBUSxDQUFDO0lBQ3hDLGVBQUM7Q0FiRCxBQWFDLElBQUE7a0JBYm9CLFFBQVEiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBMYW5ndWFnZSB7XG4gICAgcHVibGljIHN0YXRpYyB0ZXh0MSA9IFwiQ2FuJ3QgbGVhdmUgYmxhbmtcIjtcbiAgICBwdWJsaWMgc3RhdGljIHRleHQ0ID0gXCJGYWlsZWQgdG8gY29ubmVjdCBzZXJ2ZXJcIjtcbiAgICBwdWJsaWMgc3RhdGljIHRleHQ1ID0gXCJEYXRhIHNlbmQgdGltZSBvdXRcIjtcbiAgICBwdWJsaWMgc3RhdGljIHRleHQ2ID0gXCJOZXR3b3JrIHJlLWNvbm5lY3RlZFwiO1xuICAgIHB1YmxpYyBzdGF0aWMgdGV4dDcgPSBcIkNvbm5lY3Rpb24gZmFpbGVkLCBwbGVhc2UgY2hlY2sgeW91ciBuZXR3b3JrXCI7XG4gICAgcHVibGljIHN0YXRpYyB0ZXh0OCA9IFwiTmV0d29yayBkYXRhIHNlbmRpbmcgZmFpbGVkXCI7XG5cbiAgICBwdWJsaWMgc3RhdGljIENvcHlTdWNjZXNzID0gXCLlpI3liLbmiJDlip9cIjtcbiAgICBwdWJsaWMgc3RhdGljIENoYXJnZXRpcDEgPSBcIumHkemineS4jeiDveS4uuepulwiO1xuICAgIHB1YmxpYyBzdGF0aWMgQ2hhcmdldGlwMiA9IFwi6K+35aGr5YaZ5q2j56Gu6YeR6aKdXCI7XG4gICAgcHVibGljIHN0YXRpYyBDaGFyZ2V0aXAzID0gXCLor7fpgInmi6npk7booYxcIjtcbiAgICBwdWJsaWMgc3RhdGljIENoYXJnZXRpcDQgPSBcIuWbvueJh+WKoOi9veWksei0pVwiO1xufSJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Components/EditBoxListener.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'a9768bQQ7lB+KdJarSiP++I', 'EditBoxListener');
// Scripts/Components/EditBoxListener.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var EditBoxListener = /** @class */ (function (_super) {
    __extends(EditBoxListener, _super);
    function EditBoxListener() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EditBoxListener.prototype.onEditDidBegan = function (editbox, customEventData) {
        if (this.onEditDidBeganAction != null)
            this.onEditDidBeganAction(editbox, customEventData);
    };
    EditBoxListener.prototype.AddEditDidBeganHandler = function (action, customEventData) {
        if (customEventData === void 0) { customEventData = ""; }
        this.onEditDidBeganAction = action;
        var onEditDidBeganHandler = new cc.Component.EventHandler();
        onEditDidBeganHandler.target = this.node;
        onEditDidBeganHandler.component = "EditBoxListener";
        onEditDidBeganHandler.handler = "onEditDidBegan";
        onEditDidBeganHandler.customEventData = customEventData;
        var editBox = this.node.getComponent(cc.EditBox);
        editBox.editingDidBegan.push(onEditDidBeganHandler);
    };
    EditBoxListener.prototype.onTextChanged = function (text, editbox, customEventData) {
        if (this.onTextChangedAction != null)
            this.onTextChangedAction(text, editbox, customEventData);
    };
    EditBoxListener.prototype.AddTextChangedHandler = function (action, customEventData) {
        if (customEventData === void 0) { customEventData = ""; }
        this.onTextChangedAction = action;
        var hander = new cc.Component.EventHandler();
        hander.target = this.node;
        hander.component = "EditBoxListener";
        hander.handler = "onTextChanged";
        hander.customEventData = customEventData;
        var editBox = this.node.getComponent(cc.EditBox);
        editBox.textChanged.push(hander);
    };
    EditBoxListener.prototype.onEditDidEnded = function (editbox, customEventData) {
        if (this.onEditDidEndedAction != null)
            this.onEditDidEndedAction(editbox, customEventData);
    };
    EditBoxListener.prototype.AddEditDidEndedHandler = function (action, customEventData) {
        if (customEventData === void 0) { customEventData = ""; }
        this.onEditDidEndedAction = action;
        var handler = new cc.Component.EventHandler();
        handler.target = this.node;
        handler.component = "EditBoxListener";
        handler.handler = "onEditDidEnded";
        handler.customEventData = customEventData;
        var editBox = this.node.getComponent(cc.EditBox);
        editBox.editingDidEnded.push(handler);
    };
    EditBoxListener.prototype.onEditingReturn = function (editbox, customEventData) {
        if (this.onEditingReturnAction != null)
            this.onEditingReturnAction(editbox, customEventData);
    };
    EditBoxListener.prototype.AddEditingReturnHandler = function (action, customEventData) {
        if (customEventData === void 0) { customEventData = ""; }
        this.onEditingReturnAction = action;
        var handler = new cc.Component.EventHandler();
        handler.target = this.node;
        handler.component = "EditBoxListener";
        handler.handler = "onEditingReturn";
        handler.customEventData = customEventData;
        var editBox = this.node.getComponent(cc.EditBox);
        editBox.editingReturn.push(handler);
    };
    EditBoxListener = __decorate([
        ccclass
    ], EditBoxListener);
    return EditBoxListener;
}(cc.Component));
exports.default = EditBoxListener;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Global/Global.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b6f65kfVANPOKA/u3uFJhrj', 'Global');
// Scripts/Global/Global.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Global = /** @class */ (function () {
    function Global() {
    }
    Global.showLog = true;
    Global.isRelease = false;
    return Global;
}());
exports.default = Global;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcR2xvYmFsXFxHbG9iYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtJQUFBO0lBSUEsQ0FBQztJQUZpQixjQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ2YsZ0JBQVMsR0FBRyxLQUFLLENBQUM7SUFDcEMsYUFBQztDQUpELEFBSUMsSUFBQTtrQkFKb0IsTUFBTSIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEdsb2JhbFxue1xuICAgIHB1YmxpYyBzdGF0aWMgc2hvd0xvZyA9IHRydWU7XG4gICAgcHVibGljIHN0YXRpYyBpc1JlbGVhc2UgPSBmYWxzZTtcbn1cbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/JsTool/LabelFunc.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e5a04vgyHxPuJCSAnSyflTe', 'LabelFunc');
// Scripts/JsTool/LabelFunc.js

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LabelFunc = LabelFunc;

function LabelFunc() {}

LabelFunc.UpdateRenderData = function (label) {
  //label._updateRenderData(true);
  label._forceUpdateRenderData();
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcSnNUb29sXFxMYWJlbEZ1bmMuanMiXSwibmFtZXMiOlsiTGFiZWxGdW5jIiwiVXBkYXRlUmVuZGVyRGF0YSIsImxhYmVsIiwiX2ZvcmNlVXBkYXRlUmVuZGVyRGF0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFPLFNBQVNBLFNBQVQsR0FBcUIsQ0FFM0I7O0FBQ0RBLFNBQVMsQ0FBQ0MsZ0JBQVYsR0FBNkIsVUFBU0MsS0FBVCxFQUFlO0FBQ3hDO0FBQ0FBLEVBQUFBLEtBQUssQ0FBQ0Msc0JBQU47QUFDSCxDQUhEIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gTGFiZWxGdW5jKCkgeyBcblxufVxuTGFiZWxGdW5jLlVwZGF0ZVJlbmRlckRhdGEgPSBmdW5jdGlvbihsYWJlbCl7XG4gICAgLy9sYWJlbC5fdXBkYXRlUmVuZGVyRGF0YSh0cnVlKTtcbiAgICBsYWJlbC5fZm9yY2VVcGRhdGVSZW5kZXJEYXRhKCk7XG59XG5cblxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/JsTool/JsGetUrlParms.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f47c6gB7TdCB6FhBMEYzWzh', 'JsGetUrlParms');
// Scripts/JsTool/JsGetUrlParms.js

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JsGetUrlParms = JsGetUrlParms;

function JsGetUrlParms() {}

JsGetUrlParms.GetUrlParms = function () {
  var parmdata = location.search;
  var ret = {}; // console.log("##################### url  " + parmdata);

  if (parmdata.indexOf("?") != -1) {
    var str = parmdata.substr(1);
    var strs = str.split("&");

    for (var i = 0; i < strs.length; i++) {
      var splits = strs[i].split("=");
      ret[splits[0]] = splits[1];
    }
  }

  return ret;
};

JsGetUrlParms.SetUrlParmsToWindow = function () {
  var parmdata = location.search;

  if (parmdata.indexOf("?") != -1) {
    var str = parmdata.substr(1);
    var strs = str.split("&");

    for (var i = 0; i < strs.length; i++) {
      var splits = strs[i].split("=");
      window[splits[0]] = splits[1];
    }
  }
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcSnNUb29sXFxKc0dldFVybFBhcm1zLmpzIl0sIm5hbWVzIjpbIkpzR2V0VXJsUGFybXMiLCJHZXRVcmxQYXJtcyIsInBhcm1kYXRhIiwibG9jYXRpb24iLCJzZWFyY2giLCJyZXQiLCJpbmRleE9mIiwic3RyIiwic3Vic3RyIiwic3RycyIsInNwbGl0IiwiaSIsImxlbmd0aCIsInNwbGl0cyIsIlNldFVybFBhcm1zVG9XaW5kb3ciLCJ3aW5kb3ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBTyxTQUFTQSxhQUFULEdBQ1AsQ0FFQzs7QUFFREEsYUFBYSxDQUFDQyxXQUFkLEdBQTRCLFlBQzVCO0FBQ0ksTUFBSUMsUUFBUSxHQUFHQyxRQUFRLENBQUNDLE1BQXhCO0FBQ0EsTUFBSUMsR0FBRyxHQUFHLEVBQVYsQ0FGSixDQUdJOztBQUNBLE1BQUlILFFBQVEsQ0FBQ0ksT0FBVCxDQUFpQixHQUFqQixLQUF5QixDQUFDLENBQTlCLEVBQ0E7QUFDSSxRQUFJQyxHQUFHLEdBQUdMLFFBQVEsQ0FBQ00sTUFBVCxDQUFnQixDQUFoQixDQUFWO0FBQ0EsUUFBSUMsSUFBSSxHQUFHRixHQUFHLENBQUNHLEtBQUosQ0FBVSxHQUFWLENBQVg7O0FBQ0EsU0FBSSxJQUFJQyxDQUFDLEdBQUMsQ0FBVixFQUFZQSxDQUFDLEdBQUNGLElBQUksQ0FBQ0csTUFBbkIsRUFBMEJELENBQUMsRUFBM0IsRUFDQTtBQUNJLFVBQUlFLE1BQU0sR0FBR0osSUFBSSxDQUFDRSxDQUFELENBQUosQ0FBUUQsS0FBUixDQUFjLEdBQWQsQ0FBYjtBQUNBTCxNQUFBQSxHQUFHLENBQUNRLE1BQU0sQ0FBQyxDQUFELENBQVAsQ0FBSCxHQUFpQkEsTUFBTSxDQUFDLENBQUQsQ0FBdkI7QUFDSDtBQUNKOztBQUNELFNBQU9SLEdBQVA7QUFFSCxDQWpCRDs7QUFtQkFMLGFBQWEsQ0FBQ2MsbUJBQWQsR0FBb0MsWUFDcEM7QUFDSSxNQUFJWixRQUFRLEdBQUdDLFFBQVEsQ0FBQ0MsTUFBeEI7O0FBRUEsTUFBSUYsUUFBUSxDQUFDSSxPQUFULENBQWlCLEdBQWpCLEtBQXlCLENBQUMsQ0FBOUIsRUFDQTtBQUNJLFFBQUlDLEdBQUcsR0FBR0wsUUFBUSxDQUFDTSxNQUFULENBQWdCLENBQWhCLENBQVY7QUFDQSxRQUFJQyxJQUFJLEdBQUdGLEdBQUcsQ0FBQ0csS0FBSixDQUFVLEdBQVYsQ0FBWDs7QUFDQSxTQUFJLElBQUlDLENBQUMsR0FBQyxDQUFWLEVBQVlBLENBQUMsR0FBQ0YsSUFBSSxDQUFDRyxNQUFuQixFQUEwQkQsQ0FBQyxFQUEzQixFQUNBO0FBQ0ksVUFBSUUsTUFBTSxHQUFHSixJQUFJLENBQUNFLENBQUQsQ0FBSixDQUFRRCxLQUFSLENBQWMsR0FBZCxDQUFiO0FBQ0FLLE1BQUFBLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDLENBQUQsQ0FBUCxDQUFOLEdBQW9CQSxNQUFNLENBQUMsQ0FBRCxDQUExQjtBQUNIO0FBQ0o7QUFFSixDQWZEIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gSnNHZXRVcmxQYXJtcygpIFxueyBcblxufVxuXG5Kc0dldFVybFBhcm1zLkdldFVybFBhcm1zID0gZnVuY3Rpb24oKVxue1xuICAgIHZhciBwYXJtZGF0YSA9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICB2YXIgcmV0ID0ge307XG4gICAgLy8gY29uc29sZS5sb2coXCIjIyMjIyMjIyMjIyMjIyMjIyMjIyMgdXJsICBcIiArIHBhcm1kYXRhKTtcbiAgICBpZiAocGFybWRhdGEuaW5kZXhPZihcIj9cIikgIT0gLTEpIFxuICAgIHtcbiAgICAgICAgdmFyIHN0ciA9IHBhcm1kYXRhLnN1YnN0cigxKTtcbiAgICAgICAgdmFyIHN0cnMgPSBzdHIuc3BsaXQoXCImXCIpO1xuICAgICAgICBmb3IodmFyIGk9MDtpPHN0cnMubGVuZ3RoO2krKylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHNwbGl0cyA9IHN0cnNbaV0uc3BsaXQoXCI9XCIpO1xuICAgICAgICAgICAgcmV0W3NwbGl0c1swXV0gPSBzcGxpdHNbMV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgICBcbn1cblxuSnNHZXRVcmxQYXJtcy5TZXRVcmxQYXJtc1RvV2luZG93ID0gZnVuY3Rpb24oKVxue1xuICAgIHZhciBwYXJtZGF0YSA9IGxvY2F0aW9uLnNlYXJjaDtcblxuICAgIGlmIChwYXJtZGF0YS5pbmRleE9mKFwiP1wiKSAhPSAtMSkgXG4gICAge1xuICAgICAgICB2YXIgc3RyID0gcGFybWRhdGEuc3Vic3RyKDEpO1xuICAgICAgICB2YXIgc3RycyA9IHN0ci5zcGxpdChcIiZcIik7XG4gICAgICAgIGZvcih2YXIgaT0wO2k8c3Rycy5sZW5ndGg7aSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgc3BsaXRzID0gc3Ryc1tpXS5zcGxpdChcIj1cIik7XG4gICAgICAgICAgICB3aW5kb3dbc3BsaXRzWzBdXSA9IHNwbGl0c1sxXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbn0iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/JsTool/NoSleepJsTool.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '90bc7dpvQJDgpstSHtHLuQg', 'NoSleepJsTool');
// Scripts/JsTool/NoSleepJsTool.js

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoSleepJsTool = NoSleepJsTool;

function NoSleepJsTool() {}

NoSleepJsTool.Run = function () {
  var NoSleep = require("./NoSleep.js");

  var noSleep = new NoSleep();
  noSleep.enable();
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcSnNUb29sXFxOb1NsZWVwSnNUb29sLmpzIl0sIm5hbWVzIjpbIk5vU2xlZXBKc1Rvb2wiLCJSdW4iLCJOb1NsZWVwIiwicmVxdWlyZSIsIm5vU2xlZXAiLCJlbmFibGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBTyxTQUFTQSxhQUFULEdBQ1AsQ0FFQzs7QUFFREEsYUFBYSxDQUFDQyxHQUFkLEdBQW9CLFlBQ3BCO0FBQ0ksTUFBSUMsT0FBTyxHQUFHQyxPQUFPLENBQUMsY0FBRCxDQUFyQjs7QUFDQSxNQUFJQyxPQUFPLEdBQUcsSUFBSUYsT0FBSixFQUFkO0FBQ0FFLEVBQUFBLE9BQU8sQ0FBQ0MsTUFBUjtBQUdILENBUEQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBOb1NsZWVwSnNUb29sKCkgXG57IFxuXG59XG5cbk5vU2xlZXBKc1Rvb2wuUnVuID0gZnVuY3Rpb24oKVxue1xuICAgIGxldCBOb1NsZWVwID0gcmVxdWlyZShcIi4vTm9TbGVlcC5qc1wiKTtcbiAgICB2YXIgbm9TbGVlcCA9IG5ldyBOb1NsZWVwKCk7XG4gICAgbm9TbGVlcC5lbmFibGUoKTtcbiAgICBcbiAgIFxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/JsTool/JsGetIP.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '80fcfKe5XNGzplBrvOEK6zF', 'JsGetIP');
// Scripts/JsTool/JsGetIP.js

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JsGetIP = JsGetIP;

function JsGetIP() {}

JsGetIP.JsGet = function (callback) {
  console.log("################################# JsGetIP.JsGet call");
  var script = document.createElement("script");
  script.type = 'text/javascript';
  script.src = "https://pv.sohu.com/cityjson?ie=utf-8";
  var havecomplete = false;

  script.onreadystatechange = function () {
    if (this.readyState == 'loaded' || this.readyState == 'complete') {
      if (havecomplete == false) {
        havecomplete = true;

        if (typeof returnCitySN != "undefined") {
          callback(true, returnCitySN["cip"]);
        } else {
          callback(false, "no returnCitySN");
        }
      }
    }
  };

  script.onload = function () {
    if (havecomplete == false) {
      havecomplete = true;

      if (typeof returnCitySN != "undefined") {
        callback(true, returnCitySN["cip"]);
      } else {
        callback(false, "no returnCitySN");
      }
    }
  };

  setTimeout(function () {
    if (havecomplete == false) {
      havecomplete = true;
      callback(false, "time out");
    }
  }, 5000);
  document.body.insertBefore(script, document.body.firstChild);
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcSnNUb29sXFxKc0dldElQLmpzIl0sIm5hbWVzIjpbIkpzR2V0SVAiLCJKc0dldCIsImNhbGxiYWNrIiwiY29uc29sZSIsImxvZyIsInNjcmlwdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJzcmMiLCJoYXZlY29tcGxldGUiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmV0dXJuQ2l0eVNOIiwib25sb2FkIiwic2V0VGltZW91dCIsImJvZHkiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sU0FBU0EsT0FBVCxHQUFtQixDQUV6Qjs7QUFDREEsT0FBTyxDQUFDQyxLQUFSLEdBQWdCLFVBQVNDLFFBQVQsRUFBa0I7QUFDOUJDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHNEQUFaO0FBRUEsTUFBSUMsTUFBTSxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBYjtBQUNBRixFQUFBQSxNQUFNLENBQUNHLElBQVAsR0FBYSxpQkFBYjtBQUNBSCxFQUFBQSxNQUFNLENBQUNJLEdBQVAsR0FBYSx1Q0FBYjtBQUNBLE1BQUlDLFlBQVksR0FBRyxLQUFuQjs7QUFDQUwsRUFBQUEsTUFBTSxDQUFDTSxrQkFBUCxHQUEyQixZQUFZO0FBQ25DLFFBQUksS0FBS0MsVUFBTCxJQUFtQixRQUFuQixJQUErQixLQUFLQSxVQUFMLElBQW1CLFVBQXRELEVBQ0E7QUFDSSxVQUFHRixZQUFZLElBQUksS0FBbkIsRUFBeUI7QUFDckJBLFFBQUFBLFlBQVksR0FBRyxJQUFmOztBQUNBLFlBQUcsT0FBT0csWUFBUCxJQUF3QixXQUEzQixFQUNBO0FBQ0lYLFVBQUFBLFFBQVEsQ0FBQyxJQUFELEVBQU1XLFlBQVksQ0FBQyxLQUFELENBQWxCLENBQVI7QUFDSCxTQUhELE1BS0E7QUFDSVgsVUFBQUEsUUFBUSxDQUFDLEtBQUQsRUFBTyxpQkFBUCxDQUFSO0FBQ0g7QUFFSjtBQUNKO0FBQ0osR0FoQkQ7O0FBaUJBRyxFQUFBQSxNQUFNLENBQUNTLE1BQVAsR0FBZSxZQUFVO0FBQ3JCLFFBQUdKLFlBQVksSUFBSSxLQUFuQixFQUF5QjtBQUNyQkEsTUFBQUEsWUFBWSxHQUFHLElBQWY7O0FBQ0EsVUFBRyxPQUFPRyxZQUFQLElBQXdCLFdBQTNCLEVBQ0E7QUFDSVgsUUFBQUEsUUFBUSxDQUFDLElBQUQsRUFBTVcsWUFBWSxDQUFDLEtBQUQsQ0FBbEIsQ0FBUjtBQUNILE9BSEQsTUFLQTtBQUNJWCxRQUFBQSxRQUFRLENBQUMsS0FBRCxFQUFPLGlCQUFQLENBQVI7QUFDSDtBQUNKO0FBQ0osR0FaRDs7QUFhQWEsRUFBQUEsVUFBVSxDQUFDLFlBQUk7QUFDWCxRQUFHTCxZQUFZLElBQUksS0FBbkIsRUFDQTtBQUNJQSxNQUFBQSxZQUFZLEdBQUcsSUFBZjtBQUNBUixNQUFBQSxRQUFRLENBQUMsS0FBRCxFQUFPLFVBQVAsQ0FBUjtBQUNIO0FBQ0osR0FOUyxFQU1SLElBTlEsQ0FBVjtBQVFBSSxFQUFBQSxRQUFRLENBQUNVLElBQVQsQ0FBY0MsWUFBZCxDQUEyQlosTUFBM0IsRUFBbUNDLFFBQVEsQ0FBQ1UsSUFBVCxDQUFjRSxVQUFqRDtBQUNILENBOUNEIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gSnNHZXRJUCgpIHsgXG5cbn1cbkpzR2V0SVAuSnNHZXQgPSBmdW5jdGlvbihjYWxsYmFjayl7XG4gICAgY29uc29sZS5sb2coXCIjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgSnNHZXRJUC5Kc0dldCBjYWxsXCIpXG5cbiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICBzY3JpcHQudHlwZT0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgc2NyaXB0LnNyYyA9IFwiaHR0cHM6Ly9wdi5zb2h1LmNvbS9jaXR5anNvbj9pZT11dGYtOFwiO1xuICAgIHZhciBoYXZlY29tcGxldGUgPSBmYWxzZTtcbiAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT0gJ2xvYWRlZCcgfHwgdGhpcy5yZWFkeVN0YXRlID09ICdjb21wbGV0ZScpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmKGhhdmVjb21wbGV0ZSA9PSBmYWxzZSl7XG4gICAgICAgICAgICAgICAgaGF2ZWNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YocmV0dXJuQ2l0eVNOKSAhPSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSxyZXR1cm5DaXR5U05bXCJjaXBcIl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSxcIm5vIHJldHVybkNpdHlTTlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHNjcmlwdC5vbmxvYWQ9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKGhhdmVjb21wbGV0ZSA9PSBmYWxzZSl7XG4gICAgICAgICAgICBoYXZlY29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgaWYodHlwZW9mKHJldHVybkNpdHlTTikgIT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlLHJldHVybkNpdHlTTltcImNpcFwiXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UsXCJubyByZXR1cm5DaXR5U05cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgaWYoaGF2ZWNvbXBsZXRlID09IGZhbHNlKVxuICAgICAgICB7XG4gICAgICAgICAgICBoYXZlY29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UsXCJ0aW1lIG91dFwiKTtcbiAgICAgICAgfVxuICAgIH0sNTAwMCk7XG4gICAgXG4gICAgZG9jdW1lbnQuYm9keS5pbnNlcnRCZWZvcmUoc2NyaXB0LCBkb2N1bWVudC5ib2R5LmZpcnN0Q2hpbGQpO1xufVxuXG5cbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/JsTool/JSGenQrcode.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '1f927Fa2RBE3JZ+XRuZCCW8', 'JSGenQrcode');
// Scripts/JsTool/JSGenQrcode.js

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JSGenQrcode = JSGenQrcode;

function JSGenQrcode() {}

JSGenQrcode.Gen = function (url) {
  var QRCode = require("./qrcode");

  var qrcode = new QRCode(-1, 2);
  qrcode.addData(url);
  qrcode.make();
  var num = qrcode.getModuleCount(); // console.log(" num " + num);

  var array = new Array();

  for (var i = 0; i < num; i++) {
    var tmpArray = new Array();

    for (var j = 0; j < num; j++) {
      tmpArray.push(qrcode.isDark(i, j));
    }

    array.push(tmpArray);
  }

  return array;
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcSnNUb29sXFxKU0dlblFyY29kZS5qcyJdLCJuYW1lcyI6WyJKU0dlblFyY29kZSIsIkdlbiIsInVybCIsIlFSQ29kZSIsInJlcXVpcmUiLCJxcmNvZGUiLCJhZGREYXRhIiwibWFrZSIsIm51bSIsImdldE1vZHVsZUNvdW50IiwiYXJyYXkiLCJBcnJheSIsImkiLCJ0bXBBcnJheSIsImoiLCJwdXNoIiwiaXNEYXJrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sU0FBU0EsV0FBVCxHQUNQLENBRUM7O0FBRURBLFdBQVcsQ0FBQ0MsR0FBWixHQUFrQixVQUFTQyxHQUFULEVBQ2xCO0FBQ0ksTUFBSUMsTUFBTSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFJQyxNQUFNLEdBQUcsSUFBSUYsTUFBSixDQUFXLENBQUMsQ0FBWixFQUFlLENBQWYsQ0FBYjtBQUNBRSxFQUFBQSxNQUFNLENBQUNDLE9BQVAsQ0FBZUosR0FBZjtBQUNBRyxFQUFBQSxNQUFNLENBQUNFLElBQVA7QUFFQSxNQUFJQyxHQUFHLEdBQUdILE1BQU0sQ0FBQ0ksY0FBUCxFQUFWLENBTkosQ0FPSTs7QUFFQSxNQUFJQyxLQUFLLEdBQUcsSUFBSUMsS0FBSixFQUFaOztBQUNBLE9BQUksSUFBSUMsQ0FBQyxHQUFDLENBQVYsRUFBWUEsQ0FBQyxHQUFDSixHQUFkLEVBQWtCSSxDQUFDLEVBQW5CLEVBQ0E7QUFDSSxRQUFJQyxRQUFRLEdBQUcsSUFBSUYsS0FBSixFQUFmOztBQUNBLFNBQUksSUFBSUcsQ0FBQyxHQUFDLENBQVYsRUFBWUEsQ0FBQyxHQUFDTixHQUFkLEVBQWtCTSxDQUFDLEVBQW5CLEVBQ0E7QUFDSUQsTUFBQUEsUUFBUSxDQUFDRSxJQUFULENBQWNWLE1BQU0sQ0FBQ1csTUFBUCxDQUFjSixDQUFkLEVBQWlCRSxDQUFqQixDQUFkO0FBQ0g7O0FBQ0RKLElBQUFBLEtBQUssQ0FBQ0ssSUFBTixDQUFXRixRQUFYO0FBQ0g7O0FBRUQsU0FBT0gsS0FBUDtBQUNILENBdEJEIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gSlNHZW5RcmNvZGUoKSBcbnsgXG5cbn1cblxuSlNHZW5RcmNvZGUuR2VuID0gZnVuY3Rpb24odXJsKVxue1xuICAgIGxldCBRUkNvZGUgPSByZXF1aXJlKFwiLi9xcmNvZGVcIik7XG4gICAgdmFyIHFyY29kZSA9IG5ldyBRUkNvZGUoLTEsIDIpO1xuICAgIHFyY29kZS5hZGREYXRhKHVybCk7XG4gICAgcXJjb2RlLm1ha2UoKTtcblxuICAgIGxldCBudW0gPSBxcmNvZGUuZ2V0TW9kdWxlQ291bnQoKTtcbiAgICAvLyBjb25zb2xlLmxvZyhcIiBudW0gXCIgKyBudW0pO1xuXG4gICAgbGV0IGFycmF5ID0gbmV3IEFycmF5KCk7XG4gICAgZm9yKHZhciBpPTA7aTxudW07aSsrKVxuICAgIHtcbiAgICAgICAgbGV0IHRtcEFycmF5ID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGZvcih2YXIgaj0wO2o8bnVtO2orKylcbiAgICAgICAge1xuICAgICAgICAgICAgdG1wQXJyYXkucHVzaChxcmNvZGUuaXNEYXJrKGksIGopKTtcbiAgICAgICAgfVxuICAgICAgICBhcnJheS5wdXNoKHRtcEFycmF5KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGFycmF5O1xufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/JsTool/ImageTool.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6a12eNF521KqJHrpgNOeVLT', 'ImageTool');
// Scripts/JsTool/ImageTool.js

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImageTool = ImageTool;

function ImageTool() {}

ImageTool.Get = function (callback) {
  ImageTool.Compelte = callback;
  console.log("ImageTool.GetImageTool.GetImageTool.Get");
  document.getElementById("ImageTool").click();
};

ImageTool.Init = function () {
  //    用于压缩图片的canvas
  ImageTool.canvas = document.createElement("canvas");
  ImageTool.ctx = ImageTool.canvas.getContext('2d'); //    瓦片canvas

  ImageTool.tCanvas = document.createElement("canvas");
  ImageTool.tctx = ImageTool.tCanvas.getContext("2d"); //<input id="file" type="file" class="fileToUpload" style="opacity:0;position:absolute;" onchange="handleFiles(this)"/> 

  var input = document.createElement("input");
  input.style.opacity = 0;
  input.type = "file";
  input.style.position = "absolute";
  input.style.left = '-9999px';

  var fileGet = function fileGet(handler) {
    console.log("fileGetfileGetfileGetfileGet " + handler);
    var maxsize = 100 * 1024;
    var file = input.files[0];

    if (file.type != 'image/png' && file.type != 'image/jpeg') {
      return alert("图片上传格式不正确");
    }

    var fileReader = new FileReader();

    fileReader.onloadend = function () {
      if (fileReader.readyState == fileReader.DONE) {
        // 200kb一下直接上传，否则进行压缩
        if (fileReader.result.length <= maxsize) {
          ImageTool.Compelte(fileReader.result);
        } else {
          var img = new Image();

          img.onload = function () {
            var data = ImageTool.Compress(img);
            ImageTool.Compelte(data);
          };

          img.src = fileReader.result;
        }
      }
    };

    fileReader.readAsDataURL(file);
  };

  input.onchange = fileGet;
  input.id = "ImageTool";
  input.accept = "image/*";
  document.body.appendChild(input);
};

ImageTool.Compress = function (img) {
  var initSize = img.src.length;
  var width = img.width;
  var height = img.height; //如果图片大于四百万像素，计算压缩比并将大小压至400万以下

  var ratio;

  if ((ratio = width * height / 4000000) > 1) {
    ratio = Math.sqrt(ratio);
    width /= ratio;
    height /= ratio;
  } else {
    ratio = 1;
  }

  ImageTool.canvas.width = width;
  ImageTool.canvas.height = height; //铺底色

  ImageTool.ctx.fillStyle = "#fff";
  ImageTool.ctx.fillRect(0, 0, ImageTool.canvas.width, ImageTool.canvas.height); //如果图片像素大于100万则使用瓦片绘制

  var count;

  if ((count = width * height / 1000000) > 1) {
    count = ~~(Math.sqrt(count) + 1); //计算要分成多少块瓦片
    //计算每块瓦片的宽和高

    var nw = ~~(width / count);
    var nh = ~~(height / count);
    ImageTool.tCanvas.width = nw;
    ImageTool.tCanvas.height = nh;

    for (var i = 0; i < count; i++) {
      for (var j = 0; j < count; j++) {
        ImageTool.tctx.drawImage(img, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, 0, 0, nw, nh);
        ImageTool.ctx.drawImage(ImageTool.tCanvas, i * nw, j * nh, nw, nh);
      }
    }
  } else {
    ImageTool.ctx.drawImage(img, 0, 0, width, height);
  } //进行最小压缩


  var ndata = ImageTool.canvas.toDataURL('image/jpeg', 0.1);
  console.log('压缩前：' + initSize);
  console.log('压缩后：' + ndata.length);
  console.log('压缩率：' + ~~(100 * (initSize - ndata.length) / initSize) + "%");
  ImageTool.tCanvas.width = ImageTool.tCanvas.height = ImageTool.canvas.width = ImageTool.canvas.height = 0;
  return ndata;
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/MVCFramework/MVCFramework.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b0fa9y91ANMNo+KE4+xW0PV', 'MVCFramework');
// Scripts/MVCFramework/MVCFramework.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ViewManager_1 = require("./ViewManager");
var ControllerManager_1 = require("./ControllerManager");
var ModelManager_1 = require("./ModelManager");
var MessageCenter_1 = require("./MessageCenter");
var ViewConfigs_1 = require("../Modules/ViewConfigs");
var MVCRegister_1 = require("../Modules/MVCRegister");
var MVCFramework = /** @class */ (function () {
    function MVCFramework() {
    }
    MVCFramework.Init = function () {
        ViewConfigs_1.default.Init();
        MVCRegister_1.MVCRegister.Init();
        MessageCenter_1.default.Init();
        ViewManager_1.default.Init();
    };
    MVCFramework.Clean = function () {
        ControllerManager_1.default.Clean();
        ModelManager_1.default.Clean();
        ViewManager_1.default.Clean();
        MessageCenter_1.default.Clean();
    };
    return MVCFramework;
}());
exports.default = MVCFramework;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTVZDRnJhbWV3b3JrXFxNVkNGcmFtZXdvcmsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw2Q0FBd0M7QUFDeEMseURBQW9EO0FBQ3BELCtDQUEwQztBQUMxQyxpREFBNEM7QUFDNUMsc0RBQWlEO0FBQ2pELHNEQUFxRDtBQUVyRDtJQUFBO0lBaUJBLENBQUM7SUFmaUIsaUJBQUksR0FBbEI7UUFFSSxxQkFBVyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ25CLHlCQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbkIsdUJBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQixxQkFBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFYSxrQkFBSyxHQUFuQjtRQUVJLDJCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzFCLHNCQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDckIscUJBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNwQix1QkFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFDTCxtQkFBQztBQUFELENBakJBLEFBaUJDLElBQUEiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmlld01hbmFnZXIgZnJvbSBcIi4vVmlld01hbmFnZXJcIjtcbmltcG9ydCBDb250cm9sbGVyTWFuYWdlciBmcm9tIFwiLi9Db250cm9sbGVyTWFuYWdlclwiO1xuaW1wb3J0IE1vZGVsTWFuYWdlciBmcm9tIFwiLi9Nb2RlbE1hbmFnZXJcIjtcbmltcG9ydCBNZXNzYWdlQ2VudGVyIGZyb20gXCIuL01lc3NhZ2VDZW50ZXJcIjtcbmltcG9ydCBWaWV3Q29uZmlncyBmcm9tIFwiLi4vTW9kdWxlcy9WaWV3Q29uZmlnc1wiO1xuaW1wb3J0IHsgTVZDUmVnaXN0ZXIgfSBmcm9tIFwiLi4vTW9kdWxlcy9NVkNSZWdpc3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNVkNGcmFtZXdvcmsgXG57XG4gICAgcHVibGljIHN0YXRpYyBJbml0KClcbiAgICB7XG4gICAgICAgIFZpZXdDb25maWdzLkluaXQoKTtcbiAgICAgICAgTVZDUmVnaXN0ZXIuSW5pdCgpO1xuICAgICAgICBNZXNzYWdlQ2VudGVyLkluaXQoKTtcbiAgICAgICAgVmlld01hbmFnZXIuSW5pdCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgQ2xlYW4oKVxuICAgIHtcbiAgICAgICAgQ29udHJvbGxlck1hbmFnZXIuQ2xlYW4oKTtcbiAgICAgICAgTW9kZWxNYW5hZ2VyLkNsZWFuKCk7XG4gICAgICAgIFZpZXdNYW5hZ2VyLkNsZWFuKCk7XG4gICAgICAgIE1lc3NhZ2VDZW50ZXIuQ2xlYW4oKTtcbiAgICB9XG59Il19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/MVCFramework/ModelManager.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '3553esqZL5Mt5BCzKgr36F9', 'ModelManager');
// Scripts/MVCFramework/ModelManager.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MVCRegister_1 = require("../Modules/MVCRegister");
var MessageCenter_1 = require("./MessageCenter");
var ModelManager = /** @class */ (function () {
    function ModelManager() {
    }
    ModelManager.GetModel = function (modelName) {
        if (this.dicModels[modelName] == null) {
            var model = MVCRegister_1.MVCRegister.dicModels[modelName]();
            model.sendMsgCallBack = function (msg, msgBody) {
                MessageCenter_1.default.SendMessage(msg, msgBody);
            };
            model.Init();
            this.dicModels[modelName] = model;
        }
        return this.dicModels[modelName];
    };
    ModelManager.Clean = function () {
        for (var modelName in this.dicModels) {
            this.dicModels[modelName].Clean();
        }
        this.dicModels = {};
    };
    ModelManager.dicModels = {};
    return ModelManager;
}());
exports.default = ModelManager;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTVZDRnJhbWV3b3JrXFxNb2RlbE1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxzREFBcUQ7QUFDckQsaURBQTRDO0FBRTVDO0lBQUE7SUEyQkEsQ0FBQztJQXhCaUIscUJBQVEsR0FBdEIsVUFBdUIsU0FBZ0I7UUFFbkMsSUFBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksRUFDcEM7WUFDSSxJQUFJLEtBQUssR0FBUyx5QkFBVyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1lBQ3JELEtBQUssQ0FBQyxlQUFlLEdBQUcsVUFBQyxHQUFHLEVBQUMsT0FBTztnQkFDaEMsdUJBQWEsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzNDLENBQUMsQ0FBQztZQUNGLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNiLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsS0FBSyxDQUFDO1NBQ3JDO1FBRUQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFYSxrQkFBSyxHQUFuQjtRQUVJLEtBQUksSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsRUFDbkM7WUFDSSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3JDO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQXhCYyxzQkFBUyxHQUE4QixFQUFFLENBQUM7SUF5QjdELG1CQUFDO0NBM0JELEFBMkJDLElBQUE7a0JBM0JvQixZQUFZIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1vZGVsIGZyb20gXCIuL01vZGVsXCI7XG5pbXBvcnQgeyBNVkNSZWdpc3RlciB9IGZyb20gXCIuLi9Nb2R1bGVzL01WQ1JlZ2lzdGVyXCI7XG5pbXBvcnQgTWVzc2FnZUNlbnRlciBmcm9tIFwiLi9NZXNzYWdlQ2VudGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGVsTWFuYWdlclxue1xuICAgIHByaXZhdGUgc3RhdGljIGRpY01vZGVsczp7W21vZGVsTmFtZTpzdHJpbmddOk1vZGVsfSA9IHt9O1xuICAgIHB1YmxpYyBzdGF0aWMgR2V0TW9kZWwobW9kZWxOYW1lOnN0cmluZyk6TW9kZWxcbiAgICB7XG4gICAgICAgIGlmKHRoaXMuZGljTW9kZWxzW21vZGVsTmFtZV0gPT0gbnVsbClcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IG1vZGVsOk1vZGVsID0gTVZDUmVnaXN0ZXIuZGljTW9kZWxzW21vZGVsTmFtZV0oKTtcbiAgICAgICAgICAgIG1vZGVsLnNlbmRNc2dDYWxsQmFjayA9IChtc2csbXNnQm9keSk9PntcbiAgICAgICAgICAgICAgICBNZXNzYWdlQ2VudGVyLlNlbmRNZXNzYWdlKG1zZyxtc2dCb2R5KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtb2RlbC5Jbml0KCk7XG4gICAgICAgICAgICB0aGlzLmRpY01vZGVsc1ttb2RlbE5hbWVdID0gbW9kZWw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLmRpY01vZGVsc1ttb2RlbE5hbWVdO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgQ2xlYW4oKVxuICAgIHtcbiAgICAgICAgZm9yKGxldCBtb2RlbE5hbWUgaW4gdGhpcy5kaWNNb2RlbHMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZGljTW9kZWxzW21vZGVsTmFtZV0uQ2xlYW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGljTW9kZWxzID0ge307XG4gICAgfVxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/MVCFramework/View.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '21d8fn7U5JPb5vS4rQpjoaJ', 'View');
// Scripts/MVCFramework/View.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Tools/Util");
var ViewConfigs_1 = require("../Modules/ViewConfigs");
var View = /** @class */ (function () {
    function View() {
        this.removeMaskClick = false;
        this.isShow = false;
        this.isLoadingAsync = false;
        // public shouldShowLoading:boolean = false;
        this.clickFuncs = {};
        this.buttonCustomDatas = {};
        this.buttonAudios = {};
        this.showCallback = null;
        this.hideCallback = null;
        this.transformCache = {};
        this.name = "";
        this.layer = ViewConfigs_1.LayerOrderNum.UINormal;
        this.isFocus = false;
        this.onHideViewCallback = null;
        this.onShowViewCallback = null;
        this.dependentRes = [];
        //当show调用的时候，如果资源加载期间，调用了hide，应该在show成功后，把view hide掉。
        this.shouldShow = true;
    }
    View.prototype.Init = function () {
        this.removeMaskClick = false;
        this.isShow = false;
        this.clickFuncs = {};
        this.buttonAudios = {};
        this.buttonCustomDatas = {};
    };
    //框架调用，上层请勿调用
    View.prototype.SetButtonClicks = function () {
        for (var btnName in this.clickFuncs) {
            var tr = this.FindTransform(btnName);
            if (tr == null) {
                cc.error("SetButtonClicks 不存在 btnName " + btnName + " 按钮，添加按钮事件失败 ");
            }
            else {
                var button = tr.getComponent(cc.Button);
                if (button == null) {
                    cc.error("btnName " + btnName + " 没有附加Button组件，添加按钮事件失败 ");
                }
                else {
                    Util_1.default.SetClickAction(button, this.clickFuncs[btnName], this.buttonAudios[btnName], this.buttonCustomDatas[btnName]);
                }
            }
        }
    };
    ////以下是上层可调用的 customData和audioName是可选参数，可不填
    View.prototype.SetOnClick = function (buttonName, callback, audioName, customData) {
        this.clickFuncs[buttonName] = callback;
        this.buttonAudios[buttonName] = audioName;
        this.buttonCustomDatas[buttonName] = customData;
    };
    View.prototype.FindTransform = function (name) {
        if (this.transformCache[name] != null) {
            return this.transformCache[name];
        }
        else {
            cc.error("FindTransform 不存在transformName " + name);
            return null;
        }
    };
    View.prototype.RemoveMaskClick = function () {
        this.removeMaskClick = true;
    };
    //加载依赖资源，全部加载完才会回调show callback
    View.prototype.AddDependentRes = function (resPath) {
        this.dependentRes.push(resPath);
    };
    //Show是异步加载资源，需要callback机制
    View.prototype.Show = function (successCallback, failCallback) {
        var _this = this;
        if (successCallback === void 0) { successCallback = null; }
        if (failCallback === void 0) { failCallback = null; }
        this.shouldShow = true;
        if (this.isShow == true) {
            if (successCallback != null)
                successCallback();
            return;
        }
        if (this.isLoadingAsync == true) {
            cc.error("view " + name + " 资源异步请求中，请勿重复调用");
            return;
        }
        this.showCallback(function (success, errMsg) {
            if (success == true) {
                if (successCallback != null) {
                    successCallback();
                }
                if (_this.shouldShow == false) {
                    _this.Hide();
                }
            }
            else {
                if (failCallback != null) {
                    failCallback(errMsg);
                }
            }
        });
    };
    View.prototype.Hide = function () {
        this.shouldShow = false;
        if (this.isShow == false) {
            return;
        }
        this.hideCallback();
    };
    //以下是重写函数
    View.prototype.OnAwake = function () {
    };
    //显示的时候回调
    View.prototype.OnShowView = function () {
    };
    //隐藏的时候回调
    View.prototype.OnHideView = function () {
    };
    //当界面去到最前的时候回调
    View.prototype.OnFocus = function () {
    };
    //当界面从最前切换回非最前的时候回调
    View.prototype.OnDisFocus = function () {
    };
    //当界面销毁的时候回调
    View.prototype.OnDestroy = function () {
    };
    return View;
}());
exports.default = View;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/MVCFramework/ControllerManager.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '044a1053J1NVo1klT+6U9dS', 'ControllerManager');
// Scripts/MVCFramework/ControllerManager.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MVCRegister_1 = require("../Modules/MVCRegister");
var MessageCenter_1 = require("./MessageCenter");
var ViewManager_1 = require("./ViewManager");
var ModelManager_1 = require("./ModelManager");
var ControllerManager = /** @class */ (function () {
    function ControllerManager() {
    }
    ControllerManager.OnReceiveMessage = function (controllerName, msg, msgBody) {
        if (this.dicControllers[controllerName] == null) {
            var controller = MVCRegister_1.MVCRegister.dicControllers[controllerName]();
            controller.name = controllerName;
            controller.sendMsgCallBack = function (msg, msgBody) {
                MessageCenter_1.default.SendMessage(msg, msgBody);
            };
            controller.getViewCallback = function (viewName) {
                return ViewManager_1.default.GetView(viewName);
            };
            controller.getModelCallback = function (modelName) {
                return ModelManager_1.default.GetModel(modelName);
            };
            controller.Init();
            this.dicControllers[controllerName] = controller;
        }
        this.dicControllers[controllerName].OnReceiveMessage(msg, msgBody);
    };
    ControllerManager.Clean = function () {
        for (var controllerName in this.dicControllers) {
            if (this.unClearControllers[controllerName] == null) {
                this.dicControllers[controllerName].Clean();
            }
        }
        var controllerCache = {};
        for (var controllerName in this.dicControllers) {
            if (this.unClearControllers[controllerName] != null) {
                controllerCache[controllerName] = this.dicControllers[controllerName];
            }
        }
        this.dicControllers = null;
        this.dicControllers = controllerCache;
    };
    ControllerManager.unClearControllers = ["ControllerToast", "ControllerDialog", "ControllerDialogTip", "ControllerScreenMask"];
    ControllerManager.dicControllers = {};
    return ControllerManager;
}());
exports.default = ControllerManager;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTVZDRnJhbWV3b3JrXFxDb250cm9sbGVyTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLHNEQUFxRDtBQUNyRCxpREFBNEM7QUFDNUMsNkNBQXdDO0FBQ3hDLCtDQUEwQztBQUUxQztJQUFBO0lBcURBLENBQUM7SUFoRGlCLGtDQUFnQixHQUE5QixVQUErQixjQUFxQixFQUFDLEdBQVUsRUFBQyxPQUFXO1FBRXZFLElBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsSUFBSSxJQUFJLEVBQzlDO1lBQ0ksSUFBSSxVQUFVLEdBQWMseUJBQVcsQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztZQUN6RSxVQUFVLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQztZQUNqQyxVQUFVLENBQUMsZUFBZSxHQUFHLFVBQUMsR0FBRyxFQUFDLE9BQU87Z0JBQ3JDLHVCQUFhLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBQyxPQUFPLENBQUMsQ0FBQztZQUMzQyxDQUFDLENBQUM7WUFFRixVQUFVLENBQUMsZUFBZSxHQUFHLFVBQUMsUUFBUTtnQkFDbEMsT0FBTyxxQkFBVyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN6QyxDQUFDLENBQUM7WUFFRixVQUFVLENBQUMsZ0JBQWdCLEdBQUcsVUFBQyxTQUFTO2dCQUNwQyxPQUFPLHNCQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzVDLENBQUMsQ0FBQztZQUVGLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVsQixJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztTQUNwRDtRQUNELElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFYSx1QkFBSyxHQUFuQjtRQUVJLEtBQUksSUFBSSxjQUFjLElBQUksSUFBSSxDQUFDLGNBQWMsRUFDN0M7WUFDSSxJQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxJQUFJLEVBQ2xEO2dCQUNJLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDL0M7U0FDSjtRQUVELElBQUksZUFBZSxHQUF3QyxFQUFFLENBQUM7UUFDOUQsS0FBSSxJQUFJLGNBQWMsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUM3QztZQUNJLElBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxJQUFJLElBQUksRUFDbEQ7Z0JBQ0ksZUFBZSxDQUFDLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7YUFDekU7U0FDSjtRQUVELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBRTNCLElBQUksQ0FBQyxjQUFjLEdBQUcsZUFBZSxDQUFDO0lBQzFDLENBQUM7SUFsRGMsb0NBQWtCLEdBQUcsQ0FBQyxpQkFBaUIsRUFBQyxrQkFBa0IsRUFBQyxxQkFBcUIsRUFBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ3pHLGdDQUFjLEdBQXdDLEVBQUUsQ0FBQztJQWtENUUsd0JBQUM7Q0FyREQsQUFxREMsSUFBQTtrQkFyRG9CLGlCQUFpQiIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb250cm9sbGVyIGZyb20gXCIuL0NvbnRyb2xsZXJcIjtcbmltcG9ydCB7IE1WQ1JlZ2lzdGVyIH0gZnJvbSBcIi4uL01vZHVsZXMvTVZDUmVnaXN0ZXJcIjtcbmltcG9ydCBNZXNzYWdlQ2VudGVyIGZyb20gXCIuL01lc3NhZ2VDZW50ZXJcIjtcbmltcG9ydCBWaWV3TWFuYWdlciBmcm9tIFwiLi9WaWV3TWFuYWdlclwiO1xuaW1wb3J0IE1vZGVsTWFuYWdlciBmcm9tIFwiLi9Nb2RlbE1hbmFnZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udHJvbGxlck1hbmFnZXJcbntcbiAgICBwcml2YXRlIHN0YXRpYyB1bkNsZWFyQ29udHJvbGxlcnMgPSBbXCJDb250cm9sbGVyVG9hc3RcIixcIkNvbnRyb2xsZXJEaWFsb2dcIixcIkNvbnRyb2xsZXJEaWFsb2dUaXBcIixcIkNvbnRyb2xsZXJTY3JlZW5NYXNrXCJdO1xuICAgIHByaXZhdGUgc3RhdGljIGRpY0NvbnRyb2xsZXJzOntbY29udHJvbGxlck5hbWU6c3RyaW5nXTpDb250cm9sbGVyfSA9IHt9O1xuXG4gICAgcHVibGljIHN0YXRpYyBPblJlY2VpdmVNZXNzYWdlKGNvbnRyb2xsZXJOYW1lOnN0cmluZyxtc2c6c3RyaW5nLG1zZ0JvZHk6YW55KVxuICAgIHtcbiAgICAgICAgaWYodGhpcy5kaWNDb250cm9sbGVyc1tjb250cm9sbGVyTmFtZV0gPT0gbnVsbClcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IGNvbnRyb2xsZXI6Q29udHJvbGxlciA9IE1WQ1JlZ2lzdGVyLmRpY0NvbnRyb2xsZXJzW2NvbnRyb2xsZXJOYW1lXSgpO1xuICAgICAgICAgICAgY29udHJvbGxlci5uYW1lID0gY29udHJvbGxlck5hbWU7XG4gICAgICAgICAgICBjb250cm9sbGVyLnNlbmRNc2dDYWxsQmFjayA9IChtc2csbXNnQm9keSk9PntcbiAgICAgICAgICAgICAgICBNZXNzYWdlQ2VudGVyLlNlbmRNZXNzYWdlKG1zZyxtc2dCb2R5KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZ2V0Vmlld0NhbGxiYWNrID0gKHZpZXdOYW1lKT0+e1xuICAgICAgICAgICAgICAgIHJldHVybiBWaWV3TWFuYWdlci5HZXRWaWV3KHZpZXdOYW1lKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZ2V0TW9kZWxDYWxsYmFjayA9IChtb2RlbE5hbWUpPT57XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1vZGVsTWFuYWdlci5HZXRNb2RlbChtb2RlbE5hbWUpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29udHJvbGxlci5Jbml0KCk7XG5cbiAgICAgICAgICAgIHRoaXMuZGljQ29udHJvbGxlcnNbY29udHJvbGxlck5hbWVdID0gY29udHJvbGxlcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpY0NvbnRyb2xsZXJzW2NvbnRyb2xsZXJOYW1lXS5PblJlY2VpdmVNZXNzYWdlKG1zZyxtc2dCb2R5KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIENsZWFuKClcbiAgICB7XG4gICAgICAgIGZvcihsZXQgY29udHJvbGxlck5hbWUgaW4gdGhpcy5kaWNDb250cm9sbGVycylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYodGhpcy51bkNsZWFyQ29udHJvbGxlcnNbY29udHJvbGxlck5hbWVdID09IG51bGwpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaWNDb250cm9sbGVyc1tjb250cm9sbGVyTmFtZV0uQ2xlYW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjb250cm9sbGVyQ2FjaGU6e1tjb250cm9sbGVyTmFtZTpzdHJpbmddOkNvbnRyb2xsZXJ9ID0ge307XG4gICAgICAgIGZvcihsZXQgY29udHJvbGxlck5hbWUgaW4gdGhpcy5kaWNDb250cm9sbGVycylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYodGhpcy51bkNsZWFyQ29udHJvbGxlcnNbY29udHJvbGxlck5hbWVdICE9IG51bGwpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlckNhY2hlW2NvbnRyb2xsZXJOYW1lXSA9IHRoaXMuZGljQ29udHJvbGxlcnNbY29udHJvbGxlck5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kaWNDb250cm9sbGVycyA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5kaWNDb250cm9sbGVycyA9IGNvbnRyb2xsZXJDYWNoZTtcbiAgICB9XG59XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/MVCFramework/Controller.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f8ac4Mrk8BLy5lJ35l6xVes', 'Controller');
// Scripts/MVCFramework/Controller.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Controller = /** @class */ (function () {
    function Controller() {
    }
    Controller.prototype.SendMessage = function (msg, msgBody) {
        if (msgBody === void 0) { msgBody = null; }
        this.sendMsgCallBack(msg, msgBody);
    };
    Controller.prototype.GetView = function (viewName) {
        return this.getViewCallback(viewName);
    };
    Controller.prototype.GetModel = function (modelName) {
        return this.getModelCallback(modelName);
    };
    //以下是可以重写的函数
    Controller.prototype.Init = function () {
    };
    //重写函数
    Controller.prototype.Clean = function () {
    };
    //重写函数
    Controller.prototype.OnReceiveMessage = function (msg, msgBody) {
    };
    return Controller;
}());
exports.default = Controller;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTVZDRnJhbWV3b3JrXFxDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0E7SUFPSTtJQUVBLENBQUM7SUFFTSxnQ0FBVyxHQUFsQixVQUFtQixHQUFVLEVBQUMsT0FBZ0I7UUFBaEIsd0JBQUEsRUFBQSxjQUFnQjtRQUUxQyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBQyxPQUFPLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRU0sNEJBQU8sR0FBZCxVQUFlLFFBQWU7UUFFMUIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFTSw2QkFBUSxHQUFmLFVBQWdCLFNBQWdCO1FBRTVCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxZQUFZO0lBQ0wseUJBQUksR0FBWDtJQUdBLENBQUM7SUFFRCxNQUFNO0lBQ0MsMEJBQUssR0FBWjtJQUdBLENBQUM7SUFFRCxNQUFNO0lBQ0MscUNBQWdCLEdBQXZCLFVBQXdCLEdBQVUsRUFBQyxPQUFXO0lBRzlDLENBQUM7SUFFTCxpQkFBQztBQUFELENBNUNBLEFBNENDLElBQUEiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmlldyBmcm9tIFwiLi9WaWV3XCI7XG5pbXBvcnQgTW9kZWwgZnJvbSBcIi4vTW9kZWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udHJvbGxlciBcbntcbiAgICBwdWJsaWMgbmFtZTpzdHJpbmc7XG4gICAgcHVibGljIHNlbmRNc2dDYWxsQmFjazooc3RyaW5nLGFueSk9PnZvaWQ7XG4gICAgcHVibGljIGdldFZpZXdDYWxsYmFjazooc3RyaW5nKT0+VmlldztcbiAgICBwdWJsaWMgZ2V0TW9kZWxDYWxsYmFjazooc3RyaW5nKT0+TW9kZWw7XG5cbiAgICBjb25zdHJ1Y3Rvcigpe1xuXG4gICAgfVxuXG4gICAgcHVibGljIFNlbmRNZXNzYWdlKG1zZzpzdHJpbmcsbXNnQm9keTphbnk9bnVsbClcbiAgICB7XG4gICAgICAgIHRoaXMuc2VuZE1zZ0NhbGxCYWNrKG1zZyxtc2dCb2R5KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgR2V0Vmlldyh2aWV3TmFtZTpzdHJpbmcpOlZpZXdcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFZpZXdDYWxsYmFjayh2aWV3TmFtZSk7XG4gICAgfVxuXG4gICAgcHVibGljIEdldE1vZGVsKG1vZGVsTmFtZTpzdHJpbmcpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRNb2RlbENhbGxiYWNrKG1vZGVsTmFtZSk7XG4gICAgfVxuXG4gICAgLy/ku6XkuIvmmK/lj6/ku6Xph43lhpnnmoTlh73mlbBcbiAgICBwdWJsaWMgSW5pdCgpXG4gICAge1xuXG4gICAgfVxuXG4gICAgLy/ph43lhpnlh73mlbBcbiAgICBwdWJsaWMgQ2xlYW4oKVxuICAgIHtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgLy/ph43lhpnlh73mlbBcbiAgICBwdWJsaWMgT25SZWNlaXZlTWVzc2FnZShtc2c6c3RyaW5nLG1zZ0JvZHk6YW55KVxuICAgIHtcblxuICAgIH1cblxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Components/TimerManager.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f4760tHsLRJ4ZcJ5ghN1QKx', 'TimerManager');
// Scripts/Components/TimerManager.ts

"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UpdateBeat_1 = require("../Manager/UpdateBeat");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var TimerManager = /** @class */ (function () {
    /**
     *
     */
    function TimerManager() {
        var _this = this;
        this.id = 0;
        this.dicTimers = {};
        this.listIDWaitToRemove = [];
        // super();
        UpdateBeat_1.default.GetInstance().Add(function (deltaTime) {
            _this.UpdateFunc(deltaTime);
        });
    }
    TimerManager_1 = TimerManager;
    TimerManager.GetInstance = function () {
        if (this.m_Instance == null) {
            // let node:cc.Node = new cc.Node("TimerManager");
            // node.setParent(cc.find("Main"));
            // this.m_Instance = node.addComponent(TimerManager);
            this.m_Instance = new TimerManager_1();
        }
        return this.m_Instance;
    };
    TimerManager.prototype.DeleteTimerEvents = function () {
        if (this.listIDWaitToRemove.length == 0)
            return;
        for (var i = 0; i < this.listIDWaitToRemove.length; i++) {
            delete this.dicTimers[this.listIDWaitToRemove[i]];
        }
        this.listIDWaitToRemove = [];
    };
    TimerManager.prototype.UpdateFunc = function (dt) {
        this.DeleteTimerEvents();
        for (var id in this.dicTimers) {
            var timerEvent = this.dicTimers[id];
            timerEvent.timeCal += dt;
            if (timerEvent.timeCal > timerEvent.delay && timerEvent.haveRunDelayAction == false) {
                timerEvent.haveRunDelayAction = true;
                timerEvent.action(timerEvent.parm);
            }
            if (timerEvent.repeatTimes != 1) {
                if (timerEvent.timeCal > timerEvent.delay + (timerEvent.currentTime + 1) * timerEvent.interval) {
                    timerEvent.action(timerEvent.parm);
                    timerEvent.currentTime++;
                }
            }
            if (timerEvent.repeatTimes != -1) {
                if (timerEvent.haveRunDelayAction == true && timerEvent.currentTime >= timerEvent.repeatTimes - 1) {
                    this.listIDWaitToRemove.push(timerEvent.id);
                }
            }
        }
        this.DeleteTimerEvents();
    };
    /**
     * 创建定时器，返回定时器id，用于手动清除。如果不执行手动删除其会自动清除。
     * @param [action] 延时执行的方法
     * @param [delay] 单位是秒
     * @param [parm] action传入参数,默认null
     * @param [repeatTimes] 总过执行次数，0和1作用一样，大于1才会执行多次
     * @param [interval] 延时执行后重复的间隔,0为interval=delay，默认0
     * @param [keepAlive] true=保持计时器不被清除，必须调用指定的方法才能清除这个计时器，默认false
     */
    TimerManager.prototype.CallActionDelay = function (action, delay, parm, repeatTimes, interval, keepAlive) {
        if (parm === void 0) { parm = null; }
        if (repeatTimes === void 0) { repeatTimes = 1; }
        if (interval === void 0) { interval = 0; }
        if (keepAlive === void 0) { keepAlive = false; }
        if (delay == 0) {
            delay = 0.01;
        }
        if (repeatTimes <= -1) {
            repeatTimes = -1;
        }
        if (repeatTimes == 0) {
            repeatTimes = 1;
        }
        if (interval <= 0 || interval == null) {
            interval = delay;
        }
        var timerEvent = new TimerEvent();
        timerEvent.id = this.id.toString();
        timerEvent.action = action;
        timerEvent.delay = delay;
        timerEvent.parm = parm;
        timerEvent.repeatTimes = repeatTimes;
        timerEvent.interval = interval;
        timerEvent.keepAlive = keepAlive;
        this.dicTimers[timerEvent.id] = timerEvent;
        this.id++;
        return timerEvent.id;
    };
    /**
     * 手动删除定时器
     * @param [id] 定时器id
     */
    TimerManager.prototype.DeleteTimer = function (id) {
        if (id == null) {
            return;
        }
        if (this.dicTimers[id] != null)
            this.listIDWaitToRemove.push(id);
    };
    TimerManager.prototype.ClearAll = function () {
        for (var key in this.dicTimers) {
            this.DeleteTimer(key);
        }
    };
    TimerManager.prototype.ClearAllButKeepLive = function () {
        for (var key in this.dicTimers) {
            if (this.dicTimers[key].keepAlive == false)
                this.DeleteTimer(key);
        }
    };
    var TimerManager_1;
    TimerManager = TimerManager_1 = __decorate([
        ccclass
    ], TimerManager);
    return TimerManager;
}());
exports.default = TimerManager;
var TimerEvent = /** @class */ (function () {
    function TimerEvent() {
        this.delay = 0;
        this.interval = 0;
        this.action = null;
        this.parm = null;
        this.repeatTimes = 0;
        //计时器
        this.timeCal = 0;
        //当前repeate次数
        this.currentTime = 0;
        this.keepAlive = false;
        this.haveRunDelayAction = false;
    }
    return TimerEvent;
}());

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Manager/AudioManager.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4d23cGpbJFH47FUymXcbXi8', 'AudioManager');
// Scripts/Manager/AudioManager.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LocalStorageKey_1 = require("../Global/LocalStorageKey");
var ccC_1 = require("../Tools/ccC");
// import Global from "../Global/Global";
var AudioManager = /** @class */ (function () {
    function AudioManager() {
        this.bgmVolume = 1;
        this.audioVolume = 1;
    }
    AudioManager.GetInstance = function () {
        if (this.m_Instance == null) {
            this.m_Instance = new AudioManager();
        }
        return this.m_Instance;
    };
    AudioManager.prototype.Init = function () {
        if (localStorage.getItem(LocalStorageKey_1.default.BgmVolume) == null) {
            localStorage.setItem(LocalStorageKey_1.default.BgmVolume, "1");
        }
        if (localStorage.getItem(LocalStorageKey_1.default.AudioVolume) == null) {
            localStorage.setItem(LocalStorageKey_1.default.AudioVolume, "1");
        }
        this.bgmVolume = parseFloat(localStorage.getItem(LocalStorageKey_1.default.BgmVolume));
        this.audioVolume = parseFloat(localStorage.getItem(LocalStorageKey_1.default.AudioVolume));
        cc.audioEngine.setMaxAudioInstance(10);
        cc.audioEngine.setMusicVolume(this.bgmVolume);
        cc.audioEngine.setEffectsVolume(this.audioVolume);
    };
    AudioManager.prototype.GetBgmVolume = function () {
        return this.bgmVolume;
    };
    AudioManager.prototype.GetAudioVolume = function () {
        return this.audioVolume;
    };
    AudioManager.prototype.SetBgmVolume = function (value) {
        this.bgmVolume = value;
        cc.audioEngine.setMusicVolume(this.bgmVolume);
        localStorage.setItem(LocalStorageKey_1.default.BgmVolume, value.toString());
    };
    AudioManager.prototype.SetAudioVolume = function (value) {
        this.audioVolume = value;
        cc.audioEngine.setEffectsVolume(this.audioVolume);
        localStorage.setItem(LocalStorageKey_1.default.AudioVolume, value.toString());
    };
    AudioManager.prototype.SoundPlay = function (path, isLoop, callback) {
        if (isLoop === void 0) { isLoop = false; }
        if (callback === void 0) { callback = null; }
        //cc.error(path+"#############");
        ccC_1.default.loadRes(path, cc.AudioClip, function (err, clip) {
            if (err) {
                cc.error("err  " + err.message || err);
                return;
            }
            try {
                // cc.error(clip);
                // cc.error("clip is here-------------------");
                var audioID = cc.audioEngine.playEffect(clip, isLoop);
                if (callback != null) {
                    callback(audioID);
                }
            }
            catch (err) {
                cc.error(err);
                cc.error(path + "音效有一点点错误--------------------");
            }
        });
    };
    AudioManager.prototype.SoundPlayWithVolume = function (path, isLoop, volume, callback) {
        if (isLoop === void 0) { isLoop = false; }
        if (volume === void 0) { volume = 1; }
        if (callback === void 0) { callback = null; }
        ccC_1.default.loadRes(path, cc.AudioClip, function (err, clip) {
            if (err) {
                cc.error("err  " + err.message || err);
                return;
            }
            var audioID = cc.audioEngine.playEffect(clip, isLoop);
            cc.audioEngine.setVolume(audioID, volume);
            if (callback != null) {
                callback(audioID);
            }
        });
    };
    AudioManager.prototype.SoundPause = function (audioID) {
        cc.audioEngine.pauseEffect(audioID);
    };
    AudioManager.prototype.SoundAllPause = function () {
        cc.audioEngine.pauseAll();
    };
    AudioManager.prototype.SoundStop = function (audioID) {
        cc.audioEngine.stop(audioID);
    };
    AudioManager.prototype.BGMPlay = function (path, callback) {
        if (callback === void 0) { callback = null; }
        //cc.error(path+"#############背景音乐");
        if (this.playingBGM == path)
            return;
        this.playingBGM = path;
        ccC_1.default.loadRes(path, cc.AudioClip, function (err, clip) {
            if (err) {
                cc.error("err  " + err.message || err);
                return;
            }
            try {
                var audioID = cc.audioEngine.playMusic(clip, true);
                if (callback != null) {
                    callback(audioID);
                }
            }
            catch (err) {
                cc.error(err);
                cc.error(path + "背景音乐有一点点错误也--------------------");
            }
        });
    };
    AudioManager.prototype.BGMStop = function () {
        cc.audioEngine.stopMusic();
    };
    AudioManager.m_Instance = null;
    return AudioManager;
}());
exports.default = AudioManager;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/MVCFramework/Model.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '49736HY0GpIkocA3x98VDlL', 'Model');
// Scripts/MVCFramework/Model.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Model = /** @class */ (function () {
    function Model() {
        this.sendMsgCallBack = null;
    }
    Model.prototype.SendMessage = function (msg, msgBody) {
        if (msgBody === void 0) { msgBody = null; }
        this.sendMsgCallBack(msg, msgBody);
    };
    //可以重写
    Model.prototype.Init = function () {
    };
    //可以重写
    Model.prototype.Clean = function () {
    };
    return Model;
}());
exports.default = Model;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTVZDRnJhbWV3b3JrXFxNb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0lBSUk7UUFGTyxvQkFBZSxHQUFzQixJQUFJLENBQUM7SUFLakQsQ0FBQztJQUVNLDJCQUFXLEdBQWxCLFVBQW1CLEdBQVUsRUFBQyxPQUFnQjtRQUFoQix3QkFBQSxFQUFBLGNBQWdCO1FBRTFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxNQUFNO0lBQ0Msb0JBQUksR0FBWDtJQUdBLENBQUM7SUFFRCxNQUFNO0lBQ0MscUJBQUssR0FBWjtJQUdBLENBQUM7SUFDTCxZQUFDO0FBQUQsQ0F6QkEsQUF5QkMsSUFBQSIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGVsIFxue1xuICAgIHB1YmxpYyBzZW5kTXNnQ2FsbEJhY2s6KHN0cmluZyxhbnkpPT52b2lkID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKClcbiAgICB7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgU2VuZE1lc3NhZ2UobXNnOnN0cmluZyxtc2dCb2R5OmFueT1udWxsKVxuICAgIHtcbiAgICAgICAgdGhpcy5zZW5kTXNnQ2FsbEJhY2sobXNnLG1zZ0JvZHkpO1xuICAgIH1cblxuICAgIC8v5Y+v5Lul6YeN5YaZXG4gICAgcHVibGljIEluaXQoKVxuICAgIHtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgLy/lj6/ku6Xph43lhplcbiAgICBwdWJsaWMgQ2xlYW4oKVxuICAgIHtcbiAgICAgICAgXG4gICAgfVxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/MVCFramework/MessageCenter.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '84b5aBx+wVCNI3eOdqiaX9e', 'MessageCenter');
// Scripts/MVCFramework/MessageCenter.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ControllerManager_1 = require("./ControllerManager");
var MVCRegister_1 = require("../Modules/MVCRegister");
var MessageCenter = /** @class */ (function () {
    function MessageCenter() {
    }
    //从 controllername:msgs 转变为 msg:controllers
    MessageCenter.RegisterControllerMsgListening = function (controllerMsgsDic) {
        this.dicMsgToController = {};
        // let dicMsgToController :{[key: string]: string} = {};
        for (var controllerName in controllerMsgsDic) {
            var msgs = controllerMsgsDic[controllerName];
            for (var i = 0; i < msgs.length; i++) {
                var msg = msgs[i];
                if (this.dicMsgToController[msg] == null) {
                    this.dicMsgToController[msg] = new Array();
                }
                this.dicMsgToController[msg].push(controllerName);
            }
        }
    };
    MessageCenter.Clean = function () {
        this.dicMsgs = {};
        this.dicMessageName = {};
        this.dicMsgToController = {};
        this.eventid = 0;
    };
    MessageCenter.Init = function () {
        //todo
        this.RegisterControllerMsgListening(MVCRegister_1.MVCRegister.dicControllerMsgListening);
    };
    MessageCenter.SendMessage = function (message, msgBody) {
        if (this.dicMsgs[message] != null) {
            var funcs = this.dicMsgs[message];
            for (var eventid in funcs) {
                if (funcs[eventid] != null)
                    funcs[eventid](message, msgBody);
            }
        }
        if (this.dicMsgToController[message] != null) {
            var controllers = this.dicMsgToController[message];
            for (var i = 0; i < controllers.length; i++) {
                ControllerManager_1.default.OnReceiveMessage(controllers[i], message, msgBody);
            }
        }
    };
    MessageCenter.AddListener = function (message, func) {
        this.eventid++;
        if (this.dicMsgs[message] == null) {
            var funcs = {};
            this.dicMsgs[message] = funcs;
        }
        this.dicMsgs[message][this.eventid] = func;
        this.dicMessageName[this.eventid] = message;
        return this.eventid;
    };
    MessageCenter.RemoveListener = function (eventid) {
        var message = this.dicMessageName[eventid];
        if (this.dicMsgs[message] != null) {
            delete this.dicMsgs[message][eventid];
            delete this.dicMessageName[eventid];
        }
    };
    MessageCenter.dicMsgs = {};
    MessageCenter.dicMessageName = {};
    MessageCenter.dicMsgToController = {};
    MessageCenter.eventid = 0;
    return MessageCenter;
}());
exports.default = MessageCenter;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTVZDRnJhbWV3b3JrXFxNZXNzYWdlQ2VudGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEseURBQW9EO0FBQ3BELHNEQUFxRDtBQUVyRDtJQUFBO0lBdUZBLENBQUM7SUFoRkcsMkNBQTJDO0lBQzdCLDRDQUE4QixHQUE1QyxVQUE2QyxpQkFBZ0Q7UUFFekYsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztRQUU3Qix3REFBd0Q7UUFDeEQsS0FBSSxJQUFJLGNBQWMsSUFBSSxpQkFBaUIsRUFDM0M7WUFDSSxJQUFJLElBQUksR0FBaUIsaUJBQWlCLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDM0QsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQy9CO2dCQUNJLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEIsSUFBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxFQUN2QztvQkFDSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztpQkFDdEQ7Z0JBQ0QsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQzthQUNyRDtTQUNKO0lBQ0wsQ0FBQztJQUVhLG1CQUFLLEdBQW5CO1FBRUksSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRWEsa0JBQUksR0FBbEI7UUFFSSxNQUFNO1FBQ04sSUFBSSxDQUFDLDhCQUE4QixDQUFDLHlCQUFXLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRWEseUJBQVcsR0FBekIsVUFBMEIsT0FBYyxFQUFDLE9BQVk7UUFFakQsSUFBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksRUFDaEM7WUFDSSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xDLEtBQUksSUFBSSxPQUFPLElBQUksS0FBSyxFQUN4QjtnQkFDSSxJQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJO29CQUNyQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3ZDO1NBQ0o7UUFFRCxJQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLEVBQzNDO1lBQ0ksSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ25ELEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsR0FBQyxXQUFXLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUN0QztnQkFDSSwyQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxFQUFDLE9BQU8sQ0FBQyxDQUFBO2FBQ3JFO1NBQ0o7SUFDTCxDQUFDO0lBRWEseUJBQVcsR0FBekIsVUFBMEIsT0FBYyxFQUFDLElBQXlCO1FBRTlELElBQUksQ0FBQyxPQUFPLEVBQUcsQ0FBQztRQUVoQixJQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxFQUNoQztZQUNJLElBQUksS0FBSyxHQUEyQyxFQUFFLENBQUM7WUFDdkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxLQUFLLENBQUM7U0FDakM7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDM0MsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQzVDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRWEsNEJBQWMsR0FBNUIsVUFBNkIsT0FBYztRQUV2QyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNDLElBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLEVBQ2hDO1lBQ0ksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3RDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN2QztJQUNMLENBQUM7SUFwRmMscUJBQU8sR0FBaUYsRUFBRSxDQUFDO0lBQzNGLDRCQUFjLEdBQThCLEVBQUUsQ0FBQztJQUMvQyxnQ0FBa0IsR0FBbUMsRUFBRSxDQUFDO0lBQ3hELHFCQUFPLEdBQVUsQ0FBQyxDQUFDO0lBa0Z0QyxvQkFBQztDQXZGRCxBQXVGQyxJQUFBO2tCQXZGb0IsYUFBYSIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb250cm9sbGVyTWFuYWdlciBmcm9tIFwiLi9Db250cm9sbGVyTWFuYWdlclwiO1xuaW1wb3J0IHsgTVZDUmVnaXN0ZXIgfSBmcm9tIFwiLi4vTW9kdWxlcy9NVkNSZWdpc3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZXNzYWdlQ2VudGVyIFxue1xuICAgIHByaXZhdGUgc3RhdGljIGRpY01zZ3M6IHsgW2tleTogc3RyaW5nXTogeyBba2V5OiBudW1iZXJdOiAobWVzc2FnZTogc3RyaW5nLG1zZ0JvZHk6YW55KSA9PiB2b2lkIH0gIH0gPSB7fTtcbiAgICBwcml2YXRlIHN0YXRpYyBkaWNNZXNzYWdlTmFtZTogeyBba2V5OiBudW1iZXJdOiBzdHJpbmcgfSA9IHt9O1xuICAgIHByaXZhdGUgc3RhdGljIGRpY01zZ1RvQ29udHJvbGxlciA6e1trZXk6IHN0cmluZ106IEFycmF5PHN0cmluZz59ID0ge307XG4gICAgcHJpdmF0ZSBzdGF0aWMgZXZlbnRpZDpudW1iZXIgPSAwO1xuXG4gICAgLy/ku44gY29udHJvbGxlcm5hbWU6bXNncyDovazlj5jkuLogbXNnOmNvbnRyb2xsZXJzXG4gICAgcHVibGljIHN0YXRpYyBSZWdpc3RlckNvbnRyb2xsZXJNc2dMaXN0ZW5pbmcoY29udHJvbGxlck1zZ3NEaWM6e1trZXk6IHN0cmluZ106IEFycmF5PHN0cmluZz59KVxuICAgIHtcbiAgICAgICAgdGhpcy5kaWNNc2dUb0NvbnRyb2xsZXIgPSB7fTtcbiAgICAgICAgXG4gICAgICAgIC8vIGxldCBkaWNNc2dUb0NvbnRyb2xsZXIgOntba2V5OiBzdHJpbmddOiBzdHJpbmd9ID0ge307XG4gICAgICAgIGZvcihsZXQgY29udHJvbGxlck5hbWUgaW4gY29udHJvbGxlck1zZ3NEaWMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBtc2dzOkFycmF5PHN0cmluZz4gPSBjb250cm9sbGVyTXNnc0RpY1tjb250cm9sbGVyTmFtZV07XG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwO2k8bXNncy5sZW5ndGg7aSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxldCBtc2cgPSBtc2dzW2ldO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuZGljTXNnVG9Db250cm9sbGVyW21zZ10gPT0gbnVsbClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGljTXNnVG9Db250cm9sbGVyW21zZ10gPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmRpY01zZ1RvQ29udHJvbGxlclttc2ddLnB1c2goY29udHJvbGxlck5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBzdGF0aWMgQ2xlYW4oKVxuICAgIHtcbiAgICAgICAgdGhpcy5kaWNNc2dzID0ge307XG4gICAgICAgIHRoaXMuZGljTWVzc2FnZU5hbWUgPSB7fTtcbiAgICAgICAgdGhpcy5kaWNNc2dUb0NvbnRyb2xsZXIgPSB7fTtcbiAgICAgICAgdGhpcy5ldmVudGlkID0gMDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIEluaXQoKVxuICAgIHtcbiAgICAgICAgLy90b2RvXG4gICAgICAgIHRoaXMuUmVnaXN0ZXJDb250cm9sbGVyTXNnTGlzdGVuaW5nKE1WQ1JlZ2lzdGVyLmRpY0NvbnRyb2xsZXJNc2dMaXN0ZW5pbmcpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgU2VuZE1lc3NhZ2UobWVzc2FnZTpzdHJpbmcsbXNnQm9keT86YW55KVxuICAgIHtcbiAgICAgICAgaWYodGhpcy5kaWNNc2dzW21lc3NhZ2VdICE9IG51bGwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBmdW5jcyA9IHRoaXMuZGljTXNnc1ttZXNzYWdlXTtcbiAgICAgICAgICAgIGZvcihsZXQgZXZlbnRpZCBpbiBmdW5jcylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZihmdW5jc1tldmVudGlkXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICBmdW5jc1tldmVudGlkXShtZXNzYWdlLG1zZ0JvZHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYodGhpcy5kaWNNc2dUb0NvbnRyb2xsZXJbbWVzc2FnZV0gIT0gbnVsbClcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IGNvbnRyb2xsZXJzID0gdGhpcy5kaWNNc2dUb0NvbnRyb2xsZXJbbWVzc2FnZV07XG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwO2k8Y29udHJvbGxlcnMubGVuZ3RoO2krKylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBDb250cm9sbGVyTWFuYWdlci5PblJlY2VpdmVNZXNzYWdlKGNvbnRyb2xsZXJzW2ldLG1lc3NhZ2UsbXNnQm9keSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgQWRkTGlzdGVuZXIobWVzc2FnZTpzdHJpbmcsZnVuYzooc3RyaW5nLGFueSkgPT4gdm9pZCk6bnVtYmVyXG4gICAge1xuICAgICAgICB0aGlzLmV2ZW50aWQgKys7XG5cbiAgICAgICAgaWYodGhpcy5kaWNNc2dzW21lc3NhZ2VdID09IG51bGwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBmdW5jczp7IFtrZXk6IG51bWJlcl06IChzdHJpbmcsYW55KSA9PiB2b2lkIH0gPSB7fTtcbiAgICAgICAgICAgIHRoaXMuZGljTXNnc1ttZXNzYWdlXSA9IGZ1bmNzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGljTXNnc1ttZXNzYWdlXVt0aGlzLmV2ZW50aWRdID0gZnVuYztcbiAgICAgICAgdGhpcy5kaWNNZXNzYWdlTmFtZVt0aGlzLmV2ZW50aWRdID0gbWVzc2FnZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRpZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIFJlbW92ZUxpc3RlbmVyKGV2ZW50aWQ6bnVtYmVyKVxuICAgIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0aGlzLmRpY01lc3NhZ2VOYW1lW2V2ZW50aWRdO1xuICAgICAgICBpZih0aGlzLmRpY01zZ3NbbWVzc2FnZV0gIT0gbnVsbClcbiAgICAgICAge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGljTXNnc1ttZXNzYWdlXVtldmVudGlkXTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRpY01lc3NhZ2VOYW1lW2V2ZW50aWRdO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Modules/MessageNames.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'bbe5ez4vfdPUaPkesFKwvlt', 'MessageNames');
// Scripts/Modules/MessageNames.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MessageNames = /** @class */ (function () {
    function MessageNames() {
    }
    MessageNames.OpenNetworkLoading = "OpenNetworkLoading";
    MessageNames.ShowToastUI = "ShowToastUI";
    MessageNames.ShowDialog = "ShowDialog";
    MessageNames.StartLogin = "StartLogin";
    MessageNames.ShowAppStartView = "ShowAppStartView";
    MessageNames.ShowProxyInfo = "ShowProxyInfo";
    MessageNames.SubmitDeposit = "SubmitDeposit";
    MessageNames.SubmitOrder = "SubmitOrder";
    return MessageNames;
}());
exports.default = MessageNames;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcTW9kdWxlc1xcTWVzc2FnZU5hbWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7SUFBQTtJQVNBLENBQUM7SUFSaUIsK0JBQWtCLEdBQUcsb0JBQW9CLENBQUM7SUFDMUMsd0JBQVcsR0FBRyxhQUFhLENBQUM7SUFDNUIsdUJBQVUsR0FBRyxZQUFZLENBQUM7SUFDMUIsdUJBQVUsR0FBRyxZQUFZLENBQUM7SUFDMUIsNkJBQWdCLEdBQUcsa0JBQWtCLENBQUM7SUFDdEMsMEJBQWEsR0FBRyxlQUFlLENBQUM7SUFDaEMsMEJBQWEsR0FBRyxlQUFlLENBQUM7SUFDaEMsd0JBQVcsR0FBRyxhQUFhLENBQUM7SUFDOUMsbUJBQUM7Q0FURCxBQVNDLElBQUE7a0JBVG9CLFlBQVkiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBNZXNzYWdlTmFtZXMge1xuICAgIHB1YmxpYyBzdGF0aWMgT3Blbk5ldHdvcmtMb2FkaW5nID0gXCJPcGVuTmV0d29ya0xvYWRpbmdcIjtcbiAgICBwdWJsaWMgc3RhdGljIFNob3dUb2FzdFVJID0gXCJTaG93VG9hc3RVSVwiO1xuICAgIHB1YmxpYyBzdGF0aWMgU2hvd0RpYWxvZyA9IFwiU2hvd0RpYWxvZ1wiO1xuICAgIHB1YmxpYyBzdGF0aWMgU3RhcnRMb2dpbiA9IFwiU3RhcnRMb2dpblwiO1xuICAgIHB1YmxpYyBzdGF0aWMgU2hvd0FwcFN0YXJ0VmlldyA9IFwiU2hvd0FwcFN0YXJ0Vmlld1wiO1xuICAgIHB1YmxpYyBzdGF0aWMgU2hvd1Byb3h5SW5mbyA9IFwiU2hvd1Byb3h5SW5mb1wiO1xuICAgIHB1YmxpYyBzdGF0aWMgU3VibWl0RGVwb3NpdCA9IFwiU3VibWl0RGVwb3NpdFwiO1xuICAgIHB1YmxpYyBzdGF0aWMgU3VibWl0T3JkZXIgPSBcIlN1Ym1pdE9yZGVyXCI7XG59XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/JsTool/ClipboardJS.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '13f43QaorFBbI6CdorGGLFU', 'ClipboardJS');
// Scripts/JsTool/ClipboardJS.js

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClipboardJS = ClipboardJS;

function ClipboardJS() {} // ClipboardJS.Copy = function(content,callback){
//     var success = document.execCommand("Copy", false, null);
//     callback(success);
//     // var script = document.createElement("script");
//     // script.type= 'text/javascript';
//     // script.src = "./clipboard.min.js";
// }


function CreateElementForExecCommand(textToClipboard) {
  var forExecElement = document.createElement("div"); //在可见区域以外

  forExecElement.style.position = "absolute";
  forExecElement.style.left = "-10000px";
  forExecElement.style.top = "-10000px";
  forExecElement.style.userSelect = "all"; //将必需的文本写入元素并追加到文档中

  forExecElement.textContent = textToClipboard;
  document.body.appendChild(forExecElement); //内容编辑模式在火狐的exec命令方法是必要的

  forExecElement.contentEditable = true;
  return forExecElement;
}

function SelectContent(element) {
  //创建一个范围
  var rangeToSelect = document.createRange();
  rangeToSelect.selectNodeContents(element); //选择内容

  var selection = window.getSelection();
  selection.removeAllRanges();
  selection.addRange(rangeToSelect);
}

ClipboardJS.Copy = function (str) {
  console.log('复制');
  var textToClipboard = str; //文本到剪贴板

  var success = false;

  if (window.clipboardData) {
    // 浏览器
    window.clipboardData.setData("Text", textToClipboard);
    success = true;
  } else {
    var input = str + '';
    var el = document.createElement('textarea');
    el.value = input;
    el.setAttribute('readonly', '');
    el.style.contain = 'strict';
    el.style.position = 'absolute';
    el.style.left = '-9999px';
    el.style.fontSize = '12pt'; // Prevent zooming on iOS

    var selection = getSelection();
    var originalRange = false;

    if (selection.rangeCount > 0) {
      originalRange = selection.getRangeAt(0);
    }

    document.body.appendChild(el);
    el.select();
    el.selectionStart = 0;
    el.selectionEnd = input.length;

    try {
      success = document.execCommand('copy', false);
    } catch (err) {
      console.error("ClipboardJS err " + err);
    }

    document.body.removeChild(el);

    if (originalRange) {
      selection.removeAllRanges();
      selection.addRange(originalRange);
    } // var forExecElement = CreateElementForExecCommand (textToClipboard);
    // SelectContent (forExecElement);
    // try {
    //     if (window.netscape && netscape.security) {
    //         netscape.security.PrivilegeManager.enablePrivilege ("UniversalXPConnect");
    //     }
    //     //将选定内容复制到剪贴板
    //     success = document.execCommand ("copy", false, null);
    // }
    // catch (e) {
    //     success = false;
    // }
    // //移除临时元素
    // document.body.removeChild (forExecElement);

  } // return success;


  return true;
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Protos/protobuf.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}(function (global){
"use strict";
cc._RF.push(module, '8588eoGuKdO1rNCrTV383w6', 'protobuf');
// Scripts/Protos/protobuf.js

"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * protobuf.js v6.8.8 (c) 2016, daniel wirtz
 * compiled thu, 19 jul 2018 00:33:25 utc
 * licensed under the bsd-3-clause license
 * see: https://github.com/dcodeio/protobuf.js for details
 */
(function (undefined) {
  "use strict";

  (function prelude(modules, cache, entries) {
    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS
    // sources through a conflict-free require shim and is again wrapped within an iife that
    // provides a minification-friendly `undefined` var plus a global "use strict" directive
    // so that minification can remove the directives of each module.
    function $require(name) {
      var $module = cache[name];
      if (!$module) modules[name][0].call($module = cache[name] = {
        exports: {}
      }, $require, $module, $module.exports);
      return $module.exports;
    }

    var protobuf = $require(entries[0]); // Expose globally

    protobuf.util.global.protobuf = protobuf; // Be nice to AMD

    if (typeof define === "function" && define.amd) define(["long"], function (Long) {
      if (Long && Long.isLong) {
        protobuf.util.Long = Long;
        protobuf.configure();
      }

      return protobuf;
    }); // Be nice to CommonJS

    if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && module && module.exports) module.exports = protobuf;
  })(
  /* end of prelude */
  {
    1: [function (require, module, exports) {
      "use strict";

      module.exports = asPromise;
      /**
       * Callback as used by {@link util.asPromise}.
       * @typedef asPromiseCallback
       * @type {function}
       * @param {Error|null} error Error, if any
       * @param {...*} params Additional arguments
       * @returns {undefined}
       */

      /**
       * Returns a promise from a node-style callback function.
       * @memberof util
       * @param {asPromiseCallback} fn Function to call
       * @param {*} ctx Function context
       * @param {...*} params Function arguments
       * @returns {Promise<*>} Promisified function
       */

      function asPromise(fn, ctx
      /*, varargs */
      ) {
        var params = new Array(arguments.length - 1),
            offset = 0,
            index = 2,
            pending = true;

        while (index < arguments.length) {
          params[offset++] = arguments[index++];
        }

        return new Promise(function executor(resolve, reject) {
          params[offset] = function callback(err
          /*, varargs */
          ) {
            if (pending) {
              pending = false;
              if (err) reject(err);else {
                var params = new Array(arguments.length - 1),
                    offset = 0;

                while (offset < params.length) {
                  params[offset++] = arguments[offset];
                }

                resolve.apply(null, params);
              }
            }
          };

          try {
            fn.apply(ctx || null, params);
          } catch (err) {
            if (pending) {
              pending = false;
              reject(err);
            }
          }
        });
      }
    }, {}],
    2: [function (require, module, exports) {
      "use strict";
      /**
       * A minimal base64 implementation for number arrays.
       * @memberof util
       * @namespace
       */

      var base64 = exports;
      /**
       * Calculates the byte length of a base64 encoded string.
       * @param {string} string Base64 encoded string
       * @returns {number} Byte length
       */

      base64.length = function length(string) {
        var p = string.length;
        if (!p) return 0;
        var n = 0;

        while (--p % 4 > 1 && string.charAt(p) === "=") {
          ++n;
        }

        return Math.ceil(string.length * 3) / 4 - n;
      }; // Base64 encoding table


      var b64 = new Array(64); // Base64 decoding table

      var s64 = new Array(123); // 65..90, 97..122, 48..57, 43, 47

      for (var i = 0; i < 64;) {
        s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
      }
      /**
       * Encodes a buffer to a base64 encoded string.
       * @param {Uint8Array} buffer Source buffer
       * @param {number} start Source start
       * @param {number} end Source end
       * @returns {string} Base64 encoded string
       */


      base64.encode = function encode(buffer, start, end) {
        var parts = null,
            chunk = [];
        var i = 0,
            // output index
        j = 0,
            // goto index
        t; // temporary

        while (start < end) {
          var b = buffer[start++];

          switch (j) {
            case 0:
              chunk[i++] = b64[b >> 2];
              t = (b & 3) << 4;
              j = 1;
              break;

            case 1:
              chunk[i++] = b64[t | b >> 4];
              t = (b & 15) << 2;
              j = 2;
              break;

            case 2:
              chunk[i++] = b64[t | b >> 6];
              chunk[i++] = b64[b & 63];
              j = 0;
              break;
          }

          if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
          }
        }

        if (j) {
          chunk[i++] = b64[t];
          chunk[i++] = 61;
          if (j === 1) chunk[i++] = 61;
        }

        if (parts) {
          if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
          return parts.join("");
        }

        return String.fromCharCode.apply(String, chunk.slice(0, i));
      };

      var invalidEncoding = "invalid encoding";
      /**
       * Decodes a base64 encoded string to a buffer.
       * @param {string} string Source string
       * @param {Uint8Array} buffer Destination buffer
       * @param {number} offset Destination offset
       * @returns {number} Number of bytes written
       * @throws {Error} If encoding is invalid
       */

      base64.decode = function decode(string, buffer, offset) {
        var start = offset;
        var j = 0,
            // goto index
        t; // temporary

        for (var i = 0; i < string.length;) {
          var c = string.charCodeAt(i++);
          if (c === 61 && j > 1) break;
          if ((c = s64[c]) === undefined) throw Error(invalidEncoding);

          switch (j) {
            case 0:
              t = c;
              j = 1;
              break;

            case 1:
              buffer[offset++] = t << 2 | (c & 48) >> 4;
              t = c;
              j = 2;
              break;

            case 2:
              buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
              t = c;
              j = 3;
              break;

            case 3:
              buffer[offset++] = (t & 3) << 6 | c;
              j = 0;
              break;
          }
        }

        if (j === 1) throw Error(invalidEncoding);
        return offset - start;
      };
      /**
       * Tests if the specified string appears to be base64 encoded.
       * @param {string} string String to test
       * @returns {boolean} `true` if probably base64 encoded, otherwise false
       */


      base64.test = function test(string) {
        return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
      };
    }, {}],
    3: [function (require, module, exports) {
      "use strict";

      module.exports = codegen;
      /**
       * Begins generating a function.
       * @memberof util
       * @param {string[]} functionParams Function parameter names
       * @param {string} [functionName] Function name if not anonymous
       * @returns {Codegen} Appender that appends code to the function's body
       */

      function codegen(functionParams, functionName) {
        /* istanbul ignore if */
        if (typeof functionParams === "string") {
          functionName = functionParams;
          functionParams = undefined;
        }

        var body = [];
        /**
         * Appends code to the function's body or finishes generation.
         * @typedef Codegen
         * @type {function}
         * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any
         * @param {...*} [formatParams] Format parameters
         * @returns {Codegen|Function} Itself or the generated function if finished
         * @throws {Error} If format parameter counts do not match
         */

        function Codegen(formatStringOrScope) {
          // note that explicit array handling below makes this ~50% faster
          // finish the function
          if (typeof formatStringOrScope !== "string") {
            var source = toString();
            if (codegen.verbose) console.log("codegen: " + source); // eslint-disable-line no-console

            source = "return " + source;

            if (formatStringOrScope) {
              var scopeKeys = Object.keys(formatStringOrScope),
                  scopeParams = new Array(scopeKeys.length + 1),
                  scopeValues = new Array(scopeKeys.length),
                  scopeOffset = 0;

              while (scopeOffset < scopeKeys.length) {
                scopeParams[scopeOffset] = scopeKeys[scopeOffset];
                scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
              }

              scopeParams[scopeOffset] = source;
              return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func
            }

            return Function(source)(); // eslint-disable-line no-new-func
          } // otherwise append to body


          var formatParams = new Array(arguments.length - 1),
              formatOffset = 0;

          while (formatOffset < formatParams.length) {
            formatParams[formatOffset] = arguments[++formatOffset];
          }

          formatOffset = 0;
          formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
            var value = formatParams[formatOffset++];

            switch ($1) {
              case "d":
              case "f":
                return String(Number(value));

              case "i":
                return String(Math.floor(value));

              case "j":
                return JSON.stringify(value);

              case "s":
                return String(value);
            }

            return "%";
          });
          if (formatOffset !== formatParams.length) throw Error("parameter count mismatch");
          body.push(formatStringOrScope);
          return Codegen;
        }

        function toString(functionNameOverride) {
          return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
        }

        Codegen.toString = toString;
        return Codegen;
      }
      /**
       * Begins generating a function.
       * @memberof util
       * @function codegen
       * @param {string} [functionName] Function name if not anonymous
       * @returns {Codegen} Appender that appends code to the function's body
       * @variation 2
       */

      /**
       * When set to `true`, codegen will log generated code to console. Useful for debugging.
       * @name util.codegen.verbose
       * @type {boolean}
       */


      codegen.verbose = false;
    }, {}],
    4: [function (require, module, exports) {
      "use strict";

      module.exports = EventEmitter;
      /**
       * Constructs a new event emitter instance.
       * @classdesc A minimal event emitter.
       * @memberof util
       * @constructor
       */

      function EventEmitter() {
        /**
         * Registered listeners.
         * @type {Object.<string,*>}
         * @private
         */
        this._listeners = {};
      }
      /**
       * Registers an event listener.
       * @param {string} evt Event name
       * @param {function} fn Listener
       * @param {*} [ctx] Listener context
       * @returns {util.EventEmitter} `this`
       */


      EventEmitter.prototype.on = function on(evt, fn, ctx) {
        (this._listeners[evt] || (this._listeners[evt] = [])).push({
          fn: fn,
          ctx: ctx || this
        });
        return this;
      };
      /**
       * Removes an event listener or any matching listeners if arguments are omitted.
       * @param {string} [evt] Event name. Removes all listeners if omitted.
       * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
       * @returns {util.EventEmitter} `this`
       */


      EventEmitter.prototype.off = function off(evt, fn) {
        if (evt === undefined) this._listeners = {};else {
          if (fn === undefined) this._listeners[evt] = [];else {
            var listeners = this._listeners[evt];

            for (var i = 0; i < listeners.length;) {
              if (listeners[i].fn === fn) listeners.splice(i, 1);else ++i;
            }
          }
        }
        return this;
      };
      /**
       * Emits an event by calling its listeners with the specified arguments.
       * @param {string} evt Event name
       * @param {...*} args Arguments
       * @returns {util.EventEmitter} `this`
       */


      EventEmitter.prototype.emit = function emit(evt) {
        var listeners = this._listeners[evt];

        if (listeners) {
          var args = [],
              i = 1;

          for (; i < arguments.length;) {
            args.push(arguments[i++]);
          }

          for (i = 0; i < listeners.length;) {
            listeners[i].fn.apply(listeners[i++].ctx, args);
          }
        }

        return this;
      };
    }, {}],
    5: [function (require, module, exports) {
      "use strict";

      module.exports = fetch;

      var asPromise = require(1),
          inquire = require(7);

      var fs = inquire("fs");
      /**
       * Node-style callback as used by {@link util.fetch}.
       * @typedef FetchCallback
       * @type {function}
       * @param {?Error} error Error, if any, otherwise `null`
       * @param {string} [contents] File contents, if there hasn't been an error
       * @returns {undefined}
       */

      /**
       * Options as used by {@link util.fetch}.
       * @typedef FetchOptions
       * @type {Object}
       * @property {boolean} [binary=false] Whether expecting a binary response
       * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest
       */

      /**
       * Fetches the contents of a file.
       * @memberof util
       * @param {string} filename File path or url
       * @param {FetchOptions} options Fetch options
       * @param {FetchCallback} callback Callback function
       * @returns {undefined}
       */

      function fetch(filename, options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = {};
        } else if (!options) options = {};

        if (!callback) return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this
        // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.

        if (!options.xhr && fs && fs.readFile) return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
          return err && typeof XMLHttpRequest !== "undefined" ? fetch.xhr(filename, options, callback) : err ? callback(err) : callback(null, options.binary ? contents : contents.toString("utf8"));
        }); // use the XHR version otherwise.

        return fetch.xhr(filename, options, callback);
      }
      /**
       * Fetches the contents of a file.
       * @name util.fetch
       * @function
       * @param {string} path File path or url
       * @param {FetchCallback} callback Callback function
       * @returns {undefined}
       * @variation 2
       */

      /**
       * Fetches the contents of a file.
       * @name util.fetch
       * @function
       * @param {string} path File path or url
       * @param {FetchOptions} [options] Fetch options
       * @returns {Promise<string|Uint8Array>} Promise
       * @variation 3
       */

      /**/


      fetch.xhr = function fetch_xhr(filename, options, callback) {
        var xhr = new XMLHttpRequest();

        xhr.onreadystatechange
        /* works everywhere */
        = function fetchOnReadyStateChange() {
          if (xhr.readyState !== 4) return undefined; // local cors security errors return status 0 / empty string, too. afaik this cannot be
          // reliably distinguished from an actually empty file for security reasons. feel free
          // to send a pull request if you are aware of a solution.

          if (xhr.status !== 0 && xhr.status !== 200) return callback(Error("status " + xhr.status)); // if binary data is expected, make sure that some sort of array is returned, even if
          // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.

          if (options.binary) {
            var buffer = xhr.response;

            if (!buffer) {
              buffer = [];

              for (var i = 0; i < xhr.responseText.length; ++i) {
                buffer.push(xhr.responseText.charCodeAt(i) & 255);
              }
            }

            return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
          }

          return callback(null, xhr.responseText);
        };

        if (options.binary) {
          // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers
          if ("overrideMimeType" in xhr) xhr.overrideMimeType("text/plain; charset=x-user-defined");
          xhr.responseType = "arraybuffer";
        }

        xhr.open("GET", filename);
        xhr.send();
      };
    }, {
      "1": 1,
      "7": 7
    }],
    6: [function (require, module, exports) {
      "use strict";

      module.exports = factory(factory);
      /**
       * Reads / writes floats / doubles from / to buffers.
       * @name util.float
       * @namespace
       */

      /**
       * Writes a 32 bit float to a buffer using little endian byte order.
       * @name util.float.writeFloatLE
       * @function
       * @param {number} val Value to write
       * @param {Uint8Array} buf Target buffer
       * @param {number} pos Target buffer offset
       * @returns {undefined}
       */

      /**
       * Writes a 32 bit float to a buffer using big endian byte order.
       * @name util.float.writeFloatBE
       * @function
       * @param {number} val Value to write
       * @param {Uint8Array} buf Target buffer
       * @param {number} pos Target buffer offset
       * @returns {undefined}
       */

      /**
       * Reads a 32 bit float from a buffer using little endian byte order.
       * @name util.float.readFloatLE
       * @function
       * @param {Uint8Array} buf Source buffer
       * @param {number} pos Source buffer offset
       * @returns {number} Value read
       */

      /**
       * Reads a 32 bit float from a buffer using big endian byte order.
       * @name util.float.readFloatBE
       * @function
       * @param {Uint8Array} buf Source buffer
       * @param {number} pos Source buffer offset
       * @returns {number} Value read
       */

      /**
       * Writes a 64 bit double to a buffer using little endian byte order.
       * @name util.float.writeDoubleLE
       * @function
       * @param {number} val Value to write
       * @param {Uint8Array} buf Target buffer
       * @param {number} pos Target buffer offset
       * @returns {undefined}
       */

      /**
       * Writes a 64 bit double to a buffer using big endian byte order.
       * @name util.float.writeDoubleBE
       * @function
       * @param {number} val Value to write
       * @param {Uint8Array} buf Target buffer
       * @param {number} pos Target buffer offset
       * @returns {undefined}
       */

      /**
       * Reads a 64 bit double from a buffer using little endian byte order.
       * @name util.float.readDoubleLE
       * @function
       * @param {Uint8Array} buf Source buffer
       * @param {number} pos Source buffer offset
       * @returns {number} Value read
       */

      /**
       * Reads a 64 bit double from a buffer using big endian byte order.
       * @name util.float.readDoubleBE
       * @function
       * @param {Uint8Array} buf Source buffer
       * @param {number} pos Source buffer offset
       * @returns {number} Value read
       */
      // Factory function for the purpose of node-based testing in modified global environments

      function factory(exports) {
        // float: typed array
        if (typeof Float32Array !== "undefined") (function () {
          var f32 = new Float32Array([-0]),
              f8b = new Uint8Array(f32.buffer),
              le = f8b[3] === 128;

          function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
          }

          function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
          }
          /* istanbul ignore next */


          exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
          /* istanbul ignore next */

          exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

          function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
          }

          function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
          }
          /* istanbul ignore next */


          exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
          /* istanbul ignore next */

          exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy; // float: ieee754
        })();else (function () {
          function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign) val = -val;
            if (val === 0) writeUint(1 / val > 0 ?
            /* positive */
            0 :
            /* negative 0 */
            2147483648, buf, pos);else if (isNaN(val)) writeUint(2143289344, buf, pos);else if (val > 3.4028234663852886e+38) // +-Infinity
              writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);else if (val < 1.1754943508222875e-38) // denormal
              writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);else {
              var exponent = Math.floor(Math.log(val) / Math.LN2),
                  mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
              writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
          }

          exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
          exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

          function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos),
                sign = (uint >> 31) * 2 + 1,
                exponent = uint >>> 23 & 255,
                mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal
            ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
          }

          exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
          exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
        })(); // double: typed array

        if (typeof Float64Array !== "undefined") (function () {
          var f64 = new Float64Array([-0]),
              f8b = new Uint8Array(f64.buffer),
              le = f8b[7] === 128;

          function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
          }

          function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
          }
          /* istanbul ignore next */


          exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
          /* istanbul ignore next */

          exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

          function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
          }

          function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
          }
          /* istanbul ignore next */


          exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
          /* istanbul ignore next */

          exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy; // double: ieee754
        })();else (function () {
          function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign) val = -val;

            if (val === 0) {
              writeUint(0, buf, pos + off0);
              writeUint(1 / val > 0 ?
              /* positive */
              0 :
              /* negative 0 */
              2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
              writeUint(0, buf, pos + off0);
              writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) {
              // +-Infinity
              writeUint(0, buf, pos + off0);
              writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
              var mantissa;

              if (val < 2.2250738585072014e-308) {
                // denormal
                mantissa = val / 5e-324;
                writeUint(mantissa >>> 0, buf, pos + off0);
                writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
              } else {
                var exponent = Math.floor(Math.log(val) / Math.LN2);
                if (exponent === 1024) exponent = 1023;
                mantissa = val * Math.pow(2, -exponent);
                writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
              }
            }
          }

          exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
          exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

          function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0),
                hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1,
                exponent = hi >>> 20 & 2047,
                mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal
            ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
          }

          exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
          exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
        })();
        return exports;
      } // uint helpers


      function writeUintLE(val, buf, pos) {
        buf[pos] = val & 255;
        buf[pos + 1] = val >>> 8 & 255;
        buf[pos + 2] = val >>> 16 & 255;
        buf[pos + 3] = val >>> 24;
      }

      function writeUintBE(val, buf, pos) {
        buf[pos] = val >>> 24;
        buf[pos + 1] = val >>> 16 & 255;
        buf[pos + 2] = val >>> 8 & 255;
        buf[pos + 3] = val & 255;
      }

      function readUintLE(buf, pos) {
        return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
      }

      function readUintBE(buf, pos) {
        return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
      }
    }, {}],
    7: [function (require, module, exports) {
      "use strict";

      module.exports = inquire;
      /**
       * Requires a module only if available.
       * @memberof util
       * @param {string} moduleName Module to require
       * @returns {?Object} Required module if available and not empty, otherwise `null`
       */

      function inquire(moduleName) {
        try {
          var mod = eval("quire".replace(/^/, "re"))(moduleName); // eslint-disable-line no-eval

          if (mod && (mod.length || Object.keys(mod).length)) return mod;
        } catch (e) {} // eslint-disable-line no-empty


        return null;
      }
    }, {}],
    8: [function (require, module, exports) {
      "use strict";
      /**
       * A minimal path module to resolve Unix, Windows and URL paths alike.
       * @memberof util
       * @namespace
       */

      var path = exports;

      var isAbsolute =
      /**
       * Tests if the specified path is absolute.
       * @param {string} path Path to test
       * @returns {boolean} `true` if path is absolute
       */
      path.isAbsolute = function isAbsolute(path) {
        return /^(?:\/|\w+:)/.test(path);
      };

      var normalize =
      /**
       * Normalizes the specified path.
       * @param {string} path Path to normalize
       * @returns {string} Normalized path
       */
      path.normalize = function normalize(path) {
        path = path.replace(/\\/g, "/").replace(/\/{2,}/g, "/");
        var parts = path.split("/"),
            absolute = isAbsolute(path),
            prefix = "";
        if (absolute) prefix = parts.shift() + "/";

        for (var i = 0; i < parts.length;) {
          if (parts[i] === "..") {
            if (i > 0 && parts[i - 1] !== "..") parts.splice(--i, 2);else if (absolute) parts.splice(i, 1);else ++i;
          } else if (parts[i] === ".") parts.splice(i, 1);else ++i;
        }

        return prefix + parts.join("/");
      };
      /**
       * Resolves the specified include path against the specified origin path.
       * @param {string} originPath Path to the origin file
       * @param {string} includePath Include path relative to origin path
       * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized
       * @returns {string} Path to the include file
       */


      path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
        if (!alreadyNormalized) includePath = normalize(includePath);
        if (isAbsolute(includePath)) return includePath;
        if (!alreadyNormalized) originPath = normalize(originPath);
        return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
      };
    }, {}],
    9: [function (require, module, exports) {
      "use strict";

      module.exports = pool;
      /**
       * An allocator as used by {@link util.pool}.
       * @typedef PoolAllocator
       * @type {function}
       * @param {number} size Buffer size
       * @returns {Uint8Array} Buffer
       */

      /**
       * A slicer as used by {@link util.pool}.
       * @typedef PoolSlicer
       * @type {function}
       * @param {number} start Start offset
       * @param {number} end End offset
       * @returns {Uint8Array} Buffer slice
       * @this {Uint8Array}
       */

      /**
       * A general purpose buffer pool.
       * @memberof util
       * @function
       * @param {PoolAllocator} alloc Allocator
       * @param {PoolSlicer} slice Slicer
       * @param {number} [size=8192] Slab size
       * @returns {PoolAllocator} Pooled allocator
       */

      function pool(alloc, slice, size) {
        var SIZE = size || 8192;
        var MAX = SIZE >>> 1;
        var slab = null;
        var offset = SIZE;
        return function pool_alloc(size) {
          if (size < 1 || size > MAX) return alloc(size);

          if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
          }

          var buf = slice.call(slab, offset, offset += size);
          if (offset & 7) // align to 32 bit
            offset = (offset | 7) + 1;
          return buf;
        };
      }
    }, {}],
    10: [function (require, module, exports) {
      "use strict";
      /**
       * A minimal UTF8 implementation for number arrays.
       * @memberof util
       * @namespace
       */

      var utf8 = exports;
      /**
       * Calculates the UTF8 byte length of a string.
       * @param {string} string String
       * @returns {number} Byte length
       */

      utf8.length = function utf8_length(string) {
        var len = 0,
            c = 0;

        for (var i = 0; i < string.length; ++i) {
          c = string.charCodeAt(i);
          if (c < 128) len += 1;else if (c < 2048) len += 2;else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
          } else len += 3;
        }

        return len;
      };
      /**
       * Reads UTF8 bytes as a string.
       * @param {Uint8Array} buffer Source buffer
       * @param {number} start Source start
       * @param {number} end Source end
       * @returns {string} String read
       */


      utf8.read = function utf8_read(buffer, start, end) {
        var len = end - start;
        if (len < 1) return "";
        var parts = null,
            chunk = [],
            i = 0,
            // char offset
        t; // temporary

        while (start < end) {
          t = buffer[start++];
          if (t < 128) chunk[i++] = t;else if (t > 191 && t < 224) chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
          } else chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;

          if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
          }
        }

        if (parts) {
          if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
          return parts.join("");
        }

        return String.fromCharCode.apply(String, chunk.slice(0, i));
      };
      /**
       * Writes a string as UTF8 bytes.
       * @param {string} string Source string
       * @param {Uint8Array} buffer Destination buffer
       * @param {number} offset Destination offset
       * @returns {number} Bytes written
       */


      utf8.write = function utf8_write(string, buffer, offset) {
        var start = offset,
            c1,
            // character 1
        c2; // character 2

        for (var i = 0; i < string.length; ++i) {
          c1 = string.charCodeAt(i);

          if (c1 < 128) {
            buffer[offset++] = c1;
          } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6 | 192;
            buffer[offset++] = c1 & 63 | 128;
          } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18 | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
          } else {
            buffer[offset++] = c1 >> 12 | 224;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
          }
        }

        return offset - start;
      };
    }, {}],
    11: [function (require, module, exports) {
      "use strict";

      module.exports = common;
      var commonRe = /\/|\./;
      /**
       * Provides common type definitions.
       * Can also be used to provide additional google types or your own custom types.
       * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name
       * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition
       * @returns {undefined}
       * @property {INamespace} google/protobuf/any.proto Any
       * @property {INamespace} google/protobuf/duration.proto Duration
       * @property {INamespace} google/protobuf/empty.proto Empty
       * @property {INamespace} google/protobuf/field_mask.proto FieldMask
       * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue
       * @property {INamespace} google/protobuf/timestamp.proto Timestamp
       * @property {INamespace} google/protobuf/wrappers.proto Wrappers
       * @example
       * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)
       * protobuf.common("descriptor", descriptorJson);
       *
       * // manually provides a custom definition (uses my.foo namespace)
       * protobuf.common("my/foo/bar.proto", myFooBarJson);
       */

      function common(name, json) {
        if (!commonRe.test(name)) {
          name = "google/protobuf/" + name + ".proto";
          json = {
            nested: {
              google: {
                nested: {
                  protobuf: {
                    nested: json
                  }
                }
              }
            }
          };
        }

        common[name] = json;
      } // Not provided because of limited use (feel free to discuss or to provide yourself):
      //
      // google/protobuf/descriptor.proto
      // google/protobuf/source_context.proto
      // google/protobuf/type.proto
      //
      // Stripped and pre-parsed versions of these non-bundled files are instead available as part of
      // the repository or package within the google/protobuf directory.


      common("any", {
        /**
         * Properties of a google.protobuf.Any message.
         * @interface IAny
         * @type {Object}
         * @property {string} [typeUrl]
         * @property {Uint8Array} [bytes]
         * @memberof common
         */
        Any: {
          fields: {
            type_url: {
              type: "string",
              id: 1
            },
            value: {
              type: "bytes",
              id: 2
            }
          }
        }
      });
      var timeType;
      common("duration", {
        /**
         * Properties of a google.protobuf.Duration message.
         * @interface IDuration
         * @type {Object}
         * @property {number|Long} [seconds]
         * @property {number} [nanos]
         * @memberof common
         */
        Duration: timeType = {
          fields: {
            seconds: {
              type: "int64",
              id: 1
            },
            nanos: {
              type: "int32",
              id: 2
            }
          }
        }
      });
      common("timestamp", {
        /**
         * Properties of a google.protobuf.Timestamp message.
         * @interface ITimestamp
         * @type {Object}
         * @property {number|Long} [seconds]
         * @property {number} [nanos]
         * @memberof common
         */
        Timestamp: timeType
      });
      common("empty", {
        /**
         * Properties of a google.protobuf.Empty message.
         * @interface IEmpty
         * @memberof common
         */
        Empty: {
          fields: {}
        }
      });
      common("struct", {
        /**
         * Properties of a google.protobuf.Struct message.
         * @interface IStruct
         * @type {Object}
         * @property {Object.<string,IValue>} [fields]
         * @memberof common
         */
        Struct: {
          fields: {
            fields: {
              keyType: "string",
              type: "Value",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.Value message.
         * @interface IValue
         * @type {Object}
         * @property {string} [kind]
         * @property {0} [nullValue]
         * @property {number} [numberValue]
         * @property {string} [stringValue]
         * @property {boolean} [boolValue]
         * @property {IStruct} [structValue]
         * @property {IListValue} [listValue]
         * @memberof common
         */
        Value: {
          oneofs: {
            kind: {
              oneof: ["nullValue", "numberValue", "stringValue", "boolValue", "structValue", "listValue"]
            }
          },
          fields: {
            nullValue: {
              type: "NullValue",
              id: 1
            },
            numberValue: {
              type: "double",
              id: 2
            },
            stringValue: {
              type: "string",
              id: 3
            },
            boolValue: {
              type: "bool",
              id: 4
            },
            structValue: {
              type: "Struct",
              id: 5
            },
            listValue: {
              type: "ListValue",
              id: 6
            }
          }
        },
        NullValue: {
          values: {
            NULL_VALUE: 0
          }
        },

        /**
         * Properties of a google.protobuf.ListValue message.
         * @interface IListValue
         * @type {Object}
         * @property {Array.<IValue>} [values]
         * @memberof common
         */
        ListValue: {
          fields: {
            values: {
              rule: "repeated",
              type: "Value",
              id: 1
            }
          }
        }
      });
      common("wrappers", {
        /**
         * Properties of a google.protobuf.DoubleValue message.
         * @interface IDoubleValue
         * @type {Object}
         * @property {number} [value]
         * @memberof common
         */
        DoubleValue: {
          fields: {
            value: {
              type: "double",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.FloatValue message.
         * @interface IFloatValue
         * @type {Object}
         * @property {number} [value]
         * @memberof common
         */
        FloatValue: {
          fields: {
            value: {
              type: "float",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.Int64Value message.
         * @interface IInt64Value
         * @type {Object}
         * @property {number|Long} [value]
         * @memberof common
         */
        Int64Value: {
          fields: {
            value: {
              type: "int64",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.UInt64Value message.
         * @interface IUInt64Value
         * @type {Object}
         * @property {number|Long} [value]
         * @memberof common
         */
        UInt64Value: {
          fields: {
            value: {
              type: "uint64",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.Int32Value message.
         * @interface IInt32Value
         * @type {Object}
         * @property {number} [value]
         * @memberof common
         */
        Int32Value: {
          fields: {
            value: {
              type: "int32",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.UInt32Value message.
         * @interface IUInt32Value
         * @type {Object}
         * @property {number} [value]
         * @memberof common
         */
        UInt32Value: {
          fields: {
            value: {
              type: "uint32",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.BoolValue message.
         * @interface IBoolValue
         * @type {Object}
         * @property {boolean} [value]
         * @memberof common
         */
        BoolValue: {
          fields: {
            value: {
              type: "bool",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.StringValue message.
         * @interface IStringValue
         * @type {Object}
         * @property {string} [value]
         * @memberof common
         */
        StringValue: {
          fields: {
            value: {
              type: "string",
              id: 1
            }
          }
        },

        /**
         * Properties of a google.protobuf.BytesValue message.
         * @interface IBytesValue
         * @type {Object}
         * @property {Uint8Array} [value]
         * @memberof common
         */
        BytesValue: {
          fields: {
            value: {
              type: "bytes",
              id: 1
            }
          }
        }
      });
      common("field_mask", {
        /**
         * Properties of a google.protobuf.FieldMask message.
         * @interface IDoubleValue
         * @type {Object}
         * @property {number} [value]
         * @memberof common
         */
        FieldMask: {
          fields: {
            paths: {
              rule: "repeated",
              type: "string",
              id: 1
            }
          }
        }
      });
      /**
       * Gets the root definition of the specified common proto file.
       *
       * Bundled definitions are:
       * - google/protobuf/any.proto
       * - google/protobuf/duration.proto
       * - google/protobuf/empty.proto
       * - google/protobuf/field_mask.proto
       * - google/protobuf/struct.proto
       * - google/protobuf/timestamp.proto
       * - google/protobuf/wrappers.proto
       *
       * @param {string} file Proto file name
       * @returns {INamespace|null} Root definition or `null` if not defined
       */

      common.get = function get(file) {
        return common[file] || null;
      };
    }, {}],
    12: [function (require, module, exports) {
      "use strict";
      /**
       * Runtime message from/to plain object converters.
       * @namespace
       */

      var converter = exports;

      var Enum = require(15),
          util = require(37);
      /**
       * Generates a partial value fromObject conveter.
       * @param {Codegen} gen Codegen instance
       * @param {Field} field Reflected field
       * @param {number} fieldIndex Field index
       * @param {string} prop Property reference
       * @returns {Codegen} Codegen instance
       * @ignore
       */


      function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
        /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
        if (field.resolvedType) {
          if (field.resolvedType instanceof Enum) {
            gen("switch(d%s){", prop);

            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
              if (field.repeated && values[keys[i]] === field.typeDefault) gen("default:");
              gen("case%j:", keys[i])("case %i:", values[keys[i]])("m%s=%j", prop, values[keys[i]])("break");
            }

            gen("}");
          } else gen("if(typeof d%s!==\"object\")", prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
        } else {
          var isUnsigned = false;

          switch (field.type) {
            case "double":
            case "float":
              gen("m%s=Number(d%s)", prop, prop); // also catches "NaN", "Infinity"

              break;

            case "uint32":
            case "fixed32":
              gen("m%s=d%s>>>0", prop, prop);
              break;

            case "int32":
            case "sint32":
            case "sfixed32":
              gen("m%s=d%s|0", prop, prop);
              break;

            case "uint64":
              isUnsigned = true;
            // eslint-disable-line no-fallthrough

            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64":
              gen("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)("else if(typeof d%s===\"string\")", prop)("m%s=parseInt(d%s,10)", prop, prop)("else if(typeof d%s===\"number\")", prop)("m%s=d%s", prop, prop)("else if(typeof d%s===\"object\")", prop)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
              break;

            case "bytes":
              gen("if(typeof d%s===\"string\")", prop)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)("else if(d%s.length)", prop)("m%s=d%s", prop, prop);
              break;

            case "string":
              gen("m%s=String(d%s)", prop, prop);
              break;

            case "bool":
              gen("m%s=Boolean(d%s)", prop, prop);
              break;

            /* default: gen
                ("m%s=d%s", prop, prop);
                break; */
          }
        }

        return gen;
        /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
      }
      /**
       * Generates a plain object to runtime message converter specific to the specified message type.
       * @param {Type} mtype Message type
       * @returns {Codegen} Codegen instance
       */


      converter.fromObject = function fromObject(mtype) {
        /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
        var fields = mtype.fieldsArray;
        var gen = util.codegen(["d"], mtype.name + "$fromObject")("if(d instanceof this.ctor)")("return d");
        if (!fields.length) return gen("return new this.ctor");
        gen("var m=new this.ctor");

        for (var i = 0; i < fields.length; ++i) {
          var field = fields[i].resolve(),
              prop = util.safeProp(field.name); // Map fields

          if (field.map) {
            gen("if(d%s){", prop)("if(typeof d%s!==\"object\")", prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s={}", prop)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
            genValuePartial_fromObject(gen, field,
            /* not sorted */
            i, prop + "[ks[i]]")("}")("}"); // Repeated fields
          } else if (field.repeated) {
            gen("if(d%s){", prop)("if(!Array.isArray(d%s))", prop)("throw TypeError(%j)", field.fullName + ": array expected")("m%s=[]", prop)("for(var i=0;i<d%s.length;++i){", prop);
            genValuePartial_fromObject(gen, field,
            /* not sorted */
            i, prop + "[i]")("}")("}"); // Non-repeated fields
          } else {
            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)
            ("if(d%s!=null){", prop); // !== undefined && !== null

            genValuePartial_fromObject(gen, field,
            /* not sorted */
            i, prop);
            if (!(field.resolvedType instanceof Enum)) gen("}");
          }
        }

        return gen("return m");
        /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
      };
      /**
       * Generates a partial value toObject converter.
       * @param {Codegen} gen Codegen instance
       * @param {Field} field Reflected field
       * @param {number} fieldIndex Field index
       * @param {string} prop Property reference
       * @returns {Codegen} Codegen instance
       * @ignore
       */


      function genValuePartial_toObject(gen, field, fieldIndex, prop) {
        /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
        if (field.resolvedType) {
          if (field.resolvedType instanceof Enum) gen("d%s=o.enums===String?types[%i].values[m%s]:m%s", prop, fieldIndex, prop, prop);else gen("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
        } else {
          var isUnsigned = false;

          switch (field.type) {
            case "double":
            case "float":
              gen("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
              break;

            case "uint64":
              isUnsigned = true;
            // eslint-disable-line no-fallthrough

            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64":
              gen("if(typeof m%s===\"number\")", prop)("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)("else") // Long-like
              ("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true" : "", prop);
              break;

            case "bytes":
              gen("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
              break;

            default:
              gen("d%s=m%s", prop, prop);
              break;
          }
        }

        return gen;
        /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
      }
      /**
       * Generates a runtime message to plain object converter specific to the specified message type.
       * @param {Type} mtype Message type
       * @returns {Codegen} Codegen instance
       */


      converter.toObject = function toObject(mtype) {
        /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
        var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
        if (!fields.length) return util.codegen()("return {}");
        var gen = util.codegen(["m", "o"], mtype.name + "$toObject")("if(!o)")("o={}")("var d={}");
        var repeatedFields = [],
            mapFields = [],
            normalFields = [],
            i = 0;

        for (; i < fields.length; ++i) {
          if (!fields[i].partOf) (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);
        }

        if (repeatedFields.length) {
          gen("if(o.arrays||o.defaults){");

          for (i = 0; i < repeatedFields.length; ++i) {
            gen("d%s=[]", util.safeProp(repeatedFields[i].name));
          }

          gen("}");
        }

        if (mapFields.length) {
          gen("if(o.objects||o.defaults){");

          for (i = 0; i < mapFields.length; ++i) {
            gen("d%s={}", util.safeProp(mapFields[i].name));
          }

          gen("}");
        }

        if (normalFields.length) {
          gen("if(o.defaults){");

          for (i = 0; i < normalFields.length; ++i) {
            var field = normalFields[i],
                prop = util.safeProp(field.name);
            if (field.resolvedType instanceof Enum) gen("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);else if (field["long"]) gen("if(util.Long){")("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)("}else")("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());else if (field.bytes) {
              var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
              gen("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))("else{")("d%s=%s", prop, arrayDefault)("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)("}");
            } else gen("d%s=%j", prop, field.typeDefault); // also messages (=null)
          }

          gen("}");
        }

        var hasKs2 = false;

        for (i = 0; i < fields.length; ++i) {
          var field = fields[i],
              index = mtype._fieldsArray.indexOf(field),
              prop = util.safeProp(field.name);

          if (field.map) {
            if (!hasKs2) {
              hasKs2 = true;
              gen("var ks2");
            }

            gen("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)("d%s={}", prop)("for(var j=0;j<ks2.length;++j){");
            genValuePartial_toObject(gen, field,
            /* sorted */
            index, prop + "[ks2[j]]")("}");
          } else if (field.repeated) {
            gen("if(m%s&&m%s.length){", prop, prop)("d%s=[]", prop)("for(var j=0;j<m%s.length;++j){", prop);
            genValuePartial_toObject(gen, field,
            /* sorted */
            index, prop + "[j]")("}");
          } else {
            gen("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name); // !== undefined && !== null

            genValuePartial_toObject(gen, field,
            /* sorted */
            index, prop);
            if (field.partOf) gen("if(o.oneofs)")("d%s=%j", util.safeProp(field.partOf.name), field.name);
          }

          gen("}");
        }

        return gen("return d");
        /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
      };
    }, {
      "15": 15,
      "37": 37
    }],
    13: [function (require, module, exports) {
      "use strict";

      module.exports = decoder;

      var Enum = require(15),
          types = require(36),
          util = require(37);

      function missing(field) {
        return "missing required '" + field.name + "'";
      }
      /**
       * Generates a decoder specific to the specified message type.
       * @param {Type} mtype Message type
       * @returns {Codegen} Codegen instance
       */


      function decoder(mtype) {
        /* eslint-disable no-unexpected-multiline */
        var gen = util.codegen(["r", "l"], mtype.name + "$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function (field) {
          return field.map;
        }).length ? ",k" : ""))("while(r.pos<c){")("var t=r.uint32()");
        if (mtype.group) gen("if((t&7)===4)")("break");
        gen("switch(t>>>3){");
        var i = 0;

        for (; i <
        /* initializes */
        mtype.fieldsArray.length; ++i) {
          var field = mtype._fieldsArray[i].resolve(),
              type = field.resolvedType instanceof Enum ? "int32" : field.type,
              ref = "m" + util.safeProp(field.name);

          gen("case %i:", field.id); // Map fields

          if (field.map) {
            gen("r.skip().pos++") // assumes id 1 + key wireType
            ("if(%s===util.emptyObject)", ref)("%s={}", ref)("k=r.%s()", field.keyType)("r.pos++"); // assumes id 2 + value wireType

            if (types["long"][field.keyType] !== undefined) {
              if (types.basic[type] === undefined) gen("%s[typeof k===\"object\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())", ref, i); // can't be groups
              else gen("%s[typeof k===\"object\"?util.longToHash(k):k]=r.%s()", ref, type);
            } else {
              if (types.basic[type] === undefined) gen("%s[k]=types[%i].decode(r,r.uint32())", ref, i); // can't be groups
              else gen("%s[k]=r.%s()", ref, type);
            } // Repeated fields

          } else if (field.repeated) {
            gen("if(!(%s&&%s.length))", ref, ref)("%s=[]", ref); // Packable (always check for forward and backward compatiblity)

            if (types.packed[type] !== undefined) gen("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())", ref, type)("}else"); // Non-packed

            if (types.basic[type] === undefined) gen(field.resolvedType.group ? "%s.push(types[%i].decode(r))" : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);else gen("%s.push(r.%s())", ref, type); // Non-repeated
          } else if (types.basic[type] === undefined) gen(field.resolvedType.group ? "%s=types[%i].decode(r)" : "%s=types[%i].decode(r,r.uint32())", ref, i);else gen("%s=r.%s()", ref, type);

          gen("break"); // Unknown fields
        }

        gen("default:")("r.skipType(t&7)")("break")("}")("}"); // Field presence

        for (i = 0; i < mtype._fieldsArray.length; ++i) {
          var rfield = mtype._fieldsArray[i];
          if (rfield.required) gen("if(!m.hasOwnProperty(%j))", rfield.name)("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
        }

        return gen("return m");
        /* eslint-enable no-unexpected-multiline */
      }
    }, {
      "15": 15,
      "36": 36,
      "37": 37
    }],
    14: [function (require, module, exports) {
      "use strict";

      module.exports = encoder;

      var Enum = require(15),
          types = require(36),
          util = require(37);
      /**
       * Generates a partial message type encoder.
       * @param {Codegen} gen Codegen instance
       * @param {Field} field Reflected field
       * @param {number} fieldIndex Field index
       * @param {string} ref Variable reference
       * @returns {Codegen} Codegen instance
       * @ignore
       */


      function genTypePartial(gen, field, fieldIndex, ref) {
        return field.resolvedType.group ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
      }
      /**
       * Generates an encoder specific to the specified message type.
       * @param {Type} mtype Message type
       * @returns {Codegen} Codegen instance
       */


      function encoder(mtype) {
        /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
        var gen = util.codegen(["m", "w"], mtype.name + "$encode")("if(!w)")("w=Writer.create()");
        var i, ref; // "when a message is serialized its known fields should be written sequentially by field number"

        var fields =
        /* initializes */
        mtype.fieldsArray.slice().sort(util.compareFieldsById);

        for (var i = 0; i < fields.length; ++i) {
          var field = fields[i].resolve(),
              index = mtype._fieldsArray.indexOf(field),
              type = field.resolvedType instanceof Enum ? "int32" : field.type,
              wireType = types.basic[type];

          ref = "m" + util.safeProp(field.name); // Map fields

          if (field.map) {
            gen("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name) // !== undefined && !== null
            ("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
            if (wireType === undefined) gen("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref); // can't be groups
            else gen(".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
            gen("}")("}"); // Repeated fields
          } else if (field.repeated) {
            gen("if(%s!=null&&%s.length){", ref, ref); // !== undefined && !== null
            // Packed repeated

            if (field.packed && types.packed[type] !== undefined) {
              gen("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)("for(var i=0;i<%s.length;++i)", ref)("w.%s(%s[i])", type, ref)("w.ldelim()"); // Non-packed
            } else {
              gen("for(var i=0;i<%s.length;++i)", ref);
              if (wireType === undefined) genTypePartial(gen, field, index, ref + "[i]");else gen("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);
            }

            gen("}"); // Non-repeated
          } else {
            if (field.optional) gen("if(%s!=null&&m.hasOwnProperty(%j))", ref, field.name); // !== undefined && !== null

            if (wireType === undefined) genTypePartial(gen, field, index, ref);else gen("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);
          }
        }

        return gen("return w");
        /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
      }
    }, {
      "15": 15,
      "36": 36,
      "37": 37
    }],
    15: [function (require, module, exports) {
      "use strict";

      module.exports = Enum; // extends ReflectionObject

      var ReflectionObject = require(24);

      ((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";

      var Namespace = require(23),
          util = require(37);
      /**
       * Constructs a new enum instance.
       * @classdesc Reflected enum.
       * @extends ReflectionObject
       * @constructor
       * @param {string} name Unique name within its namespace
       * @param {Object.<string,number>} [values] Enum values as an object, by name
       * @param {Object.<string,*>} [options] Declared options
       * @param {string} [comment] The comment for this enum
       * @param {Object.<string,string>} [comments] The value comments for this enum
       */


      function Enum(name, values, options, comment, comments) {
        ReflectionObject.call(this, name, options);
        if (values && _typeof(values) !== "object") throw TypeError("values must be an object");
        /**
         * Enum values by id.
         * @type {Object.<number,string>}
         */

        this.valuesById = {};
        /**
         * Enum values by name.
         * @type {Object.<string,number>}
         */

        this.values = Object.create(this.valuesById); // toJSON, marker

        /**
         * Enum comment text.
         * @type {string|null}
         */

        this.comment = comment;
        /**
         * Value comment texts, if any.
         * @type {Object.<string,string>}
         */

        this.comments = comments || {};
        /**
         * Reserved ranges, if any.
         * @type {Array.<number[]|string>}
         */

        this.reserved = undefined; // toJSON
        // Note that values inherit valuesById on their prototype which makes them a TypeScript-
        // compatible enum. This is used by pbts to write actual enum definitions that work for
        // static and reflection code alike instead of emitting generic object definitions.

        if (values) for (var keys = Object.keys(values), i = 0; i < keys.length; ++i) {
          if (typeof values[keys[i]] === "number") // use forward entries only
            this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];
        }
      }
      /**
       * Enum descriptor.
       * @interface IEnum
       * @property {Object.<string,number>} values Enum values
       * @property {Object.<string,*>} [options] Enum options
       */

      /**
       * Constructs an enum from an enum descriptor.
       * @param {string} name Enum name
       * @param {IEnum} json Enum descriptor
       * @returns {Enum} Created enum
       * @throws {TypeError} If arguments are invalid
       */


      Enum.fromJSON = function fromJSON(name, json) {
        var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
        enm.reserved = json.reserved;
        return enm;
      };
      /**
       * Converts this enum to an enum descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {IEnum} Enum descriptor
       */


      Enum.prototype.toJSON = function toJSON(toJSONOptions) {
        var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
        return util.toObject(["options", this.options, "values", this.values, "reserved", this.reserved && this.reserved.length ? this.reserved : undefined, "comment", keepComments ? this.comment : undefined, "comments", keepComments ? this.comments : undefined]);
      };
      /**
       * Adds a value to this enum.
       * @param {string} name Value name
       * @param {number} id Value id
       * @param {string} [comment] Comment, if any
       * @returns {Enum} `this`
       * @throws {TypeError} If arguments are invalid
       * @throws {Error} If there is already a value with this name or id
       */


      Enum.prototype.add = function add(name, id, comment) {
        // utilized by the parser but not by .fromJSON
        if (!util.isString(name)) throw TypeError("name must be a string");
        if (!util.isInteger(id)) throw TypeError("id must be an integer");
        if (this.values[name] !== undefined) throw Error("duplicate name '" + name + "' in " + this);
        if (this.isReservedId(id)) throw Error("id " + id + " is reserved in " + this);
        if (this.isReservedName(name)) throw Error("name '" + name + "' is reserved in " + this);

        if (this.valuesById[id] !== undefined) {
          if (!(this.options && this.options.allow_alias)) throw Error("duplicate id " + id + " in " + this);
          this.values[name] = id;
        } else this.valuesById[this.values[name] = id] = name;

        this.comments[name] = comment || null;
        return this;
      };
      /**
       * Removes a value from this enum
       * @param {string} name Value name
       * @returns {Enum} `this`
       * @throws {TypeError} If arguments are invalid
       * @throws {Error} If `name` is not a name of this enum
       */


      Enum.prototype.remove = function remove(name) {
        if (!util.isString(name)) throw TypeError("name must be a string");
        var val = this.values[name];
        if (val == null) throw Error("name '" + name + "' does not exist in " + this);
        delete this.valuesById[val];
        delete this.values[name];
        delete this.comments[name];
        return this;
      };
      /**
       * Tests if the specified id is reserved.
       * @param {number} id Id to test
       * @returns {boolean} `true` if reserved, otherwise `false`
       */


      Enum.prototype.isReservedId = function isReservedId(id) {
        return Namespace.isReservedId(this.reserved, id);
      };
      /**
       * Tests if the specified name is reserved.
       * @param {string} name Name to test
       * @returns {boolean} `true` if reserved, otherwise `false`
       */


      Enum.prototype.isReservedName = function isReservedName(name) {
        return Namespace.isReservedName(this.reserved, name);
      };
    }, {
      "23": 23,
      "24": 24,
      "37": 37
    }],
    16: [function (require, module, exports) {
      "use strict";

      module.exports = Field; // extends ReflectionObject

      var ReflectionObject = require(24);

      ((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";

      var Enum = require(15),
          types = require(36),
          util = require(37);

      var Type; // cyclic

      var ruleRe = /^required|optional|repeated$/;
      /**
       * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.
       * @name Field
       * @classdesc Reflected message field.
       * @extends FieldBase
       * @constructor
       * @param {string} name Unique name within its namespace
       * @param {number} id Unique id within its namespace
       * @param {string} type Value type
       * @param {string|Object.<string,*>} [rule="optional"] Field rule
       * @param {string|Object.<string,*>} [extend] Extended type if different from parent
       * @param {Object.<string,*>} [options] Declared options
       */

      /**
       * Constructs a field from a field descriptor.
       * @param {string} name Field name
       * @param {IField} json Field descriptor
       * @returns {Field} Created field
       * @throws {TypeError} If arguments are invalid
       */

      Field.fromJSON = function fromJSON(name, json) {
        return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
      };
      /**
       * Not an actual constructor. Use {@link Field} instead.
       * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.
       * @exports FieldBase
       * @extends ReflectionObject
       * @constructor
       * @param {string} name Unique name within its namespace
       * @param {number} id Unique id within its namespace
       * @param {string} type Value type
       * @param {string|Object.<string,*>} [rule="optional"] Field rule
       * @param {string|Object.<string,*>} [extend] Extended type if different from parent
       * @param {Object.<string,*>} [options] Declared options
       * @param {string} [comment] Comment associated with this field
       */


      function Field(name, id, type, rule, extend, options, comment) {
        if (util.isObject(rule)) {
          comment = extend;
          options = rule;
          rule = extend = undefined;
        } else if (util.isObject(extend)) {
          comment = options;
          options = extend;
          extend = undefined;
        }

        ReflectionObject.call(this, name, options);
        if (!util.isInteger(id) || id < 0) throw TypeError("id must be a non-negative integer");
        if (!util.isString(type)) throw TypeError("type must be a string");
        if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase())) throw TypeError("rule must be a string rule");
        if (extend !== undefined && !util.isString(extend)) throw TypeError("extend must be a string");
        /**
         * Field rule, if any.
         * @type {string|undefined}
         */

        this.rule = rule && rule !== "optional" ? rule : undefined; // toJSON

        /**
         * Field type.
         * @type {string}
         */

        this.type = type; // toJSON

        /**
         * Unique field id.
         * @type {number}
         */

        this.id = id; // toJSON, marker

        /**
         * Extended type if different from parent.
         * @type {string|undefined}
         */

        this.extend = extend || undefined; // toJSON

        /**
         * Whether this field is required.
         * @type {boolean}
         */

        this.required = rule === "required";
        /**
         * Whether this field is optional.
         * @type {boolean}
         */

        this.optional = !this.required;
        /**
         * Whether this field is repeated.
         * @type {boolean}
         */

        this.repeated = rule === "repeated";
        /**
         * Whether this field is a map or not.
         * @type {boolean}
         */

        this.map = false;
        /**
         * Message this field belongs to.
         * @type {Type|null}
         */

        this.message = null;
        /**
         * OneOf this field belongs to, if any,
         * @type {OneOf|null}
         */

        this.partOf = null;
        /**
         * The field type's default value.
         * @type {*}
         */

        this.typeDefault = null;
        /**
         * The field's default value on prototypes.
         * @type {*}
         */

        this.defaultValue = null;
        /**
         * Whether this field's value should be treated as a long.
         * @type {boolean}
         */

        this["long"] = util.Long ? types["long"][type] !== undefined :
        /* istanbul ignore next */
        false;
        /**
         * Whether this field's value is a buffer.
         * @type {boolean}
         */

        this.bytes = type === "bytes";
        /**
         * Resolved type if not a basic type.
         * @type {Type|Enum|null}
         */

        this.resolvedType = null;
        /**
         * Sister-field within the extended type if a declaring extension field.
         * @type {Field|null}
         */

        this.extensionField = null;
        /**
         * Sister-field within the declaring namespace if an extended field.
         * @type {Field|null}
         */

        this.declaringField = null;
        /**
         * Internally remembers whether this field is packed.
         * @type {boolean|null}
         * @private
         */

        this._packed = null;
        /**
         * Comment for this field.
         * @type {string|null}
         */

        this.comment = comment;
      }
      /**
       * Determines whether this field is packed. Only relevant when repeated and working with proto2.
       * @name Field#packed
       * @type {boolean}
       * @readonly
       */


      Object.defineProperty(Field.prototype, "packed", {
        get: function get() {
          // defaults to packed=true if not explicity set to false
          if (this._packed === null) this._packed = this.getOption("packed") !== false;
          return this._packed;
        }
      });
      /**
       * @override
       */

      Field.prototype.setOption = function setOption(name, value, ifNotSet) {
        if (name === "packed") // clear cached before setting
          this._packed = null;
        return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
      };
      /**
       * Field descriptor.
       * @interface IField
       * @property {string} [rule="optional"] Field rule
       * @property {string} type Field type
       * @property {number} id Field id
       * @property {Object.<string,*>} [options] Field options
       */

      /**
       * Extension field descriptor.
       * @interface IExtensionField
       * @extends IField
       * @property {string} extend Extended type
       */

      /**
       * Converts this field to a field descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {IField} Field descriptor
       */


      Field.prototype.toJSON = function toJSON(toJSONOptions) {
        var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
        return util.toObject(["rule", this.rule !== "optional" && this.rule || undefined, "type", this.type, "id", this.id, "extend", this.extend, "options", this.options, "comment", keepComments ? this.comment : undefined]);
      };
      /**
       * Resolves this field's type references.
       * @returns {Field} `this`
       * @throws {Error} If any reference cannot be resolved
       */


      Field.prototype.resolve = function resolve() {
        if (this.resolved) return this;

        if ((this.typeDefault = types.defaults[this.type]) === undefined) {
          // if not a basic type, resolve it
          this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
          if (this.resolvedType instanceof Type) this.typeDefault = null;else // instanceof Enum
            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined
        } // use explicitly set default value if present


        if (this.options && this.options["default"] != null) {
          this.typeDefault = this.options["default"];
          if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string") this.typeDefault = this.resolvedType.values[this.typeDefault];
        } // remove unnecessary options


        if (this.options) {
          if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum)) delete this.options.packed;
          if (!Object.keys(this.options).length) this.options = undefined;
        } // convert to internal data type if necesssary


        if (this["long"]) {
          this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");
          /* istanbul ignore else */

          if (Object.freeze) Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)
        } else if (this.bytes && typeof this.typeDefault === "string") {
          var buf;
          if (util.base64.test(this.typeDefault)) util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);else util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
          this.typeDefault = buf;
        } // take special care of maps and repeated fields


        if (this.map) this.defaultValue = util.emptyObject;else if (this.repeated) this.defaultValue = util.emptyArray;else this.defaultValue = this.typeDefault; // ensure proper value on prototype

        if (this.parent instanceof Type) this.parent.ctor.prototype[this.name] = this.defaultValue;
        return ReflectionObject.prototype.resolve.call(this);
      };
      /**
       * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).
       * @typedef FieldDecorator
       * @type {function}
       * @param {Object} prototype Target prototype
       * @param {string} fieldName Field name
       * @returns {undefined}
       */

      /**
       * Field decorator (TypeScript).
       * @name Field.d
       * @function
       * @param {number} fieldId Field id
       * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"string"|"bool"|"bytes"|Object} fieldType Field type
       * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
       * @param {T} [defaultValue] Default value
       * @returns {FieldDecorator} Decorator function
       * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]
       */


      Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {
        // submessage: decorate the submessage and use its name as the type
        if (typeof fieldType === "function") fieldType = util.decorateType(fieldType).name; // enum reference: create a reflected copy of the enum and keep reuseing it
        else if (fieldType && _typeof(fieldType) === "object") fieldType = util.decorateEnum(fieldType).name;
        return function fieldDecorator(prototype, fieldName) {
          util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, {
            "default": defaultValue
          }));
        };
      };
      /**
       * Field decorator (TypeScript).
       * @name Field.d
       * @function
       * @param {number} fieldId Field id
       * @param {Constructor<T>|string} fieldType Field type
       * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
       * @returns {FieldDecorator} Decorator function
       * @template T extends Message<T>
       * @variation 2
       */
      // like Field.d but without a default value
      // Sets up cyclic dependencies (called in index-light)


      Field._configure = function configure(Type_) {
        Type = Type_;
      };
    }, {
      "15": 15,
      "24": 24,
      "36": 36,
      "37": 37
    }],
    17: [function (require, module, exports) {
      "use strict";

      var protobuf = module.exports = require(18);

      protobuf.build = "light";
      /**
       * A node-style callback as used by {@link load} and {@link Root#load}.
       * @typedef LoadCallback
       * @type {function}
       * @param {Error|null} error Error, if any, otherwise `null`
       * @param {Root} [root] Root, if there hasn't been an error
       * @returns {undefined}
       */

      /**
       * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
       * @param {string|string[]} filename One or multiple files to load
       * @param {Root} root Root namespace, defaults to create a new one if omitted.
       * @param {LoadCallback} callback Callback function
       * @returns {undefined}
       * @see {@link Root#load}
       */

      function load(filename, root, callback) {
        if (typeof root === "function") {
          callback = root;
          root = new protobuf.Root();
        } else if (!root) root = new protobuf.Root();

        return root.load(filename, callback);
      }
      /**
       * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
       * @name load
       * @function
       * @param {string|string[]} filename One or multiple files to load
       * @param {LoadCallback} callback Callback function
       * @returns {undefined}
       * @see {@link Root#load}
       * @variation 2
       */
      // function load(filename:string, callback:LoadCallback):undefined

      /**
       * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.
       * @name load
       * @function
       * @param {string|string[]} filename One or multiple files to load
       * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
       * @returns {Promise<Root>} Promise
       * @see {@link Root#load}
       * @variation 3
       */
      // function load(filename:string, [root:Root]):Promise<Root>


      protobuf.load = load;
      /**
       * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).
       * @param {string|string[]} filename One or multiple files to load
       * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
       * @returns {Root} Root namespace
       * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
       * @see {@link Root#loadSync}
       */

      function loadSync(filename, root) {
        if (!root) root = new protobuf.Root();
        return root.loadSync(filename);
      }

      protobuf.loadSync = loadSync; // Serialization

      protobuf.encoder = require(14);
      protobuf.decoder = require(13);
      protobuf.verifier = require(40);
      protobuf.converter = require(12); // Reflection

      protobuf.ReflectionObject = require(24);
      protobuf.Namespace = require(23);
      protobuf.Root = require(29);
      protobuf.Enum = require(15);
      protobuf.Type = require(35);
      protobuf.Field = require(16);
      protobuf.OneOf = require(25);
      protobuf.MapField = require(20);
      protobuf.Service = require(33);
      protobuf.Method = require(22); // Runtime

      protobuf.Message = require(21);
      protobuf.wrappers = require(41); // Utility

      protobuf.types = require(36);
      protobuf.util = require(37); // Set up possibly cyclic reflection dependencies

      protobuf.ReflectionObject._configure(protobuf.Root);

      protobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);

      protobuf.Root._configure(protobuf.Type);

      protobuf.Field._configure(protobuf.Type);
    }, {
      "12": 12,
      "13": 13,
      "14": 14,
      "15": 15,
      "16": 16,
      "18": 18,
      "20": 20,
      "21": 21,
      "22": 22,
      "23": 23,
      "24": 24,
      "25": 25,
      "29": 29,
      "33": 33,
      "35": 35,
      "36": 36,
      "37": 37,
      "40": 40,
      "41": 41
    }],
    18: [function (require, module, exports) {
      "use strict";

      var protobuf = exports;
      /**
       * Build type, one of `"full"`, `"light"` or `"minimal"`.
       * @name build
       * @type {string}
       * @const
       */

      protobuf.build = "minimal"; // Serialization

      protobuf.Writer = require(42);
      protobuf.BufferWriter = require(43);
      protobuf.Reader = require(27);
      protobuf.BufferReader = require(28); // Utility

      protobuf.util = require(39);
      protobuf.rpc = require(31);
      protobuf.roots = require(30);
      protobuf.configure = configure;
      /* istanbul ignore next */

      /**
       * Reconfigures the library according to the environment.
       * @returns {undefined}
       */

      function configure() {
        protobuf.Reader._configure(protobuf.BufferReader);

        protobuf.util._configure();
      } // Set up buffer utility according to the environment


      protobuf.Writer._configure(protobuf.BufferWriter);

      configure();
    }, {
      "27": 27,
      "28": 28,
      "30": 30,
      "31": 31,
      "39": 39,
      "42": 42,
      "43": 43
    }],
    19: [function (require, module, exports) {
      "use strict";

      var protobuf = module.exports = require(17);

      protobuf.build = "full"; // Parser

      protobuf.tokenize = require(34);
      protobuf.parse = require(26);
      protobuf.common = require(11); // Configure parser

      protobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);
    }, {
      "11": 11,
      "17": 17,
      "26": 26,
      "34": 34
    }],
    20: [function (require, module, exports) {
      "use strict";

      module.exports = MapField; // extends Field

      var Field = require(16);

      ((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";

      var types = require(36),
          util = require(37);
      /**
       * Constructs a new map field instance.
       * @classdesc Reflected map field.
       * @extends FieldBase
       * @constructor
       * @param {string} name Unique name within its namespace
       * @param {number} id Unique id within its namespace
       * @param {string} keyType Key type
       * @param {string} type Value type
       * @param {Object.<string,*>} [options] Declared options
       * @param {string} [comment] Comment associated with this field
       */


      function MapField(name, id, keyType, type, options, comment) {
        Field.call(this, name, id, type, undefined, undefined, options, comment);
        /* istanbul ignore if */

        if (!util.isString(keyType)) throw TypeError("keyType must be a string");
        /**
         * Key type.
         * @type {string}
         */

        this.keyType = keyType; // toJSON, marker

        /**
         * Resolved key type if not a basic type.
         * @type {ReflectionObject|null}
         */

        this.resolvedKeyType = null; // Overrides Field#map

        this.map = true;
      }
      /**
       * Map field descriptor.
       * @interface IMapField
       * @extends {IField}
       * @property {string} keyType Key type
       */

      /**
       * Extension map field descriptor.
       * @interface IExtensionMapField
       * @extends IMapField
       * @property {string} extend Extended type
       */

      /**
       * Constructs a map field from a map field descriptor.
       * @param {string} name Field name
       * @param {IMapField} json Map field descriptor
       * @returns {MapField} Created map field
       * @throws {TypeError} If arguments are invalid
       */


      MapField.fromJSON = function fromJSON(name, json) {
        return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
      };
      /**
       * Converts this map field to a map field descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {IMapField} Map field descriptor
       */


      MapField.prototype.toJSON = function toJSON(toJSONOptions) {
        var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
        return util.toObject(["keyType", this.keyType, "type", this.type, "id", this.id, "extend", this.extend, "options", this.options, "comment", keepComments ? this.comment : undefined]);
      };
      /**
       * @override
       */


      MapField.prototype.resolve = function resolve() {
        if (this.resolved) return this; // Besides a value type, map fields have a key type that may be "any scalar type except for floating point types and bytes"

        if (types.mapKey[this.keyType] === undefined) throw Error("invalid key type: " + this.keyType);
        return Field.prototype.resolve.call(this);
      };
      /**
       * Map field decorator (TypeScript).
       * @name MapField.d
       * @function
       * @param {number} fieldId Field id
       * @param {"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"} fieldKeyType Field key type
       * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"|"bytes"|Object|Constructor<{}>} fieldValueType Field value type
       * @returns {FieldDecorator} Decorator function
       * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }
       */


      MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {
        // submessage value: decorate the submessage and use its name as the type
        if (typeof fieldValueType === "function") fieldValueType = util.decorateType(fieldValueType).name; // enum reference value: create a reflected copy of the enum and keep reuseing it
        else if (fieldValueType && _typeof(fieldValueType) === "object") fieldValueType = util.decorateEnum(fieldValueType).name;
        return function mapFieldDecorator(prototype, fieldName) {
          util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
        };
      };
    }, {
      "16": 16,
      "36": 36,
      "37": 37
    }],
    21: [function (require, module, exports) {
      "use strict";

      module.exports = Message;

      var util = require(39);
      /**
       * Constructs a new message instance.
       * @classdesc Abstract runtime message.
       * @constructor
       * @param {Properties<T>} [properties] Properties to set
       * @template T extends object = object
       */


      function Message(properties) {
        // not used internally
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) {
          this[keys[i]] = properties[keys[i]];
        }
      }
      /**
       * Reference to the reflected type.
       * @name Message.$type
       * @type {Type}
       * @readonly
       */

      /**
       * Reference to the reflected type.
       * @name Message#$type
       * @type {Type}
       * @readonly
       */

      /*eslint-disable valid-jsdoc*/

      /**
       * Creates a new message of this type using the specified properties.
       * @param {Object.<string,*>} [properties] Properties to set
       * @returns {Message<T>} Message instance
       * @template T extends Message<T>
       * @this Constructor<T>
       */


      Message.create = function create(properties) {
        return this.$type.create(properties);
      };
      /**
       * Encodes a message of this type.
       * @param {T|Object.<string,*>} message Message to encode
       * @param {Writer} [writer] Writer to use
       * @returns {Writer} Writer
       * @template T extends Message<T>
       * @this Constructor<T>
       */


      Message.encode = function encode(message, writer) {
        return this.$type.encode(message, writer);
      };
      /**
       * Encodes a message of this type preceeded by its length as a varint.
       * @param {T|Object.<string,*>} message Message to encode
       * @param {Writer} [writer] Writer to use
       * @returns {Writer} Writer
       * @template T extends Message<T>
       * @this Constructor<T>
       */


      Message.encodeDelimited = function encodeDelimited(message, writer) {
        return this.$type.encodeDelimited(message, writer);
      };
      /**
       * Decodes a message of this type.
       * @name Message.decode
       * @function
       * @param {Reader|Uint8Array} reader Reader or buffer to decode
       * @returns {T} Decoded message
       * @template T extends Message<T>
       * @this Constructor<T>
       */


      Message.decode = function decode(reader) {
        return this.$type.decode(reader);
      };
      /**
       * Decodes a message of this type preceeded by its length as a varint.
       * @name Message.decodeDelimited
       * @function
       * @param {Reader|Uint8Array} reader Reader or buffer to decode
       * @returns {T} Decoded message
       * @template T extends Message<T>
       * @this Constructor<T>
       */


      Message.decodeDelimited = function decodeDelimited(reader) {
        return this.$type.decodeDelimited(reader);
      };
      /**
       * Verifies a message of this type.
       * @name Message.verify
       * @function
       * @param {Object.<string,*>} message Plain object to verify
       * @returns {string|null} `null` if valid, otherwise the reason why it is not
       */


      Message.verify = function verify(message) {
        return this.$type.verify(message);
      };
      /**
       * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
       * @param {Object.<string,*>} object Plain object
       * @returns {T} Message instance
       * @template T extends Message<T>
       * @this Constructor<T>
       */


      Message.fromObject = function fromObject(object) {
        return this.$type.fromObject(object);
      };
      /**
       * Creates a plain object from a message of this type. Also converts values to other types if specified.
       * @param {T} message Message instance
       * @param {IConversionOptions} [options] Conversion options
       * @returns {Object.<string,*>} Plain object
       * @template T extends Message<T>
       * @this Constructor<T>
       */


      Message.toObject = function toObject(message, options) {
        return this.$type.toObject(message, options);
      };
      /**
       * Converts this message to JSON.
       * @returns {Object.<string,*>} JSON object
       */


      Message.prototype.toJSON = function toJSON() {
        return this.$type.toObject(this, util.toJSONOptions);
      };
      /*eslint-enable valid-jsdoc*/

    }, {
      "39": 39
    }],
    22: [function (require, module, exports) {
      "use strict";

      module.exports = Method; // extends ReflectionObject

      var ReflectionObject = require(24);

      ((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";

      var util = require(37);
      /**
       * Constructs a new service method instance.
       * @classdesc Reflected service method.
       * @extends ReflectionObject
       * @constructor
       * @param {string} name Method name
       * @param {string|undefined} type Method type, usually `"rpc"`
       * @param {string} requestType Request message type
       * @param {string} responseType Response message type
       * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed
       * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed
       * @param {Object.<string,*>} [options] Declared options
       * @param {string} [comment] The comment for this method
       */


      function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment) {
        /* istanbul ignore next */
        if (util.isObject(requestStream)) {
          options = requestStream;
          requestStream = responseStream = undefined;
        } else if (util.isObject(responseStream)) {
          options = responseStream;
          responseStream = undefined;
        }
        /* istanbul ignore if */


        if (!(type === undefined || util.isString(type))) throw TypeError("type must be a string");
        /* istanbul ignore if */

        if (!util.isString(requestType)) throw TypeError("requestType must be a string");
        /* istanbul ignore if */

        if (!util.isString(responseType)) throw TypeError("responseType must be a string");
        ReflectionObject.call(this, name, options);
        /**
         * Method type.
         * @type {string}
         */

        this.type = type || "rpc"; // toJSON

        /**
         * Request type.
         * @type {string}
         */

        this.requestType = requestType; // toJSON, marker

        /**
         * Whether requests are streamed or not.
         * @type {boolean|undefined}
         */

        this.requestStream = requestStream ? true : undefined; // toJSON

        /**
         * Response type.
         * @type {string}
         */

        this.responseType = responseType; // toJSON

        /**
         * Whether responses are streamed or not.
         * @type {boolean|undefined}
         */

        this.responseStream = responseStream ? true : undefined; // toJSON

        /**
         * Resolved request type.
         * @type {Type|null}
         */

        this.resolvedRequestType = null;
        /**
         * Resolved response type.
         * @type {Type|null}
         */

        this.resolvedResponseType = null;
        /**
         * Comment for this method
         * @type {string|null}
         */

        this.comment = comment;
      }
      /**
       * Method descriptor.
       * @interface IMethod
       * @property {string} [type="rpc"] Method type
       * @property {string} requestType Request type
       * @property {string} responseType Response type
       * @property {boolean} [requestStream=false] Whether requests are streamed
       * @property {boolean} [responseStream=false] Whether responses are streamed
       * @property {Object.<string,*>} [options] Method options
       */

      /**
       * Constructs a method from a method descriptor.
       * @param {string} name Method name
       * @param {IMethod} json Method descriptor
       * @returns {Method} Created method
       * @throws {TypeError} If arguments are invalid
       */


      Method.fromJSON = function fromJSON(name, json) {
        return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment);
      };
      /**
       * Converts this method to a method descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {IMethod} Method descriptor
       */


      Method.prototype.toJSON = function toJSON(toJSONOptions) {
        var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
        return util.toObject(["type", this.type !== "rpc" &&
        /* istanbul ignore next */
        this.type || undefined, "requestType", this.requestType, "requestStream", this.requestStream, "responseType", this.responseType, "responseStream", this.responseStream, "options", this.options, "comment", keepComments ? this.comment : undefined]);
      };
      /**
       * @override
       */


      Method.prototype.resolve = function resolve() {
        /* istanbul ignore if */
        if (this.resolved) return this;
        this.resolvedRequestType = this.parent.lookupType(this.requestType);
        this.resolvedResponseType = this.parent.lookupType(this.responseType);
        return ReflectionObject.prototype.resolve.call(this);
      };
    }, {
      "24": 24,
      "37": 37
    }],
    23: [function (require, module, exports) {
      "use strict";

      module.exports = Namespace; // extends ReflectionObject

      var ReflectionObject = require(24);

      ((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";

      var Field = require(16),
          util = require(37);

      var Type, // cyclic
      Service, Enum;
      /**
       * Constructs a new namespace instance.
       * @name Namespace
       * @classdesc Reflected namespace.
       * @extends NamespaceBase
       * @constructor
       * @param {string} name Namespace name
       * @param {Object.<string,*>} [options] Declared options
       */

      /**
       * Constructs a namespace from JSON.
       * @memberof Namespace
       * @function
       * @param {string} name Namespace name
       * @param {Object.<string,*>} json JSON object
       * @returns {Namespace} Created namespace
       * @throws {TypeError} If arguments are invalid
       */

      Namespace.fromJSON = function fromJSON(name, json) {
        return new Namespace(name, json.options).addJSON(json.nested);
      };
      /**
       * Converts an array of reflection objects to JSON.
       * @memberof Namespace
       * @param {ReflectionObject[]} array Object array
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty
       */


      function arrayToJSON(array, toJSONOptions) {
        if (!(array && array.length)) return undefined;
        var obj = {};

        for (var i = 0; i < array.length; ++i) {
          obj[array[i].name] = array[i].toJSON(toJSONOptions);
        }

        return obj;
      }

      Namespace.arrayToJSON = arrayToJSON;
      /**
       * Tests if the specified id is reserved.
       * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
       * @param {number} id Id to test
       * @returns {boolean} `true` if reserved, otherwise `false`
       */

      Namespace.isReservedId = function isReservedId(reserved, id) {
        if (reserved) for (var i = 0; i < reserved.length; ++i) {
          if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] >= id) return true;
        }
        return false;
      };
      /**
       * Tests if the specified name is reserved.
       * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
       * @param {string} name Name to test
       * @returns {boolean} `true` if reserved, otherwise `false`
       */


      Namespace.isReservedName = function isReservedName(reserved, name) {
        if (reserved) for (var i = 0; i < reserved.length; ++i) {
          if (reserved[i] === name) return true;
        }
        return false;
      };
      /**
       * Not an actual constructor. Use {@link Namespace} instead.
       * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.
       * @exports NamespaceBase
       * @extends ReflectionObject
       * @abstract
       * @constructor
       * @param {string} name Namespace name
       * @param {Object.<string,*>} [options] Declared options
       * @see {@link Namespace}
       */


      function Namespace(name, options) {
        ReflectionObject.call(this, name, options);
        /**
         * Nested objects by name.
         * @type {Object.<string,ReflectionObject>|undefined}
         */

        this.nested = undefined; // toJSON

        /**
         * Cached nested objects as an array.
         * @type {ReflectionObject[]|null}
         * @private
         */

        this._nestedArray = null;
      }

      function clearCache(namespace) {
        namespace._nestedArray = null;
        return namespace;
      }
      /**
       * Nested objects of this namespace as an array for iteration.
       * @name NamespaceBase#nestedArray
       * @type {ReflectionObject[]}
       * @readonly
       */


      Object.defineProperty(Namespace.prototype, "nestedArray", {
        get: function get() {
          return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
        }
      });
      /**
       * Namespace descriptor.
       * @interface INamespace
       * @property {Object.<string,*>} [options] Namespace options
       * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors
       */

      /**
       * Any extension field descriptor.
       * @typedef AnyExtensionField
       * @type {IExtensionField|IExtensionMapField}
       */

      /**
       * Any nested object descriptor.
       * @typedef AnyNestedObject
       * @type {IEnum|IType|IService|AnyExtensionField|INamespace}
       */
      // ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)

      /**
       * Converts this namespace to a namespace descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {INamespace} Namespace descriptor
       */

      Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
        return util.toObject(["options", this.options, "nested", arrayToJSON(this.nestedArray, toJSONOptions)]);
      };
      /**
       * Adds nested objects to this namespace from nested object descriptors.
       * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors
       * @returns {Namespace} `this`
       */


      Namespace.prototype.addJSON = function addJSON(nestedJson) {
        var ns = this;
        /* istanbul ignore else */

        if (nestedJson) {
          for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
            nested = nestedJson[names[i]];
            ns.add( // most to least likely
            (nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : nested.id !== undefined ? Field.fromJSON : Namespace.fromJSON)(names[i], nested));
          }
        }

        return this;
      };
      /**
       * Gets the nested object of the specified name.
       * @param {string} name Nested object name
       * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist
       */


      Namespace.prototype.get = function get(name) {
        return this.nested && this.nested[name] || null;
      };
      /**
       * Gets the values of the nested {@link Enum|enum} of the specified name.
       * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.
       * @param {string} name Nested enum name
       * @returns {Object.<string,number>} Enum values
       * @throws {Error} If there is no such enum
       */


      Namespace.prototype.getEnum = function getEnum(name) {
        if (this.nested && this.nested[name] instanceof Enum) return this.nested[name].values;
        throw Error("no such enum: " + name);
      };
      /**
       * Adds a nested object to this namespace.
       * @param {ReflectionObject} object Nested object to add
       * @returns {Namespace} `this`
       * @throws {TypeError} If arguments are invalid
       * @throws {Error} If there is already a nested object with this name
       */


      Namespace.prototype.add = function add(object) {
        if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace)) throw TypeError("object must be a valid nested object");
        if (!this.nested) this.nested = {};else {
          var prev = this.get(object.name);

          if (prev) {
            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
              // replace plain namespace but keep existing nested elements and options
              var nested = prev.nestedArray;

              for (var i = 0; i < nested.length; ++i) {
                object.add(nested[i]);
              }

              this.remove(prev);
              if (!this.nested) this.nested = {};
              object.setOptions(prev.options, true);
            } else throw Error("duplicate name '" + object.name + "' in " + this);
          }
        }
        this.nested[object.name] = object;
        object.onAdd(this);
        return clearCache(this);
      };
      /**
       * Removes a nested object from this namespace.
       * @param {ReflectionObject} object Nested object to remove
       * @returns {Namespace} `this`
       * @throws {TypeError} If arguments are invalid
       * @throws {Error} If `object` is not a member of this namespace
       */


      Namespace.prototype.remove = function remove(object) {
        if (!(object instanceof ReflectionObject)) throw TypeError("object must be a ReflectionObject");
        if (object.parent !== this) throw Error(object + " is not a member of " + this);
        delete this.nested[object.name];
        if (!Object.keys(this.nested).length) this.nested = undefined;
        object.onRemove(this);
        return clearCache(this);
      };
      /**
       * Defines additial namespaces within this one if not yet existing.
       * @param {string|string[]} path Path to create
       * @param {*} [json] Nested types to create from JSON
       * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty
       */


      Namespace.prototype.define = function define(path, json) {
        if (util.isString(path)) path = path.split(".");else if (!Array.isArray(path)) throw TypeError("illegal path");
        if (path && path.length && path[0] === "") throw Error("path must be relative");
        var ptr = this;

        while (path.length > 0) {
          var part = path.shift();

          if (ptr.nested && ptr.nested[part]) {
            ptr = ptr.nested[part];
            if (!(ptr instanceof Namespace)) throw Error("path conflicts with non-namespace objects");
          } else ptr.add(ptr = new Namespace(part));
        }

        if (json) ptr.addJSON(json);
        return ptr;
      };
      /**
       * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.
       * @returns {Namespace} `this`
       */


      Namespace.prototype.resolveAll = function resolveAll() {
        var nested = this.nestedArray,
            i = 0;

        while (i < nested.length) {
          if (nested[i] instanceof Namespace) nested[i++].resolveAll();else nested[i++].resolve();
        }

        return this.resolve();
      };
      /**
       * Recursively looks up the reflection object matching the specified path in the scope of this namespace.
       * @param {string|string[]} path Path to look up
       * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.
       * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked
       * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
       */


      Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {
        /* istanbul ignore next */
        if (typeof filterTypes === "boolean") {
          parentAlreadyChecked = filterTypes;
          filterTypes = undefined;
        } else if (filterTypes && !Array.isArray(filterTypes)) filterTypes = [filterTypes];

        if (util.isString(path) && path.length) {
          if (path === ".") return this.root;
          path = path.split(".");
        } else if (!path.length) return this; // Start at root if path is absolute


        if (path[0] === "") return this.root.lookup(path.slice(1), filterTypes); // Test if the first part matches any nested object, and if so, traverse if path contains more

        var found = this.get(path[0]);

        if (found) {
          if (path.length === 1) {
            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1) return found;
          } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true))) return found; // Otherwise try each nested namespace

        } else for (var i = 0; i < this.nestedArray.length; ++i) {
          if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true))) return found;
        } // If there hasn't been a match, try again at the parent


        if (this.parent === null || parentAlreadyChecked) return null;
        return this.parent.lookup(path, filterTypes);
      };
      /**
       * Looks up the reflection object at the specified path, relative to this namespace.
       * @name NamespaceBase#lookup
       * @function
       * @param {string|string[]} path Path to look up
       * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked
       * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
       * @variation 2
       */
      // lookup(path: string, [parentAlreadyChecked: boolean])

      /**
       * Looks up the {@link Type|type} at the specified path, relative to this namespace.
       * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
       * @param {string|string[]} path Path to look up
       * @returns {Type} Looked up type
       * @throws {Error} If `path` does not point to a type
       */


      Namespace.prototype.lookupType = function lookupType(path) {
        var found = this.lookup(path, [Type]);
        if (!found) throw Error("no such type: " + path);
        return found;
      };
      /**
       * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.
       * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
       * @param {string|string[]} path Path to look up
       * @returns {Enum} Looked up enum
       * @throws {Error} If `path` does not point to an enum
       */


      Namespace.prototype.lookupEnum = function lookupEnum(path) {
        var found = this.lookup(path, [Enum]);
        if (!found) throw Error("no such Enum '" + path + "' in " + this);
        return found;
      };
      /**
       * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.
       * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
       * @param {string|string[]} path Path to look up
       * @returns {Type} Looked up type or enum
       * @throws {Error} If `path` does not point to a type or enum
       */


      Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
        var found = this.lookup(path, [Type, Enum]);
        if (!found) throw Error("no such Type or Enum '" + path + "' in " + this);
        return found;
      };
      /**
       * Looks up the {@link Service|service} at the specified path, relative to this namespace.
       * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
       * @param {string|string[]} path Path to look up
       * @returns {Service} Looked up service
       * @throws {Error} If `path` does not point to a service
       */


      Namespace.prototype.lookupService = function lookupService(path) {
        var found = this.lookup(path, [Service]);
        if (!found) throw Error("no such Service '" + path + "' in " + this);
        return found;
      }; // Sets up cyclic dependencies (called in index-light)


      Namespace._configure = function (Type_, Service_, Enum_) {
        Type = Type_;
        Service = Service_;
        Enum = Enum_;
      };
    }, {
      "16": 16,
      "24": 24,
      "37": 37
    }],
    24: [function (require, module, exports) {
      "use strict";

      module.exports = ReflectionObject;
      ReflectionObject.className = "ReflectionObject";

      var util = require(37);

      var Root; // cyclic

      /**
       * Constructs a new reflection object instance.
       * @classdesc Base class of all reflection objects.
       * @constructor
       * @param {string} name Object name
       * @param {Object.<string,*>} [options] Declared options
       * @abstract
       */

      function ReflectionObject(name, options) {
        if (!util.isString(name)) throw TypeError("name must be a string");
        if (options && !util.isObject(options)) throw TypeError("options must be an object");
        /**
         * Options.
         * @type {Object.<string,*>|undefined}
         */

        this.options = options; // toJSON

        /**
         * Unique name within its namespace.
         * @type {string}
         */

        this.name = name;
        /**
         * Parent namespace.
         * @type {Namespace|null}
         */

        this.parent = null;
        /**
         * Whether already resolved or not.
         * @type {boolean}
         */

        this.resolved = false;
        /**
         * Comment text, if any.
         * @type {string|null}
         */

        this.comment = null;
        /**
         * Defining file name.
         * @type {string|null}
         */

        this.filename = null;
      }

      Object.defineProperties(ReflectionObject.prototype, {
        /**
         * Reference to the root namespace.
         * @name ReflectionObject#root
         * @type {Root}
         * @readonly
         */
        root: {
          get: function get() {
            var ptr = this;

            while (ptr.parent !== null) {
              ptr = ptr.parent;
            }

            return ptr;
          }
        },

        /**
         * Full name including leading dot.
         * @name ReflectionObject#fullName
         * @type {string}
         * @readonly
         */
        fullName: {
          get: function get() {
            var path = [this.name],
                ptr = this.parent;

            while (ptr) {
              path.unshift(ptr.name);
              ptr = ptr.parent;
            }

            return path.join(".");
          }
        }
      });
      /**
       * Converts this reflection object to its descriptor representation.
       * @returns {Object.<string,*>} Descriptor
       * @abstract
       */

      ReflectionObject.prototype.toJSON =
      /* istanbul ignore next */
      function toJSON() {
        throw Error(); // not implemented, shouldn't happen
      };
      /**
       * Called when this object is added to a parent.
       * @param {ReflectionObject} parent Parent added to
       * @returns {undefined}
       */


      ReflectionObject.prototype.onAdd = function onAdd(parent) {
        if (this.parent && this.parent !== parent) this.parent.remove(this);
        this.parent = parent;
        this.resolved = false;
        var root = parent.root;
        if (root instanceof Root) root._handleAdd(this);
      };
      /**
       * Called when this object is removed from a parent.
       * @param {ReflectionObject} parent Parent removed from
       * @returns {undefined}
       */


      ReflectionObject.prototype.onRemove = function onRemove(parent) {
        var root = parent.root;
        if (root instanceof Root) root._handleRemove(this);
        this.parent = null;
        this.resolved = false;
      };
      /**
       * Resolves this objects type references.
       * @returns {ReflectionObject} `this`
       */


      ReflectionObject.prototype.resolve = function resolve() {
        if (this.resolved) return this;
        if (this.root instanceof Root) this.resolved = true; // only if part of a root

        return this;
      };
      /**
       * Gets an option value.
       * @param {string} name Option name
       * @returns {*} Option value or `undefined` if not set
       */


      ReflectionObject.prototype.getOption = function getOption(name) {
        if (this.options) return this.options[name];
        return undefined;
      };
      /**
       * Sets an option.
       * @param {string} name Option name
       * @param {*} value Option value
       * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set
       * @returns {ReflectionObject} `this`
       */


      ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
        if (!ifNotSet || !this.options || this.options[name] === undefined) (this.options || (this.options = {}))[name] = value;
        return this;
      };
      /**
       * Sets multiple options.
       * @param {Object.<string,*>} options Options to set
       * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set
       * @returns {ReflectionObject} `this`
       */


      ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
        if (options) for (var keys = Object.keys(options), i = 0; i < keys.length; ++i) {
          this.setOption(keys[i], options[keys[i]], ifNotSet);
        }
        return this;
      };
      /**
       * Converts this instance to its string representation.
       * @returns {string} Class name[, space, full name]
       */


      ReflectionObject.prototype.toString = function toString() {
        var className = this.constructor.className,
            fullName = this.fullName;
        if (fullName.length) return className + " " + fullName;
        return className;
      }; // Sets up cyclic dependencies (called in index-light)


      ReflectionObject._configure = function (Root_) {
        Root = Root_;
      };
    }, {
      "37": 37
    }],
    25: [function (require, module, exports) {
      "use strict";

      module.exports = OneOf; // extends ReflectionObject

      var ReflectionObject = require(24);

      ((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";

      var Field = require(16),
          util = require(37);
      /**
       * Constructs a new oneof instance.
       * @classdesc Reflected oneof.
       * @extends ReflectionObject
       * @constructor
       * @param {string} name Oneof name
       * @param {string[]|Object.<string,*>} [fieldNames] Field names
       * @param {Object.<string,*>} [options] Declared options
       * @param {string} [comment] Comment associated with this field
       */


      function OneOf(name, fieldNames, options, comment) {
        if (!Array.isArray(fieldNames)) {
          options = fieldNames;
          fieldNames = undefined;
        }

        ReflectionObject.call(this, name, options);
        /* istanbul ignore if */

        if (!(fieldNames === undefined || Array.isArray(fieldNames))) throw TypeError("fieldNames must be an Array");
        /**
         * Field names that belong to this oneof.
         * @type {string[]}
         */

        this.oneof = fieldNames || []; // toJSON, marker

        /**
         * Fields that belong to this oneof as an array for iteration.
         * @type {Field[]}
         * @readonly
         */

        this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent

        /**
         * Comment for this field.
         * @type {string|null}
         */

        this.comment = comment;
      }
      /**
       * Oneof descriptor.
       * @interface IOneOf
       * @property {Array.<string>} oneof Oneof field names
       * @property {Object.<string,*>} [options] Oneof options
       */

      /**
       * Constructs a oneof from a oneof descriptor.
       * @param {string} name Oneof name
       * @param {IOneOf} json Oneof descriptor
       * @returns {OneOf} Created oneof
       * @throws {TypeError} If arguments are invalid
       */


      OneOf.fromJSON = function fromJSON(name, json) {
        return new OneOf(name, json.oneof, json.options, json.comment);
      };
      /**
       * Converts this oneof to a oneof descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {IOneOf} Oneof descriptor
       */


      OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
        var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
        return util.toObject(["options", this.options, "oneof", this.oneof, "comment", keepComments ? this.comment : undefined]);
      };
      /**
       * Adds the fields of the specified oneof to the parent if not already done so.
       * @param {OneOf} oneof The oneof
       * @returns {undefined}
       * @inner
       * @ignore
       */


      function addFieldsToParent(oneof) {
        if (oneof.parent) for (var i = 0; i < oneof.fieldsArray.length; ++i) {
          if (!oneof.fieldsArray[i].parent) oneof.parent.add(oneof.fieldsArray[i]);
        }
      }
      /**
       * Adds a field to this oneof and removes it from its current parent, if any.
       * @param {Field} field Field to add
       * @returns {OneOf} `this`
       */


      OneOf.prototype.add = function add(field) {
        /* istanbul ignore if */
        if (!(field instanceof Field)) throw TypeError("field must be a Field");
        if (field.parent && field.parent !== this.parent) field.parent.remove(field);
        this.oneof.push(field.name);
        this.fieldsArray.push(field);
        field.partOf = this; // field.parent remains null

        addFieldsToParent(this);
        return this;
      };
      /**
       * Removes a field from this oneof and puts it back to the oneof's parent.
       * @param {Field} field Field to remove
       * @returns {OneOf} `this`
       */


      OneOf.prototype.remove = function remove(field) {
        /* istanbul ignore if */
        if (!(field instanceof Field)) throw TypeError("field must be a Field");
        var index = this.fieldsArray.indexOf(field);
        /* istanbul ignore if */

        if (index < 0) throw Error(field + " is not a member of " + this);
        this.fieldsArray.splice(index, 1);
        index = this.oneof.indexOf(field.name);
        /* istanbul ignore else */

        if (index > -1) // theoretical
          this.oneof.splice(index, 1);
        field.partOf = null;
        return this;
      };
      /**
       * @override
       */


      OneOf.prototype.onAdd = function onAdd(parent) {
        ReflectionObject.prototype.onAdd.call(this, parent);
        var self = this; // Collect present fields

        for (var i = 0; i < this.oneof.length; ++i) {
          var field = parent.get(this.oneof[i]);

          if (field && !field.partOf) {
            field.partOf = self;
            self.fieldsArray.push(field);
          }
        } // Add not yet present fields


        addFieldsToParent(this);
      };
      /**
       * @override
       */


      OneOf.prototype.onRemove = function onRemove(parent) {
        for (var i = 0, field; i < this.fieldsArray.length; ++i) {
          if ((field = this.fieldsArray[i]).parent) field.parent.remove(field);
        }

        ReflectionObject.prototype.onRemove.call(this, parent);
      };
      /**
       * Decorator function as returned by {@link OneOf.d} (TypeScript).
       * @typedef OneOfDecorator
       * @type {function}
       * @param {Object} prototype Target prototype
       * @param {string} oneofName OneOf name
       * @returns {undefined}
       */

      /**
       * OneOf decorator (TypeScript).
       * @function
       * @param {...string} fieldNames Field names
       * @returns {OneOfDecorator} Decorator function
       * @template T extends string
       */


      OneOf.d = function decorateOneOf() {
        var fieldNames = new Array(arguments.length),
            index = 0;

        while (index < arguments.length) {
          fieldNames[index] = arguments[index++];
        }

        return function oneOfDecorator(prototype, oneofName) {
          util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));
          Object.defineProperty(prototype, oneofName, {
            get: util.oneOfGetter(fieldNames),
            set: util.oneOfSetter(fieldNames)
          });
        };
      };
    }, {
      "16": 16,
      "24": 24,
      "37": 37
    }],
    26: [function (require, module, exports) {
      "use strict";

      module.exports = parse;
      parse.filename = null;
      parse.defaults = {
        keepCase: false
      };

      var tokenize = require(34),
          Root = require(29),
          Type = require(35),
          Field = require(16),
          MapField = require(20),
          OneOf = require(25),
          Enum = require(15),
          Service = require(33),
          Method = require(22),
          types = require(36),
          util = require(37);

      var base10Re = /^[1-9][0-9]*$/,
          base10NegRe = /^-?[1-9][0-9]*$/,
          base16Re = /^0[x][0-9a-fA-F]+$/,
          base16NegRe = /^-?0[x][0-9a-fA-F]+$/,
          base8Re = /^0[0-7]+$/,
          base8NegRe = /^-?0[0-7]+$/,
          numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,
          nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/,
          typeRefRe = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,
          fqTypeRefRe = /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;
      /**
       * Result object returned from {@link parse}.
       * @interface IParserResult
       * @property {string|undefined} package Package name, if declared
       * @property {string[]|undefined} imports Imports, if any
       * @property {string[]|undefined} weakImports Weak imports, if any
       * @property {string|undefined} syntax Syntax, if specified (either `"proto2"` or `"proto3"`)
       * @property {Root} root Populated root instance
       */

      /**
       * Options modifying the behavior of {@link parse}.
       * @interface IParseOptions
       * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case
       * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.
       */

      /**
       * Options modifying the behavior of JSON serialization.
       * @interface IToJSONOptions
       * @property {boolean} [keepComments=false] Serializes comments.
       */

      /**
       * Parses the given .proto source and returns an object with the parsed contents.
       * @param {string} source Source contents
       * @param {Root} root Root to populate
       * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
       * @returns {IParserResult} Parser result
       * @property {string} filename=null Currently processing file name for error reporting, if known
       * @property {IParseOptions} defaults Default {@link IParseOptions}
       */

      function parse(source, root, options) {
        /* eslint-disable callback-return */
        if (!(root instanceof Root)) {
          options = root;
          root = new Root();
        }

        if (!options) options = parse.defaults;
        var tn = tokenize(source, options.alternateCommentMode || false),
            next = tn.next,
            push = tn.push,
            peek = tn.peek,
            skip = tn.skip,
            cmnt = tn.cmnt;
        var head = true,
            pkg,
            imports,
            weakImports,
            syntax,
            isProto3 = false;
        var ptr = root;
        var applyCase = options.keepCase ? function (name) {
          return name;
        } : util.camelCase;
        /* istanbul ignore next */

        function illegal(token, name, insideTryCatch) {
          var filename = parse.filename;
          if (!insideTryCatch) parse.filename = null;
          return Error("illegal " + (name || "token") + " '" + token + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
        }

        function readString() {
          var values = [],
              token;

          do {
            /* istanbul ignore if */
            if ((token = next()) !== "\"" && token !== "'") throw illegal(token);
            values.push(next());
            skip(token);
            token = peek();
          } while (token === "\"" || token === "'");

          return values.join("");
        }

        function readValue(acceptTypeRef) {
          var token = next();

          switch (token) {
            case "'":
            case "\"":
              push(token);
              return readString();

            case "true":
            case "TRUE":
              return true;

            case "false":
            case "FALSE":
              return false;
          }

          try {
            return parseNumber(token,
            /* insideTryCatch */
            true);
          } catch (e) {
            /* istanbul ignore else */
            if (acceptTypeRef && typeRefRe.test(token)) return token;
            /* istanbul ignore next */

            throw illegal(token, "value");
          }
        }

        function readRanges(target, acceptStrings) {
          var token, start;

          do {
            if (acceptStrings && ((token = peek()) === "\"" || token === "'")) target.push(readString());else target.push([start = parseId(next()), skip("to", true) ? parseId(next()) : start]);
          } while (skip(",", true));

          skip(";");
        }

        function parseNumber(token, insideTryCatch) {
          var sign = 1;

          if (token.charAt(0) === "-") {
            sign = -1;
            token = token.substring(1);
          }

          switch (token) {
            case "inf":
            case "INF":
            case "Inf":
              return sign * Infinity;

            case "nan":
            case "NAN":
            case "Nan":
            case "NaN":
              return NaN;

            case "0":
              return 0;
          }

          if (base10Re.test(token)) return sign * parseInt(token, 10);
          if (base16Re.test(token)) return sign * parseInt(token, 16);
          if (base8Re.test(token)) return sign * parseInt(token, 8);
          /* istanbul ignore else */

          if (numberRe.test(token)) return sign * parseFloat(token);
          /* istanbul ignore next */

          throw illegal(token, "number", insideTryCatch);
        }

        function parseId(token, acceptNegative) {
          switch (token) {
            case "max":
            case "MAX":
            case "Max":
              return 536870911;

            case "0":
              return 0;
          }
          /* istanbul ignore if */


          if (!acceptNegative && token.charAt(0) === "-") throw illegal(token, "id");
          if (base10NegRe.test(token)) return parseInt(token, 10);
          if (base16NegRe.test(token)) return parseInt(token, 16);
          /* istanbul ignore else */

          if (base8NegRe.test(token)) return parseInt(token, 8);
          /* istanbul ignore next */

          throw illegal(token, "id");
        }

        function parsePackage() {
          /* istanbul ignore if */
          if (pkg !== undefined) throw illegal("package");
          pkg = next();
          /* istanbul ignore if */

          if (!typeRefRe.test(pkg)) throw illegal(pkg, "name");
          ptr = ptr.define(pkg);
          skip(";");
        }

        function parseImport() {
          var token = peek();
          var whichImports;

          switch (token) {
            case "weak":
              whichImports = weakImports || (weakImports = []);
              next();
              break;

            case "public":
              next();
            // eslint-disable-line no-fallthrough

            default:
              whichImports = imports || (imports = []);
              break;
          }

          token = readString();
          skip(";");
          whichImports.push(token);
        }

        function parseSyntax() {
          skip("=");
          syntax = readString();
          isProto3 = syntax === "proto3";
          /* istanbul ignore if */

          if (!isProto3 && syntax !== "proto2") throw illegal(syntax, "syntax");
          skip(";");
        }

        function parseCommon(parent, token) {
          switch (token) {
            case "option":
              parseOption(parent, token);
              skip(";");
              return true;

            case "message":
              parseType(parent, token);
              return true;

            case "enum":
              parseEnum(parent, token);
              return true;

            case "service":
              parseService(parent, token);
              return true;

            case "extend":
              parseExtension(parent, token);
              return true;
          }

          return false;
        }

        function ifBlock(obj, fnIf, fnElse) {
          var trailingLine = tn.line;

          if (obj) {
            obj.comment = cmnt(); // try block-type comment

            obj.filename = parse.filename;
          }

          if (skip("{", true)) {
            var token;

            while ((token = next()) !== "}") {
              fnIf(token);
            }

            skip(";", true);
          } else {
            if (fnElse) fnElse();
            skip(";");
            if (obj && typeof obj.comment !== "string") obj.comment = cmnt(trailingLine); // try line-type comment if no block
          }
        }

        function parseType(parent, token) {
          /* istanbul ignore if */
          if (!nameRe.test(token = next())) throw illegal(token, "type name");
          var type = new Type(token);
          ifBlock(type, function parseType_block(token) {
            if (parseCommon(type, token)) return;

            switch (token) {
              case "map":
                parseMapField(type, token);
                break;

              case "required":
              case "optional":
              case "repeated":
                parseField(type, token);
                break;

              case "oneof":
                parseOneOf(type, token);
                break;

              case "extensions":
                readRanges(type.extensions || (type.extensions = []));
                break;

              case "reserved":
                readRanges(type.reserved || (type.reserved = []), true);
                break;

              default:
                /* istanbul ignore if */
                if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);
                push(token);
                parseField(type, "optional");
                break;
            }
          });
          parent.add(type);
        }

        function parseField(parent, rule, extend) {
          var type = next();

          if (type === "group") {
            parseGroup(parent, rule);
            return;
          }
          /* istanbul ignore if */


          if (!typeRefRe.test(type)) throw illegal(type, "type");
          var name = next();
          /* istanbul ignore if */

          if (!nameRe.test(name)) throw illegal(name, "name");
          name = applyCase(name);
          skip("=");
          var field = new Field(name, parseId(next()), type, rule, extend);
          ifBlock(field, function parseField_block(token) {
            /* istanbul ignore else */
            if (token === "option") {
              parseOption(field, token);
              skip(";");
            } else throw illegal(token);
          }, function parseField_line() {
            parseInlineOptions(field);
          });
          parent.add(field); // JSON defaults to packed=true if not set so we have to set packed=false explicity when
          // parsing proto2 descriptors without the option, where applicable. This must be done for
          // all known packable types and anything that could be an enum (= is not a basic type).

          if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined)) field.setOption("packed", false,
          /* ifNotSet */
          true);
        }

        function parseGroup(parent, rule) {
          var name = next();
          /* istanbul ignore if */

          if (!nameRe.test(name)) throw illegal(name, "name");
          var fieldName = util.lcFirst(name);
          if (name === fieldName) name = util.ucFirst(name);
          skip("=");
          var id = parseId(next());
          var type = new Type(name);
          type.group = true;
          var field = new Field(fieldName, id, name, rule);
          field.filename = parse.filename;
          ifBlock(type, function parseGroup_block(token) {
            switch (token) {
              case "option":
                parseOption(type, token);
                skip(";");
                break;

              case "required":
              case "optional":
              case "repeated":
                parseField(type, token);
                break;

              /* istanbul ignore next */

              default:
                throw illegal(token);
              // there are no groups with proto3 semantics
            }
          });
          parent.add(type).add(field);
        }

        function parseMapField(parent) {
          skip("<");
          var keyType = next();
          /* istanbul ignore if */

          if (types.mapKey[keyType] === undefined) throw illegal(keyType, "type");
          skip(",");
          var valueType = next();
          /* istanbul ignore if */

          if (!typeRefRe.test(valueType)) throw illegal(valueType, "type");
          skip(">");
          var name = next();
          /* istanbul ignore if */

          if (!nameRe.test(name)) throw illegal(name, "name");
          skip("=");
          var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);
          ifBlock(field, function parseMapField_block(token) {
            /* istanbul ignore else */
            if (token === "option") {
              parseOption(field, token);
              skip(";");
            } else throw illegal(token);
          }, function parseMapField_line() {
            parseInlineOptions(field);
          });
          parent.add(field);
        }

        function parseOneOf(parent, token) {
          /* istanbul ignore if */
          if (!nameRe.test(token = next())) throw illegal(token, "name");
          var oneof = new OneOf(applyCase(token));
          ifBlock(oneof, function parseOneOf_block(token) {
            if (token === "option") {
              parseOption(oneof, token);
              skip(";");
            } else {
              push(token);
              parseField(oneof, "optional");
            }
          });
          parent.add(oneof);
        }

        function parseEnum(parent, token) {
          /* istanbul ignore if */
          if (!nameRe.test(token = next())) throw illegal(token, "name");
          var enm = new Enum(token);
          ifBlock(enm, function parseEnum_block(token) {
            switch (token) {
              case "option":
                parseOption(enm, token);
                skip(";");
                break;

              case "reserved":
                readRanges(enm.reserved || (enm.reserved = []), true);
                break;

              default:
                parseEnumValue(enm, token);
            }
          });
          parent.add(enm);
        }

        function parseEnumValue(parent, token) {
          /* istanbul ignore if */
          if (!nameRe.test(token)) throw illegal(token, "name");
          skip("=");
          var value = parseId(next(), true),
              dummy = {};
          ifBlock(dummy, function parseEnumValue_block(token) {
            /* istanbul ignore else */
            if (token === "option") {
              parseOption(dummy, token); // skip

              skip(";");
            } else throw illegal(token);
          }, function parseEnumValue_line() {
            parseInlineOptions(dummy); // skip
          });
          parent.add(token, value, dummy.comment);
        }

        function parseOption(parent, token) {
          var isCustom = skip("(", true);
          /* istanbul ignore if */

          if (!typeRefRe.test(token = next())) throw illegal(token, "name");
          var name = token;

          if (isCustom) {
            skip(")");
            name = "(" + name + ")";
            token = peek();

            if (fqTypeRefRe.test(token)) {
              name += token;
              next();
            }
          }

          skip("=");
          parseOptionValue(parent, name);
        }

        function parseOptionValue(parent, name) {
          if (skip("{", true)) {
            // { a: "foo" b { c: "bar" } }
            do {
              /* istanbul ignore if */
              if (!nameRe.test(token = next())) throw illegal(token, "name");
              if (peek() === "{") parseOptionValue(parent, name + "." + token);else {
                skip(":");
                if (peek() === "{") parseOptionValue(parent, name + "." + token);else setOption(parent, name + "." + token, readValue(true));
              }
              skip(",", true);
            } while (!skip("}", true));
          } else setOption(parent, name, readValue(true)); // Does not enforce a delimiter to be universal

        }

        function setOption(parent, name, value) {
          if (parent.setOption) parent.setOption(name, value);
        }

        function parseInlineOptions(parent) {
          if (skip("[", true)) {
            do {
              parseOption(parent, "option");
            } while (skip(",", true));

            skip("]");
          }

          return parent;
        }

        function parseService(parent, token) {
          /* istanbul ignore if */
          if (!nameRe.test(token = next())) throw illegal(token, "service name");
          var service = new Service(token);
          ifBlock(service, function parseService_block(token) {
            if (parseCommon(service, token)) return;
            /* istanbul ignore else */

            if (token === "rpc") parseMethod(service, token);else throw illegal(token);
          });
          parent.add(service);
        }

        function parseMethod(parent, token) {
          var type = token;
          /* istanbul ignore if */

          if (!nameRe.test(token = next())) throw illegal(token, "name");
          var name = token,
              requestType,
              requestStream,
              responseType,
              responseStream;
          skip("(");
          if (skip("stream", true)) requestStream = true;
          /* istanbul ignore if */

          if (!typeRefRe.test(token = next())) throw illegal(token);
          requestType = token;
          skip(")");
          skip("returns");
          skip("(");
          if (skip("stream", true)) responseStream = true;
          /* istanbul ignore if */

          if (!typeRefRe.test(token = next())) throw illegal(token);
          responseType = token;
          skip(")");
          var method = new Method(name, type, requestType, responseType, requestStream, responseStream);
          ifBlock(method, function parseMethod_block(token) {
            /* istanbul ignore else */
            if (token === "option") {
              parseOption(method, token);
              skip(";");
            } else throw illegal(token);
          });
          parent.add(method);
        }

        function parseExtension(parent, token) {
          /* istanbul ignore if */
          if (!typeRefRe.test(token = next())) throw illegal(token, "reference");
          var reference = token;
          ifBlock(null, function parseExtension_block(token) {
            switch (token) {
              case "required":
              case "repeated":
              case "optional":
                parseField(parent, token, reference);
                break;

              default:
                /* istanbul ignore if */
                if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);
                push(token);
                parseField(parent, "optional", reference);
                break;
            }
          });
        }

        var token;

        while ((token = next()) !== null) {
          switch (token) {
            case "package":
              /* istanbul ignore if */
              if (!head) throw illegal(token);
              parsePackage();
              break;

            case "import":
              /* istanbul ignore if */
              if (!head) throw illegal(token);
              parseImport();
              break;

            case "syntax":
              /* istanbul ignore if */
              if (!head) throw illegal(token);
              parseSyntax();
              break;

            case "option":
              /* istanbul ignore if */
              if (!head) throw illegal(token);
              parseOption(ptr, token);
              skip(";");
              break;

            default:
              /* istanbul ignore else */
              if (parseCommon(ptr, token)) {
                head = false;
                continue;
              }
              /* istanbul ignore next */


              throw illegal(token);
          }
        }

        parse.filename = null;
        return {
          "package": pkg,
          "imports": imports,
          weakImports: weakImports,
          syntax: syntax,
          root: root
        };
      }
      /**
       * Parses the given .proto source and returns an object with the parsed contents.
       * @name parse
       * @function
       * @param {string} source Source contents
       * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
       * @returns {IParserResult} Parser result
       * @property {string} filename=null Currently processing file name for error reporting, if known
       * @property {IParseOptions} defaults Default {@link IParseOptions}
       * @variation 2
       */

    }, {
      "15": 15,
      "16": 16,
      "20": 20,
      "22": 22,
      "25": 25,
      "29": 29,
      "33": 33,
      "34": 34,
      "35": 35,
      "36": 36,
      "37": 37
    }],
    27: [function (require, module, exports) {
      "use strict";

      module.exports = Reader;

      var util = require(39);

      var BufferReader; // cyclic

      var LongBits = util.LongBits,
          utf8 = util.utf8;
      /* istanbul ignore next */

      function indexOutOfRange(reader, writeLength) {
        return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
      }
      /**
       * Constructs a new reader instance using the specified buffer.
       * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
       * @constructor
       * @param {Uint8Array} buffer Buffer to read from
       */


      function Reader(buffer) {
        /**
         * Read buffer.
         * @type {Uint8Array}
         */
        this.buf = buffer;
        /**
         * Read buffer position.
         * @type {number}
         */

        this.pos = 0;
        /**
         * Read buffer length.
         * @type {number}
         */

        this.len = buffer.length;
      }

      var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);
        throw Error("illegal buffer");
      }
      /* istanbul ignore next */
      : function create_array(buffer) {
        if (Array.isArray(buffer)) return new Reader(buffer);
        throw Error("illegal buffer");
      };
      /**
       * Creates a new reader using the specified buffer.
       * @function
       * @param {Uint8Array|Buffer} buffer Buffer to read from
       * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
       * @throws {Error} If `buffer` is not a valid buffer
       */

      Reader.create = util.Buffer ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer) {
          return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer)
          /* istanbul ignore next */
          : create_array(buffer);
        })(buffer);
      }
      /* istanbul ignore next */
      : create_array;
      Reader.prototype._slice = util.Array.prototype.subarray ||
      /* istanbul ignore next */
      util.Array.prototype.slice;
      /**
       * Reads a varint as an unsigned 32 bit value.
       * @function
       * @returns {number} Value read
       */

      Reader.prototype.uint32 = function read_uint32_setup() {
        var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)

        return function read_uint32() {
          value = (this.buf[this.pos] & 127) >>> 0;
          if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
          if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
          if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
          if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
          if (this.buf[this.pos++] < 128) return value;
          /* istanbul ignore if */

          if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
          }

          return value;
        };
      }();
      /**
       * Reads a varint as a signed 32 bit value.
       * @returns {number} Value read
       */


      Reader.prototype.int32 = function read_int32() {
        return this.uint32() | 0;
      };
      /**
       * Reads a zig-zag encoded varint as a signed 32 bit value.
       * @returns {number} Value read
       */


      Reader.prototype.sint32 = function read_sint32() {
        var value = this.uint32();
        return value >>> 1 ^ -(value & 1) | 0;
      };
      /* eslint-disable no-invalid-this */


      function readLongVarint() {
        // tends to deopt with local vars for octet etc.
        var bits = new LongBits(0, 0);
        var i = 0;

        if (this.len - this.pos > 4) {
          // fast route (lo)
          for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
          } // 5th


          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
          if (this.buf[this.pos++] < 128) return bits;
          i = 0;
        } else {
          for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len) throw indexOutOfRange(this); // 1st..3th

            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
          } // 4th


          bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
          return bits;
        }

        if (this.len - this.pos > 4) {
          // fast route (hi)
          for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
          }
        } else {
          for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len) throw indexOutOfRange(this); // 6th..10th

            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
          }
        }
        /* istanbul ignore next */


        throw Error("invalid varint encoding");
      }
      /* eslint-enable no-invalid-this */

      /**
       * Reads a varint as a signed 64 bit value.
       * @name Reader#int64
       * @function
       * @returns {Long} Value read
       */

      /**
       * Reads a varint as an unsigned 64 bit value.
       * @name Reader#uint64
       * @function
       * @returns {Long} Value read
       */

      /**
       * Reads a zig-zag encoded varint as a signed 64 bit value.
       * @name Reader#sint64
       * @function
       * @returns {Long} Value read
       */

      /**
       * Reads a varint as a boolean.
       * @returns {boolean} Value read
       */


      Reader.prototype.bool = function read_bool() {
        return this.uint32() !== 0;
      };

      function readFixed32_end(buf, end) {
        // note that this uses `end`, not `pos`
        return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
      }
      /**
       * Reads fixed 32 bits as an unsigned 32 bit integer.
       * @returns {number} Value read
       */


      Reader.prototype.fixed32 = function read_fixed32() {
        /* istanbul ignore if */
        if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
        return readFixed32_end(this.buf, this.pos += 4);
      };
      /**
       * Reads fixed 32 bits as a signed 32 bit integer.
       * @returns {number} Value read
       */


      Reader.prototype.sfixed32 = function read_sfixed32() {
        /* istanbul ignore if */
        if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
        return readFixed32_end(this.buf, this.pos += 4) | 0;
      };
      /* eslint-disable no-invalid-this */


      function readFixed64()
      /* this: Reader */
      {
        /* istanbul ignore if */
        if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);
        return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
      }
      /* eslint-enable no-invalid-this */

      /**
       * Reads fixed 64 bits.
       * @name Reader#fixed64
       * @function
       * @returns {Long} Value read
       */

      /**
       * Reads zig-zag encoded fixed 64 bits.
       * @name Reader#sfixed64
       * @function
       * @returns {Long} Value read
       */

      /**
       * Reads a float (32 bit) as a number.
       * @function
       * @returns {number} Value read
       */


      Reader.prototype["float"] = function read_float() {
        /* istanbul ignore if */
        if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
        var value = util["float"].readFloatLE(this.buf, this.pos);
        this.pos += 4;
        return value;
      };
      /**
       * Reads a double (64 bit float) as a number.
       * @function
       * @returns {number} Value read
       */


      Reader.prototype["double"] = function read_double() {
        /* istanbul ignore if */
        if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);
        var value = util["float"].readDoubleLE(this.buf, this.pos);
        this.pos += 8;
        return value;
      };
      /**
       * Reads a sequence of bytes preceeded by its length as a varint.
       * @returns {Uint8Array} Value read
       */


      Reader.prototype.bytes = function read_bytes() {
        var length = this.uint32(),
            start = this.pos,
            end = this.pos + length;
        /* istanbul ignore if */

        if (end > this.len) throw indexOutOfRange(this, length);
        this.pos += length;
        if (Array.isArray(this.buf)) // plain array
          return this.buf.slice(start, end);
        return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
        ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
      };
      /**
       * Reads a string preceeded by its byte length as a varint.
       * @returns {string} Value read
       */


      Reader.prototype.string = function read_string() {
        var bytes = this.bytes();
        return utf8.read(bytes, 0, bytes.length);
      };
      /**
       * Skips the specified number of bytes if specified, otherwise skips a varint.
       * @param {number} [length] Length if known, otherwise a varint is assumed
       * @returns {Reader} `this`
       */


      Reader.prototype.skip = function skip(length) {
        if (typeof length === "number") {
          /* istanbul ignore if */
          if (this.pos + length > this.len) throw indexOutOfRange(this, length);
          this.pos += length;
        } else {
          do {
            /* istanbul ignore if */
            if (this.pos >= this.len) throw indexOutOfRange(this);
          } while (this.buf[this.pos++] & 128);
        }

        return this;
      };
      /**
       * Skips the next element of the specified wire type.
       * @param {number} wireType Wire type received
       * @returns {Reader} `this`
       */


      Reader.prototype.skipType = function (wireType) {
        switch (wireType) {
          case 0:
            this.skip();
            break;

          case 1:
            this.skip(8);
            break;

          case 2:
            this.skip(this.uint32());
            break;

          case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
              this.skipType(wireType);
            }

            break;

          case 5:
            this.skip(4);
            break;

          /* istanbul ignore next */

          default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
        }

        return this;
      };

      Reader._configure = function (BufferReader_) {
        BufferReader = BufferReader_;
        var fn = util.Long ? "toLong" :
        /* istanbul ignore next */
        "toNumber";
        util.merge(Reader.prototype, {
          int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
          },
          uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
          },
          sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
          },
          fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
          },
          sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
          }
        });
      };
    }, {
      "39": 39
    }],
    28: [function (require, module, exports) {
      "use strict";

      module.exports = BufferReader; // extends Reader

      var Reader = require(27);

      (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

      var util = require(39);
      /**
       * Constructs a new buffer reader instance.
       * @classdesc Wire format reader using node buffers.
       * @extends Reader
       * @constructor
       * @param {Buffer} buffer Buffer to read from
       */


      function BufferReader(buffer) {
        Reader.call(this, buffer);
        /**
         * Read buffer.
         * @name BufferReader#buf
         * @type {Buffer}
         */
      }
      /* istanbul ignore else */


      if (util.Buffer) BufferReader.prototype._slice = util.Buffer.prototype.slice;
      /**
       * @override
       */

      BufferReader.prototype.string = function read_string_buffer() {
        var len = this.uint32(); // modifies pos

        return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));
      };
      /**
       * Reads a sequence of bytes preceeded by its length as a varint.
       * @name BufferReader#bytes
       * @function
       * @returns {Buffer} Value read
       */

    }, {
      "27": 27,
      "39": 39
    }],
    29: [function (require, module, exports) {
      "use strict";

      module.exports = Root; // extends Namespace

      var Namespace = require(23);

      ((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";

      var Field = require(16),
          Enum = require(15),
          OneOf = require(25),
          util = require(37);

      var Type, // cyclic
      parse, // might be excluded
      common; // "

      /**
       * Constructs a new root namespace instance.
       * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.
       * @extends NamespaceBase
       * @constructor
       * @param {Object.<string,*>} [options] Top level options
       */

      function Root(options) {
        Namespace.call(this, "", options);
        /**
         * Deferred extension fields.
         * @type {Field[]}
         */

        this.deferred = [];
        /**
         * Resolved file names of loaded files.
         * @type {string[]}
         */

        this.files = [];
      }
      /**
       * Loads a namespace descriptor into a root namespace.
       * @param {INamespace} json Nameespace descriptor
       * @param {Root} [root] Root namespace, defaults to create a new one if omitted
       * @returns {Root} Root namespace
       */


      Root.fromJSON = function fromJSON(json, root) {
        if (!root) root = new Root();
        if (json.options) root.setOptions(json.options);
        return root.addJSON(json.nested);
      };
      /**
       * Resolves the path of an imported file, relative to the importing origin.
       * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.
       * @function
       * @param {string} origin The file name of the importing file
       * @param {string} target The file name being imported
       * @returns {string|null} Resolved path to `target` or `null` to skip the file
       */


      Root.prototype.resolvePath = util.path.resolve; // A symbol-like function to safely signal synchronous loading

      /* istanbul ignore next */

      function SYNC() {} // eslint-disable-line no-empty-function

      /**
       * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
       * @param {string|string[]} filename Names of one or multiple files to load
       * @param {IParseOptions} options Parse options
       * @param {LoadCallback} callback Callback function
       * @returns {undefined}
       */


      Root.prototype.load = function load(filename, options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = undefined;
        }

        var self = this;
        if (!callback) return util.asPromise(load, self, filename, options);
        var sync = callback === SYNC; // undocumented
        // Finishes loading by calling the callback (exactly once)

        function finish(err, root) {
          /* istanbul ignore if */
          if (!callback) return;
          var cb = callback;
          callback = null;
          if (sync) throw err;
          cb(err, root);
        } // Processes a single file


        function process(filename, source) {
          try {
            if (util.isString(source) && source.charAt(0) === "{") source = JSON.parse(source);
            if (!util.isString(source)) self.setOptions(source.options).addJSON(source.nested);else {
              parse.filename = filename;
              var parsed = parse(source, self, options),
                  resolved,
                  i = 0;
              if (parsed.imports) for (; i < parsed.imports.length; ++i) {
                if (resolved = self.resolvePath(filename, parsed.imports[i])) fetch(resolved);
              }
              if (parsed.weakImports) for (i = 0; i < parsed.weakImports.length; ++i) {
                if (resolved = self.resolvePath(filename, parsed.weakImports[i])) fetch(resolved, true);
              }
            }
          } catch (err) {
            finish(err);
          }

          if (!sync && !queued) finish(null, self); // only once anyway
        } // Fetches a single file


        function fetch(filename, weak) {
          // Strip path if this file references a bundled definition
          var idx = filename.lastIndexOf("google/protobuf/");

          if (idx > -1) {
            var altname = filename.substring(idx);
            if (altname in common) filename = altname;
          } // Skip if already loaded / attempted


          if (self.files.indexOf(filename) > -1) return;
          self.files.push(filename); // Shortcut bundled definitions

          if (filename in common) {
            if (sync) process(filename, common[filename]);else {
              ++queued;
              setTimeout(function () {
                --queued;
                process(filename, common[filename]);
              });
            }
            return;
          } // Otherwise fetch from disk or network


          if (sync) {
            var source;

            try {
              source = util.fs.readFileSync(filename).toString("utf8");
            } catch (err) {
              if (!weak) finish(err);
              return;
            }

            process(filename, source);
          } else {
            ++queued;
            util.fetch(filename, function (err, source) {
              --queued;
              /* istanbul ignore if */

              if (!callback) return; // terminated meanwhile

              if (err) {
                /* istanbul ignore else */
                if (!weak) finish(err);else if (!queued) // can't be covered reliably
                  finish(null, self);
                return;
              }

              process(filename, source);
            });
          }
        }

        var queued = 0; // Assembling the root namespace doesn't require working type
        // references anymore, so we can load everything in parallel

        if (util.isString(filename)) filename = [filename];

        for (var i = 0, resolved; i < filename.length; ++i) {
          if (resolved = self.resolvePath("", filename[i])) fetch(resolved);
        }

        if (sync) return self;
        if (!queued) finish(null, self);
        return undefined;
      }; // function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined

      /**
       * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
       * @function Root#load
       * @param {string|string[]} filename Names of one or multiple files to load
       * @param {LoadCallback} callback Callback function
       * @returns {undefined}
       * @variation 2
       */
      // function load(filename:string, callback:LoadCallback):undefined

      /**
       * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.
       * @function Root#load
       * @param {string|string[]} filename Names of one or multiple files to load
       * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
       * @returns {Promise<Root>} Promise
       * @variation 3
       */
      // function load(filename:string, [options:IParseOptions]):Promise<Root>

      /**
       * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).
       * @function Root#loadSync
       * @param {string|string[]} filename Names of one or multiple files to load
       * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
       * @returns {Root} Root namespace
       * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
       */


      Root.prototype.loadSync = function loadSync(filename, options) {
        if (!util.isNode) throw Error("not supported");
        return this.load(filename, options, SYNC);
      };
      /**
       * @override
       */


      Root.prototype.resolveAll = function resolveAll() {
        if (this.deferred.length) throw Error("unresolvable extensions: " + this.deferred.map(function (field) {
          return "'extend " + field.extend + "' in " + field.parent.fullName;
        }).join(", "));
        return Namespace.prototype.resolveAll.call(this);
      }; // only uppercased (and thus conflict-free) children are exposed, see below


      var exposeRe = /^[A-Z]/;
      /**
       * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.
       * @param {Root} root Root instance
       * @param {Field} field Declaring extension field witin the declaring type
       * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise
       * @inner
       * @ignore
       */

      function tryHandleExtension(root, field) {
        var extendedType = field.parent.lookup(field.extend);

        if (extendedType) {
          var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);
          sisterField.declaringField = field;
          field.extensionField = sisterField;
          extendedType.add(sisterField);
          return true;
        }

        return false;
      }
      /**
       * Called when any object is added to this root or its sub-namespaces.
       * @param {ReflectionObject} object Object added
       * @returns {undefined}
       * @private
       */


      Root.prototype._handleAdd = function _handleAdd(object) {
        if (object instanceof Field) {
          if (
          /* an extension field (implies not part of a oneof) */
          object.extend !== undefined &&
          /* not already handled */
          !object.extensionField) if (!tryHandleExtension(this, object)) this.deferred.push(object);
        } else if (object instanceof Enum) {
          if (exposeRe.test(object.name)) object.parent[object.name] = object.values; // expose enum values as property of its parent
        } else if (!(object instanceof OneOf))
          /* everything else is a namespace */
          {
            if (object instanceof Type) // Try to handle any deferred extensions
              for (var i = 0; i < this.deferred.length;) {
                if (tryHandleExtension(this, this.deferred[i])) this.deferred.splice(i, 1);else ++i;
              }

            for (var j = 0; j <
            /* initializes */
            object.nestedArray.length; ++j) {
              // recurse into the namespace
              this._handleAdd(object._nestedArray[j]);
            }

            if (exposeRe.test(object.name)) object.parent[object.name] = object; // expose namespace as property of its parent
          } // The above also adds uppercased (and thus conflict-free) nested types, services and enums as
        // properties of namespaces just like static code does. This allows using a .d.ts generated for
        // a static module with reflection-based solutions where the condition is met.

      };
      /**
       * Called when any object is removed from this root or its sub-namespaces.
       * @param {ReflectionObject} object Object removed
       * @returns {undefined}
       * @private
       */


      Root.prototype._handleRemove = function _handleRemove(object) {
        if (object instanceof Field) {
          if (
          /* an extension field */
          object.extend !== undefined) {
            if (
            /* already handled */
            object.extensionField) {
              // remove its sister field
              object.extensionField.parent.remove(object.extensionField);
              object.extensionField = null;
            } else {
              // cancel the extension
              var index = this.deferred.indexOf(object);
              /* istanbul ignore else */

              if (index > -1) this.deferred.splice(index, 1);
            }
          }
        } else if (object instanceof Enum) {
          if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose enum values
        } else if (object instanceof Namespace) {
          for (var i = 0; i <
          /* initializes */
          object.nestedArray.length; ++i) {
            // recurse into the namespace
            this._handleRemove(object._nestedArray[i]);
          }

          if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose namespaces
        }
      }; // Sets up cyclic dependencies (called in index-light)


      Root._configure = function (Type_, parse_, common_) {
        Type = Type_;
        parse = parse_;
        common = common_;
      };
    }, {
      "15": 15,
      "16": 16,
      "23": 23,
      "25": 25,
      "37": 37
    }],
    30: [function (require, module, exports) {
      "use strict";

      module.exports = {};
      /**
       * Named roots.
       * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
       * Can also be used manually to make roots available accross modules.
       * @name roots
       * @type {Object.<string,Root>}
       * @example
       * // pbjs -r myroot -o compiled.js ...
       *
       * // in another module:
       * require("./compiled.js");
       *
       * // in any subsequent module:
       * var root = protobuf.roots["myroot"];
       */
    }, {}],
    31: [function (require, module, exports) {
      "use strict";
      /**
       * Streaming RPC helpers.
       * @namespace
       */

      var rpc = exports;
      /**
       * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
       * @typedef RPCImpl
       * @type {function}
       * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
       * @param {Uint8Array} requestData Request data
       * @param {RPCImplCallback} callback Callback function
       * @returns {undefined}
       * @example
       * function rpcImpl(method, requestData, callback) {
       *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
       *         throw Error("no such method");
       *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
       *         callback(err, responseData);
       *     });
       * }
       */

      /**
       * Node-style callback as used by {@link RPCImpl}.
       * @typedef RPCImplCallback
       * @type {function}
       * @param {Error|null} error Error, if any, otherwise `null`
       * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
       * @returns {undefined}
       */

      rpc.Service = require(32);
    }, {
      "32": 32
    }],
    32: [function (require, module, exports) {
      "use strict";

      module.exports = Service;

      var util = require(39); // Extends EventEmitter


      (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
      /**
       * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
       *
       * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
       * @typedef rpc.ServiceMethodCallback
       * @template TRes extends Message<TRes>
       * @type {function}
       * @param {Error|null} error Error, if any
       * @param {TRes} [response] Response message
       * @returns {undefined}
       */

      /**
       * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
       * @typedef rpc.ServiceMethod
       * @template TReq extends Message<TReq>
       * @template TRes extends Message<TRes>
       * @type {function}
       * @param {TReq|Properties<TReq>} request Request message or plain object
       * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
       * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
       */

      /**
       * Constructs a new RPC service instance.
       * @classdesc An RPC service as returned by {@link Service#create}.
       * @exports rpc.Service
       * @extends util.EventEmitter
       * @constructor
       * @param {RPCImpl} rpcImpl RPC implementation
       * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
       * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
       */

      function Service(rpcImpl, requestDelimited, responseDelimited) {
        if (typeof rpcImpl !== "function") throw TypeError("rpcImpl must be a function");
        util.EventEmitter.call(this);
        /**
         * RPC implementation. Becomes `null` once the service is ended.
         * @type {RPCImpl|null}
         */

        this.rpcImpl = rpcImpl;
        /**
         * Whether requests are length-delimited.
         * @type {boolean}
         */

        this.requestDelimited = Boolean(requestDelimited);
        /**
         * Whether responses are length-delimited.
         * @type {boolean}
         */

        this.responseDelimited = Boolean(responseDelimited);
      }
      /**
       * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
       * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
       * @param {Constructor<TReq>} requestCtor Request constructor
       * @param {Constructor<TRes>} responseCtor Response constructor
       * @param {TReq|Properties<TReq>} request Request message or plain object
       * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
       * @returns {undefined}
       * @template TReq extends Message<TReq>
       * @template TRes extends Message<TRes>
       */


      Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
        if (!request) throw TypeError("request must be specified");
        var self = this;
        if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

        if (!self.rpcImpl) {
          setTimeout(function () {
            callback(Error("already ended"));
          }, 0);
          return undefined;
        }

        try {
          return self.rpcImpl(method, requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(), function rpcCallback(err, response) {
            if (err) {
              self.emit("error", err, method);
              return callback(err);
            }

            if (response === null) {
              self.end(
              /* endedByRPC */
              true);
              return undefined;
            }

            if (!(response instanceof responseCtor)) {
              try {
                response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
              } catch (err) {
                self.emit("error", err, method);
                return callback(err);
              }
            }

            self.emit("data", response, method);
            return callback(null, response);
          });
        } catch (err) {
          self.emit("error", err, method);
          setTimeout(function () {
            callback(err);
          }, 0);
          return undefined;
        }
      };
      /**
       * Ends this service and emits the `end` event.
       * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
       * @returns {rpc.Service} `this`
       */


      Service.prototype.end = function end(endedByRPC) {
        if (this.rpcImpl) {
          if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
          this.rpcImpl = null;
          this.emit("end").off();
        }

        return this;
      };
    }, {
      "39": 39
    }],
    33: [function (require, module, exports) {
      "use strict";

      module.exports = Service; // extends Namespace

      var Namespace = require(23);

      ((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";

      var Method = require(22),
          util = require(37),
          rpc = require(31);
      /**
       * Constructs a new service instance.
       * @classdesc Reflected service.
       * @extends NamespaceBase
       * @constructor
       * @param {string} name Service name
       * @param {Object.<string,*>} [options] Service options
       * @throws {TypeError} If arguments are invalid
       */


      function Service(name, options) {
        Namespace.call(this, name, options);
        /**
         * Service methods.
         * @type {Object.<string,Method>}
         */

        this.methods = {}; // toJSON, marker

        /**
         * Cached methods as an array.
         * @type {Method[]|null}
         * @private
         */

        this._methodsArray = null;
      }
      /**
       * Service descriptor.
       * @interface IService
       * @extends INamespace
       * @property {Object.<string,IMethod>} methods Method descriptors
       */

      /**
       * Constructs a service from a service descriptor.
       * @param {string} name Service name
       * @param {IService} json Service descriptor
       * @returns {Service} Created service
       * @throws {TypeError} If arguments are invalid
       */


      Service.fromJSON = function fromJSON(name, json) {
        var service = new Service(name, json.options);
        /* istanbul ignore else */

        if (json.methods) for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i) {
          service.add(Method.fromJSON(names[i], json.methods[names[i]]));
        }
        if (json.nested) service.addJSON(json.nested);
        service.comment = json.comment;
        return service;
      };
      /**
       * Converts this service to a service descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {IService} Service descriptor
       */


      Service.prototype.toJSON = function toJSON(toJSONOptions) {
        var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
        var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
        return util.toObject(["options", inherited && inherited.options || undefined, "methods", Namespace.arrayToJSON(this.methodsArray, toJSONOptions) ||
        /* istanbul ignore next */
        {}, "nested", inherited && inherited.nested || undefined, "comment", keepComments ? this.comment : undefined]);
      };
      /**
       * Methods of this service as an array for iteration.
       * @name Service#methodsArray
       * @type {Method[]}
       * @readonly
       */


      Object.defineProperty(Service.prototype, "methodsArray", {
        get: function get() {
          return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
        }
      });

      function clearCache(service) {
        service._methodsArray = null;
        return service;
      }
      /**
       * @override
       */


      Service.prototype.get = function get(name) {
        return this.methods[name] || Namespace.prototype.get.call(this, name);
      };
      /**
       * @override
       */


      Service.prototype.resolveAll = function resolveAll() {
        var methods = this.methodsArray;

        for (var i = 0; i < methods.length; ++i) {
          methods[i].resolve();
        }

        return Namespace.prototype.resolve.call(this);
      };
      /**
       * @override
       */


      Service.prototype.add = function add(object) {
        /* istanbul ignore if */
        if (this.get(object.name)) throw Error("duplicate name '" + object.name + "' in " + this);

        if (object instanceof Method) {
          this.methods[object.name] = object;
          object.parent = this;
          return clearCache(this);
        }

        return Namespace.prototype.add.call(this, object);
      };
      /**
       * @override
       */


      Service.prototype.remove = function remove(object) {
        if (object instanceof Method) {
          /* istanbul ignore if */
          if (this.methods[object.name] !== object) throw Error(object + " is not a member of " + this);
          delete this.methods[object.name];
          object.parent = null;
          return clearCache(this);
        }

        return Namespace.prototype.remove.call(this, object);
      };
      /**
       * Creates a runtime service using the specified rpc implementation.
       * @param {RPCImpl} rpcImpl RPC implementation
       * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
       * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
       * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.
       */


      Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
        var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);

        for (var i = 0, method; i <
        /* initializes */
        this.methodsArray.length; ++i) {
          var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
          rpcService[methodName] = util.codegen(["r", "c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
            m: method,
            q: method.resolvedRequestType.ctor,
            s: method.resolvedResponseType.ctor
          });
        }

        return rpcService;
      };
    }, {
      "22": 22,
      "23": 23,
      "31": 31,
      "37": 37
    }],
    34: [function (require, module, exports) {
      "use strict";

      module.exports = tokenize;
      var delimRe = /[\s{}=;:[\],'"()<>]/g,
          stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,
          stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;
      var setCommentRe = /^ *[*/]+ */,
          setCommentAltRe = /^\s*\*?\/*/,
          setCommentSplitRe = /\n/g,
          whitespaceRe = /\s/,
          unescapeRe = /\\(.?)/g;
      var unescapeMap = {
        "0": "\0",
        "r": "\r",
        "n": "\n",
        "t": "\t"
      };
      /**
       * Unescapes a string.
       * @param {string} str String to unescape
       * @returns {string} Unescaped string
       * @property {Object.<string,string>} map Special characters map
       * @memberof tokenize
       */

      function unescape(str) {
        return str.replace(unescapeRe, function ($0, $1) {
          switch ($1) {
            case "\\":
            case "":
              return $1;

            default:
              return unescapeMap[$1] || "";
          }
        });
      }

      tokenize.unescape = unescape;
      /**
       * Gets the next token and advances.
       * @typedef TokenizerHandleNext
       * @type {function}
       * @returns {string|null} Next token or `null` on eof
       */

      /**
       * Peeks for the next token.
       * @typedef TokenizerHandlePeek
       * @type {function}
       * @returns {string|null} Next token or `null` on eof
       */

      /**
       * Pushes a token back to the stack.
       * @typedef TokenizerHandlePush
       * @type {function}
       * @param {string} token Token
       * @returns {undefined}
       */

      /**
       * Skips the next token.
       * @typedef TokenizerHandleSkip
       * @type {function}
       * @param {string} expected Expected token
       * @param {boolean} [optional=false] If optional
       * @returns {boolean} Whether the token matched
       * @throws {Error} If the token didn't match and is not optional
       */

      /**
       * Gets the comment on the previous line or, alternatively, the line comment on the specified line.
       * @typedef TokenizerHandleCmnt
       * @type {function}
       * @param {number} [line] Line number
       * @returns {string|null} Comment text or `null` if none
       */

      /**
       * Handle object returned from {@link tokenize}.
       * @interface ITokenizerHandle
       * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)
       * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)
       * @property {TokenizerHandlePush} push Pushes a token back to the stack
       * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws
       * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any
       * @property {number} line Current line number
       */

      /**
       * Tokenizes the given .proto source and returns an object with useful utility functions.
       * @param {string} source Source contents
       * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.
       * @returns {ITokenizerHandle} Tokenizer handle
       */

      function tokenize(source, alternateCommentMode) {
        /* eslint-disable callback-return */
        source = source.toString();
        var offset = 0,
            length = source.length,
            line = 1,
            commentType = null,
            commentText = null,
            commentLine = 0,
            commentLineEmpty = false;
        var stack = [];
        var stringDelim = null;
        /* istanbul ignore next */

        /**
         * Creates an error for illegal syntax.
         * @param {string} subject Subject
         * @returns {Error} Error created
         * @inner
         */

        function illegal(subject) {
          return Error("illegal " + subject + " (line " + line + ")");
        }
        /**
         * Reads a string till its end.
         * @returns {string} String read
         * @inner
         */


        function readString() {
          var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
          re.lastIndex = offset - 1;
          var match = re.exec(source);
          if (!match) throw illegal("string");
          offset = re.lastIndex;
          push(stringDelim);
          stringDelim = null;
          return unescape(match[1]);
        }
        /**
         * Gets the character at `pos` within the source.
         * @param {number} pos Position
         * @returns {string} Character
         * @inner
         */


        function charAt(pos) {
          return source.charAt(pos);
        }
        /**
         * Sets the current comment text.
         * @param {number} start Start offset
         * @param {number} end End offset
         * @returns {undefined}
         * @inner
         */


        function setComment(start, end) {
          commentType = source.charAt(start++);
          commentLine = line;
          commentLineEmpty = false;
          var lookback;

          if (alternateCommentMode) {
            lookback = 2; // alternate comment parsing: "//" or "/*"
          } else {
            lookback = 3; // "///" or "/**"
          }

          var commentOffset = start - lookback,
              c;

          do {
            if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === "\n") {
              commentLineEmpty = true;
              break;
            }
          } while (c === " " || c === "\t");

          var lines = source.substring(start, end).split(setCommentSplitRe);

          for (var i = 0; i < lines.length; ++i) {
            lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "").trim();
          }

          commentText = lines.join("\n").trim();
        }

        function isDoubleSlashCommentLine(startOffset) {
          var endOffset = findEndOfLine(startOffset); // see if remaining line matches comment pattern

          var lineText = source.substring(startOffset, endOffset); // look for 1 or 2 slashes since startOffset would already point past
          // the first slash that started the comment.

          var isComment = /^\s*\/{1,2}/.test(lineText);
          return isComment;
        }

        function findEndOfLine(cursor) {
          // find end of cursor's line
          var endOffset = cursor;

          while (endOffset < length && charAt(endOffset) !== "\n") {
            endOffset++;
          }

          return endOffset;
        }
        /**
         * Obtains the next token.
         * @returns {string|null} Next token or `null` on eof
         * @inner
         */


        function next() {
          if (stack.length > 0) return stack.shift();
          if (stringDelim) return readString();
          var repeat, prev, curr, start, isDoc;

          do {
            if (offset === length) return null;
            repeat = false;

            while (whitespaceRe.test(curr = charAt(offset))) {
              if (curr === "\n") ++line;
              if (++offset === length) return null;
            }

            if (charAt(offset) === "/") {
              if (++offset === length) {
                throw illegal("comment");
              }

              if (charAt(offset) === "/") {
                // Line
                if (!alternateCommentMode) {
                  // check for triple-slash comment
                  isDoc = charAt(start = offset + 1) === "/";

                  while (charAt(++offset) !== "\n") {
                    if (offset === length) {
                      return null;
                    }
                  }

                  ++offset;

                  if (isDoc) {
                    setComment(start, offset - 1);
                  }

                  ++line;
                  repeat = true;
                } else {
                  // check for double-slash comments, consolidating consecutive lines
                  start = offset;
                  isDoc = false;

                  if (isDoubleSlashCommentLine(offset)) {
                    isDoc = true;

                    do {
                      offset = findEndOfLine(offset);

                      if (offset === length) {
                        break;
                      }

                      offset++;
                    } while (isDoubleSlashCommentLine(offset));
                  } else {
                    offset = Math.min(length, findEndOfLine(offset) + 1);
                  }

                  if (isDoc) {
                    setComment(start, offset);
                  }

                  line++;
                  repeat = true;
                }
              } else if ((curr = charAt(offset)) === "*") {
                /* Block */
                // check for /** (regular comment mode) or /* (alternate comment mode)
                start = offset + 1;
                isDoc = alternateCommentMode || charAt(start) === "*";

                do {
                  if (curr === "\n") {
                    ++line;
                  }

                  if (++offset === length) {
                    throw illegal("comment");
                  }

                  prev = curr;
                  curr = charAt(offset);
                } while (prev !== "*" || curr !== "/");

                ++offset;

                if (isDoc) {
                  setComment(start, offset - 2);
                }

                repeat = true;
              } else {
                return "/";
              }
            }
          } while (repeat); // offset !== length if we got here


          var end = offset;
          delimRe.lastIndex = 0;
          var delim = delimRe.test(charAt(end++));
          if (!delim) while (end < length && !delimRe.test(charAt(end))) {
            ++end;
          }
          var token = source.substring(offset, offset = end);
          if (token === "\"" || token === "'") stringDelim = token;
          return token;
        }
        /**
         * Pushes a token back to the stack.
         * @param {string} token Token
         * @returns {undefined}
         * @inner
         */


        function push(token) {
          stack.push(token);
        }
        /**
         * Peeks for the next token.
         * @returns {string|null} Token or `null` on eof
         * @inner
         */


        function peek() {
          if (!stack.length) {
            var token = next();
            if (token === null) return null;
            push(token);
          }

          return stack[0];
        }
        /**
         * Skips a token.
         * @param {string} expected Expected token
         * @param {boolean} [optional=false] Whether the token is optional
         * @returns {boolean} `true` when skipped, `false` if not
         * @throws {Error} When a required token is not present
         * @inner
         */


        function skip(expected, optional) {
          var actual = peek(),
              equals = actual === expected;

          if (equals) {
            next();
            return true;
          }

          if (!optional) throw illegal("token '" + actual + "', '" + expected + "' expected");
          return false;
        }
        /**
         * Gets a comment.
         * @param {number} [trailingLine] Line number if looking for a trailing comment
         * @returns {string|null} Comment text
         * @inner
         */


        function cmnt(trailingLine) {
          var ret = null;

          if (trailingLine === undefined) {
            if (commentLine === line - 1 && (alternateCommentMode || commentType === "*" || commentLineEmpty)) {
              ret = commentText;
            }
          } else {
            /* istanbul ignore else */
            if (commentLine < trailingLine) {
              peek();
            }

            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === "/")) {
              ret = commentText;
            }
          }

          return ret;
        }

        return Object.defineProperty({
          next: next,
          peek: peek,
          push: push,
          skip: skip,
          cmnt: cmnt
        }, "line", {
          get: function get() {
            return line;
          }
        });
        /* eslint-enable callback-return */
      }
    }, {}],
    35: [function (require, module, exports) {
      "use strict";

      module.exports = Type; // extends Namespace

      var Namespace = require(23);

      ((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";

      var Enum = require(15),
          OneOf = require(25),
          Field = require(16),
          MapField = require(20),
          Service = require(33),
          Message = require(21),
          Reader = require(27),
          Writer = require(42),
          util = require(37),
          encoder = require(14),
          decoder = require(13),
          verifier = require(40),
          converter = require(12),
          wrappers = require(41);
      /**
       * Constructs a new reflected message type instance.
       * @classdesc Reflected message type.
       * @extends NamespaceBase
       * @constructor
       * @param {string} name Message name
       * @param {Object.<string,*>} [options] Declared options
       */


      function Type(name, options) {
        Namespace.call(this, name, options);
        /**
         * Message fields.
         * @type {Object.<string,Field>}
         */

        this.fields = {}; // toJSON, marker

        /**
         * Oneofs declared within this namespace, if any.
         * @type {Object.<string,OneOf>}
         */

        this.oneofs = undefined; // toJSON

        /**
         * Extension ranges, if any.
         * @type {number[][]}
         */

        this.extensions = undefined; // toJSON

        /**
         * Reserved ranges, if any.
         * @type {Array.<number[]|string>}
         */

        this.reserved = undefined; // toJSON

        /*?
         * Whether this type is a legacy group.
         * @type {boolean|undefined}
         */

        this.group = undefined; // toJSON

        /**
         * Cached fields by id.
         * @type {Object.<number,Field>|null}
         * @private
         */

        this._fieldsById = null;
        /**
         * Cached fields as an array.
         * @type {Field[]|null}
         * @private
         */

        this._fieldsArray = null;
        /**
         * Cached oneofs as an array.
         * @type {OneOf[]|null}
         * @private
         */

        this._oneofsArray = null;
        /**
         * Cached constructor.
         * @type {Constructor<{}>}
         * @private
         */

        this._ctor = null;
      }

      Object.defineProperties(Type.prototype, {
        /**
         * Message fields by id.
         * @name Type#fieldsById
         * @type {Object.<number,Field>}
         * @readonly
         */
        fieldsById: {
          get: function get() {
            /* istanbul ignore if */
            if (this._fieldsById) return this._fieldsById;
            this._fieldsById = {};

            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
              var field = this.fields[names[i]],
                  id = field.id;
              /* istanbul ignore if */

              if (this._fieldsById[id]) throw Error("duplicate id " + id + " in " + this);
              this._fieldsById[id] = field;
            }

            return this._fieldsById;
          }
        },

        /**
         * Fields of this message as an array for iteration.
         * @name Type#fieldsArray
         * @type {Field[]}
         * @readonly
         */
        fieldsArray: {
          get: function get() {
            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
          }
        },

        /**
         * Oneofs of this message as an array for iteration.
         * @name Type#oneofsArray
         * @type {OneOf[]}
         * @readonly
         */
        oneofsArray: {
          get: function get() {
            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
          }
        },

        /**
         * The registered constructor, if any registered, otherwise a generic constructor.
         * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.
         * @name Type#ctor
         * @type {Constructor<{}>}
         */
        ctor: {
          get: function get() {
            return this._ctor || (this.ctor = Type.generateConstructor(this)());
          },
          set: function set(ctor) {
            // Ensure proper prototype
            var prototype = ctor.prototype;

            if (!(prototype instanceof Message)) {
              (ctor.prototype = new Message()).constructor = ctor;
              util.merge(ctor.prototype, prototype);
            } // Classes and messages reference their reflected type


            ctor.$type = ctor.prototype.$type = this; // Mix in static methods

            util.merge(ctor, Message, true);
            this._ctor = ctor; // Messages have non-enumerable default values on their prototype

            var i = 0;

            for (; i <
            /* initializes */
            this.fieldsArray.length; ++i) {
              this._fieldsArray[i].resolve();
            } // ensures a proper value
            // Messages have non-enumerable getters and setters for each virtual oneof field


            var ctorProperties = {};

            for (i = 0; i <
            /* initializes */
            this.oneofsArray.length; ++i) {
              ctorProperties[this._oneofsArray[i].resolve().name] = {
                get: util.oneOfGetter(this._oneofsArray[i].oneof),
                set: util.oneOfSetter(this._oneofsArray[i].oneof)
              };
            }

            if (i) Object.defineProperties(ctor.prototype, ctorProperties);
          }
        }
      });
      /**
       * Generates a constructor function for the specified type.
       * @param {Type} mtype Message type
       * @returns {Codegen} Codegen instance
       */

      Type.generateConstructor = function generateConstructor(mtype) {
        /* eslint-disable no-unexpected-multiline */
        var gen = util.codegen(["p"], mtype.name); // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype

        for (var i = 0, field; i < mtype.fieldsArray.length; ++i) {
          if ((field = mtype._fieldsArray[i]).map) gen("this%s={}", util.safeProp(field.name));else if (field.repeated) gen("this%s=[]", util.safeProp(field.name));
        }

        return gen("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)") // omit undefined or null
        ("this[ks[i]]=p[ks[i]]");
        /* eslint-enable no-unexpected-multiline */
      };

      function clearCache(type) {
        type._fieldsById = type._fieldsArray = type._oneofsArray = null;
        delete type.encode;
        delete type.decode;
        delete type.verify;
        return type;
      }
      /**
       * Message type descriptor.
       * @interface IType
       * @extends INamespace
       * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors
       * @property {Object.<string,IField>} fields Field descriptors
       * @property {number[][]} [extensions] Extension ranges
       * @property {number[][]} [reserved] Reserved ranges
       * @property {boolean} [group=false] Whether a legacy group or not
       */

      /**
       * Creates a message type from a message type descriptor.
       * @param {string} name Message name
       * @param {IType} json Message type descriptor
       * @returns {Type} Created message type
       */


      Type.fromJSON = function fromJSON(name, json) {
        var type = new Type(name, json.options);
        type.extensions = json.extensions;
        type.reserved = json.reserved;
        var names = Object.keys(json.fields),
            i = 0;

        for (; i < names.length; ++i) {
          type.add((typeof json.fields[names[i]].keyType !== "undefined" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]]));
        }

        if (json.oneofs) for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i) {
          type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
        }
        if (json.nested) for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
          var nested = json.nested[names[i]];
          type.add( // most to least likely
          (nested.id !== undefined ? Field.fromJSON : nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : Namespace.fromJSON)(names[i], nested));
        }
        if (json.extensions && json.extensions.length) type.extensions = json.extensions;
        if (json.reserved && json.reserved.length) type.reserved = json.reserved;
        if (json.group) type.group = true;
        if (json.comment) type.comment = json.comment;
        return type;
      };
      /**
       * Converts this message type to a message type descriptor.
       * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
       * @returns {IType} Message type descriptor
       */


      Type.prototype.toJSON = function toJSON(toJSONOptions) {
        var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
        var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
        return util.toObject(["options", inherited && inherited.options || undefined, "oneofs", Namespace.arrayToJSON(this.oneofsArray, toJSONOptions), "fields", Namespace.arrayToJSON(this.fieldsArray.filter(function (obj) {
          return !obj.declaringField;
        }), toJSONOptions) || {}, "extensions", this.extensions && this.extensions.length ? this.extensions : undefined, "reserved", this.reserved && this.reserved.length ? this.reserved : undefined, "group", this.group || undefined, "nested", inherited && inherited.nested || undefined, "comment", keepComments ? this.comment : undefined]);
      };
      /**
       * @override
       */


      Type.prototype.resolveAll = function resolveAll() {
        var fields = this.fieldsArray,
            i = 0;

        while (i < fields.length) {
          fields[i++].resolve();
        }

        var oneofs = this.oneofsArray;
        i = 0;

        while (i < oneofs.length) {
          oneofs[i++].resolve();
        }

        return Namespace.prototype.resolveAll.call(this);
      };
      /**
       * @override
       */


      Type.prototype.get = function get(name) {
        return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;
      };
      /**
       * Adds a nested object to this type.
       * @param {ReflectionObject} object Nested object to add
       * @returns {Type} `this`
       * @throws {TypeError} If arguments are invalid
       * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id
       */


      Type.prototype.add = function add(object) {
        if (this.get(object.name)) throw Error("duplicate name '" + object.name + "' in " + this);

        if (object instanceof Field && object.extend === undefined) {
          // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.
          // The root object takes care of adding distinct sister-fields to the respective extended
          // type instead.
          // avoids calling the getter if not absolutely necessary because it's called quite frequently
          if (this._fieldsById ?
          /* istanbul ignore next */
          this._fieldsById[object.id] : this.fieldsById[object.id]) throw Error("duplicate id " + object.id + " in " + this);
          if (this.isReservedId(object.id)) throw Error("id " + object.id + " is reserved in " + this);
          if (this.isReservedName(object.name)) throw Error("name '" + object.name + "' is reserved in " + this);
          if (object.parent) object.parent.remove(object);
          this.fields[object.name] = object;
          object.message = this;
          object.onAdd(this);
          return clearCache(this);
        }

        if (object instanceof OneOf) {
          if (!this.oneofs) this.oneofs = {};
          this.oneofs[object.name] = object;
          object.onAdd(this);
          return clearCache(this);
        }

        return Namespace.prototype.add.call(this, object);
      };
      /**
       * Removes a nested object from this type.
       * @param {ReflectionObject} object Nested object to remove
       * @returns {Type} `this`
       * @throws {TypeError} If arguments are invalid
       * @throws {Error} If `object` is not a member of this type
       */


      Type.prototype.remove = function remove(object) {
        if (object instanceof Field && object.extend === undefined) {
          // See Type#add for the reason why extension fields are excluded here.

          /* istanbul ignore if */
          if (!this.fields || this.fields[object.name] !== object) throw Error(object + " is not a member of " + this);
          delete this.fields[object.name];
          object.parent = null;
          object.onRemove(this);
          return clearCache(this);
        }

        if (object instanceof OneOf) {
          /* istanbul ignore if */
          if (!this.oneofs || this.oneofs[object.name] !== object) throw Error(object + " is not a member of " + this);
          delete this.oneofs[object.name];
          object.parent = null;
          object.onRemove(this);
          return clearCache(this);
        }

        return Namespace.prototype.remove.call(this, object);
      };
      /**
       * Tests if the specified id is reserved.
       * @param {number} id Id to test
       * @returns {boolean} `true` if reserved, otherwise `false`
       */


      Type.prototype.isReservedId = function isReservedId(id) {
        return Namespace.isReservedId(this.reserved, id);
      };
      /**
       * Tests if the specified name is reserved.
       * @param {string} name Name to test
       * @returns {boolean} `true` if reserved, otherwise `false`
       */


      Type.prototype.isReservedName = function isReservedName(name) {
        return Namespace.isReservedName(this.reserved, name);
      };
      /**
       * Creates a new message of this type using the specified properties.
       * @param {Object.<string,*>} [properties] Properties to set
       * @returns {Message<{}>} Message instance
       */


      Type.prototype.create = function create(properties) {
        return new this.ctor(properties);
      };
      /**
       * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.
       * @returns {Type} `this`
       */


      Type.prototype.setup = function setup() {
        // Sets up everything at once so that the prototype chain does not have to be re-evaluated
        // multiple times (V8, soft-deopt prototype-check).
        var fullName = this.fullName,
            types = [];

        for (var i = 0; i <
        /* initializes */
        this.fieldsArray.length; ++i) {
          types.push(this._fieldsArray[i].resolve().resolvedType);
        } // Replace setup methods with type-specific generated functions


        this.encode = encoder(this)({
          Writer: Writer,
          types: types,
          util: util
        });
        this.decode = decoder(this)({
          Reader: Reader,
          types: types,
          util: util
        });
        this.verify = verifier(this)({
          types: types,
          util: util
        });
        this.fromObject = converter.fromObject(this)({
          types: types,
          util: util
        });
        this.toObject = converter.toObject(this)({
          types: types,
          util: util
        }); // Inject custom wrappers for common types

        var wrapper = wrappers[fullName];

        if (wrapper) {
          var originalThis = Object.create(this); // if (wrapper.fromObject) {

          originalThis.fromObject = this.fromObject;
          this.fromObject = wrapper.fromObject.bind(originalThis); // }
          // if (wrapper.toObject) {

          originalThis.toObject = this.toObject;
          this.toObject = wrapper.toObject.bind(originalThis); // }
        }

        return this;
      };
      /**
       * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.
       * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
       * @param {Writer} [writer] Writer to encode to
       * @returns {Writer} writer
       */


      Type.prototype.encode = function encode_setup(message, writer) {
        return this.setup().encode(message, writer); // overrides this method
      };
      /**
       * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.
       * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
       * @param {Writer} [writer] Writer to encode to
       * @returns {Writer} writer
       */


      Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
      };
      /**
       * Decodes a message of this type.
       * @param {Reader|Uint8Array} reader Reader or buffer to decode from
       * @param {number} [length] Length of the message, if known beforehand
       * @returns {Message<{}>} Decoded message
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {util.ProtocolError<{}>} If required fields are missing
       */


      Type.prototype.decode = function decode_setup(reader, length) {
        return this.setup().decode(reader, length); // overrides this method
      };
      /**
       * Decodes a message of this type preceeded by its byte length as a varint.
       * @param {Reader|Uint8Array} reader Reader or buffer to decode from
       * @returns {Message<{}>} Decoded message
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {util.ProtocolError} If required fields are missing
       */


      Type.prototype.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof Reader)) reader = Reader.create(reader);
        return this.decode(reader, reader.uint32());
      };
      /**
       * Verifies that field values are valid and that required fields are present.
       * @param {Object.<string,*>} message Plain object to verify
       * @returns {null|string} `null` if valid, otherwise the reason why it is not
       */


      Type.prototype.verify = function verify_setup(message) {
        return this.setup().verify(message); // overrides this method
      };
      /**
       * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
       * @param {Object.<string,*>} object Plain object to convert
       * @returns {Message<{}>} Message instance
       */


      Type.prototype.fromObject = function fromObject(object) {
        return this.setup().fromObject(object);
      };
      /**
       * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.
       * @interface IConversionOptions
       * @property {Function} [longs] Long conversion type.
       * Valid values are `String` and `Number` (the global types).
       * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.
       * @property {Function} [enums] Enum value conversion type.
       * Only valid value is `String` (the global type).
       * Defaults to copy the present value, which is the numeric id.
       * @property {Function} [bytes] Bytes value conversion type.
       * Valid values are `Array` and (a base64 encoded) `String` (the global types).
       * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.
       * @property {boolean} [defaults=false] Also sets default values on the resulting object
       * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`
       * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`
       * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any
       * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings
       */

      /**
       * Creates a plain object from a message of this type. Also converts values to other types if specified.
       * @param {Message<{}>} message Message instance
       * @param {IConversionOptions} [options] Conversion options
       * @returns {Object.<string,*>} Plain object
       */


      Type.prototype.toObject = function toObject(message, options) {
        return this.setup().toObject(message, options);
      };
      /**
       * Decorator function as returned by {@link Type.d} (TypeScript).
       * @typedef TypeDecorator
       * @type {function}
       * @param {Constructor<T>} target Target constructor
       * @returns {undefined}
       * @template T extends Message<T>
       */

      /**
       * Type decorator (TypeScript).
       * @param {string} [typeName] Type name, defaults to the constructor's name
       * @returns {TypeDecorator<T>} Decorator function
       * @template T extends Message<T>
       */


      Type.d = function decorateType(typeName) {
        return function typeDecorator(target) {
          util.decorateType(target, typeName);
        };
      };
    }, {
      "12": 12,
      "13": 13,
      "14": 14,
      "15": 15,
      "16": 16,
      "20": 20,
      "21": 21,
      "23": 23,
      "25": 25,
      "27": 27,
      "33": 33,
      "37": 37,
      "40": 40,
      "41": 41,
      "42": 42
    }],
    36: [function (require, module, exports) {
      "use strict";
      /**
       * Common type constants.
       * @namespace
       */

      var types = exports;

      var util = require(37);

      var s = ["double", // 0
      "float", // 1
      "int32", // 2
      "uint32", // 3
      "sint32", // 4
      "fixed32", // 5
      "sfixed32", // 6
      "int64", // 7
      "uint64", // 8
      "sint64", // 9
      "fixed64", // 10
      "sfixed64", // 11
      "bool", // 12
      "string", // 13
      "bytes" // 14
      ];

      function bake(values, offset) {
        var i = 0,
            o = {};
        offset |= 0;

        while (i < values.length) {
          o[s[i + offset]] = values[i++];
        }

        return o;
      }
      /**
       * Basic type wire types.
       * @type {Object.<string,number>}
       * @const
       * @property {number} double=1 Fixed64 wire type
       * @property {number} float=5 Fixed32 wire type
       * @property {number} int32=0 Varint wire type
       * @property {number} uint32=0 Varint wire type
       * @property {number} sint32=0 Varint wire type
       * @property {number} fixed32=5 Fixed32 wire type
       * @property {number} sfixed32=5 Fixed32 wire type
       * @property {number} int64=0 Varint wire type
       * @property {number} uint64=0 Varint wire type
       * @property {number} sint64=0 Varint wire type
       * @property {number} fixed64=1 Fixed64 wire type
       * @property {number} sfixed64=1 Fixed64 wire type
       * @property {number} bool=0 Varint wire type
       * @property {number} string=2 Ldelim wire type
       * @property {number} bytes=2 Ldelim wire type
       */


      types.basic = bake([
      /* double   */
      1,
      /* float    */
      5,
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      5,
      /* sfixed32 */
      5,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1,
      /* bool     */
      0,
      /* string   */
      2,
      /* bytes    */
      2]);
      /**
       * Basic type defaults.
       * @type {Object.<string,*>}
       * @const
       * @property {number} double=0 Double default
       * @property {number} float=0 Float default
       * @property {number} int32=0 Int32 default
       * @property {number} uint32=0 Uint32 default
       * @property {number} sint32=0 Sint32 default
       * @property {number} fixed32=0 Fixed32 default
       * @property {number} sfixed32=0 Sfixed32 default
       * @property {number} int64=0 Int64 default
       * @property {number} uint64=0 Uint64 default
       * @property {number} sint64=0 Sint32 default
       * @property {number} fixed64=0 Fixed64 default
       * @property {number} sfixed64=0 Sfixed64 default
       * @property {boolean} bool=false Bool default
       * @property {string} string="" String default
       * @property {Array.<number>} bytes=Array(0) Bytes default
       * @property {null} message=null Message default
       */

      types.defaults = bake([
      /* double   */
      0,
      /* float    */
      0,
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      0,
      /* sfixed32 */
      0,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      0,
      /* sfixed64 */
      0,
      /* bool     */
      false,
      /* string   */
      "",
      /* bytes    */
      util.emptyArray,
      /* message  */
      null]);
      /**
       * Basic long type wire types.
       * @type {Object.<string,number>}
       * @const
       * @property {number} int64=0 Varint wire type
       * @property {number} uint64=0 Varint wire type
       * @property {number} sint64=0 Varint wire type
       * @property {number} fixed64=1 Fixed64 wire type
       * @property {number} sfixed64=1 Fixed64 wire type
       */

      types["long"] = bake([
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1], 7);
      /**
       * Allowed types for map keys with their associated wire type.
       * @type {Object.<string,number>}
       * @const
       * @property {number} int32=0 Varint wire type
       * @property {number} uint32=0 Varint wire type
       * @property {number} sint32=0 Varint wire type
       * @property {number} fixed32=5 Fixed32 wire type
       * @property {number} sfixed32=5 Fixed32 wire type
       * @property {number} int64=0 Varint wire type
       * @property {number} uint64=0 Varint wire type
       * @property {number} sint64=0 Varint wire type
       * @property {number} fixed64=1 Fixed64 wire type
       * @property {number} sfixed64=1 Fixed64 wire type
       * @property {number} bool=0 Varint wire type
       * @property {number} string=2 Ldelim wire type
       */

      types.mapKey = bake([
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      5,
      /* sfixed32 */
      5,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1,
      /* bool     */
      0,
      /* string   */
      2], 2);
      /**
       * Allowed types for packed repeated fields with their associated wire type.
       * @type {Object.<string,number>}
       * @const
       * @property {number} double=1 Fixed64 wire type
       * @property {number} float=5 Fixed32 wire type
       * @property {number} int32=0 Varint wire type
       * @property {number} uint32=0 Varint wire type
       * @property {number} sint32=0 Varint wire type
       * @property {number} fixed32=5 Fixed32 wire type
       * @property {number} sfixed32=5 Fixed32 wire type
       * @property {number} int64=0 Varint wire type
       * @property {number} uint64=0 Varint wire type
       * @property {number} sint64=0 Varint wire type
       * @property {number} fixed64=1 Fixed64 wire type
       * @property {number} sfixed64=1 Fixed64 wire type
       * @property {number} bool=0 Varint wire type
       */

      types.packed = bake([
      /* double   */
      1,
      /* float    */
      5,
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      5,
      /* sfixed32 */
      5,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1,
      /* bool     */
      0]);
    }, {
      "37": 37
    }],
    37: [function (require, module, exports) {
      "use strict";
      /**
       * Various utility functions.
       * @namespace
       */

      var util = module.exports = require(39);

      var roots = require(30);

      var Type, // cyclic
      Enum;
      util.codegen = require(3);
      util.fetch = require(5);
      util.path = require(8);
      /**
       * Node's fs module if available.
       * @type {Object.<string,*>}
       */

      util.fs = util.inquire("fs");
      /**
       * Converts an object's values to an array.
       * @param {Object.<string,*>} object Object to convert
       * @returns {Array.<*>} Converted array
       */

      util.toArray = function toArray(object) {
        if (object) {
          var keys = Object.keys(object),
              array = new Array(keys.length),
              index = 0;

          while (index < keys.length) {
            array[index] = object[keys[index++]];
          }

          return array;
        }

        return [];
      };
      /**
       * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.
       * @param {Array.<*>} array Array to convert
       * @returns {Object.<string,*>} Converted object
       */


      util.toObject = function toObject(array) {
        var object = {},
            index = 0;

        while (index < array.length) {
          var key = array[index++],
              val = array[index++];
          if (val !== undefined) object[key] = val;
        }

        return object;
      };

      var safePropBackslashRe = /\\/g,
          safePropQuoteRe = /"/g;
      /**
       * Tests whether the specified name is a reserved word in JS.
       * @param {string} name Name to test
       * @returns {boolean} `true` if reserved, otherwise `false`
       */

      util.isReserved = function isReserved(name) {
        return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
      };
      /**
       * Returns a safe property accessor for the specified property name.
       * @param {string} prop Property name
       * @returns {string} Safe accessor
       */


      util.safeProp = function safeProp(prop) {
        if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop)) return "[\"" + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, "\\\"") + "\"]";
        return "." + prop;
      };
      /**
       * Converts the first character of a string to upper case.
       * @param {string} str String to convert
       * @returns {string} Converted string
       */


      util.ucFirst = function ucFirst(str) {
        return str.charAt(0).toUpperCase() + str.substring(1);
      };

      var camelCaseRe = /_([a-z])/g;
      /**
       * Converts a string to camel case.
       * @param {string} str String to convert
       * @returns {string} Converted string
       */

      util.camelCase = function camelCase(str) {
        return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function ($0, $1) {
          return $1.toUpperCase();
        });
      };
      /**
       * Compares reflected fields by id.
       * @param {Field} a First field
       * @param {Field} b Second field
       * @returns {number} Comparison value
       */


      util.compareFieldsById = function compareFieldsById(a, b) {
        return a.id - b.id;
      };
      /**
       * Decorator helper for types (TypeScript).
       * @param {Constructor<T>} ctor Constructor function
       * @param {string} [typeName] Type name, defaults to the constructor's name
       * @returns {Type} Reflected type
       * @template T extends Message<T>
       * @property {Root} root Decorators root
       */


      util.decorateType = function decorateType(ctor, typeName) {
        /* istanbul ignore if */
        if (ctor.$type) {
          if (typeName && ctor.$type.name !== typeName) {
            util.decorateRoot.remove(ctor.$type);
            ctor.$type.name = typeName;
            util.decorateRoot.add(ctor.$type);
          }

          return ctor.$type;
        }
        /* istanbul ignore next */


        if (!Type) Type = require(35);
        var type = new Type(typeName || ctor.name);
        util.decorateRoot.add(type);
        type.ctor = ctor; // sets up .encode, .decode etc.

        Object.defineProperty(ctor, "$type", {
          value: type,
          enumerable: false
        });
        Object.defineProperty(ctor.prototype, "$type", {
          value: type,
          enumerable: false
        });
        return type;
      };

      var decorateEnumIndex = 0;
      /**
       * Decorator helper for enums (TypeScript).
       * @param {Object} object Enum object
       * @returns {Enum} Reflected enum
       */

      util.decorateEnum = function decorateEnum(object) {
        /* istanbul ignore if */
        if (object.$type) return object.$type;
        /* istanbul ignore next */

        if (!Enum) Enum = require(15);
        var enm = new Enum("Enum" + decorateEnumIndex++, object);
        util.decorateRoot.add(enm);
        Object.defineProperty(object, "$type", {
          value: enm,
          enumerable: false
        });
        return enm;
      };
      /**
       * Decorator root (TypeScript).
       * @name util.decorateRoot
       * @type {Root}
       * @readonly
       */


      Object.defineProperty(util, "decorateRoot", {
        get: function get() {
          return roots["decorated"] || (roots["decorated"] = new (require(29))());
        }
      });
    }, {
      "15": 15,
      "29": 29,
      "3": 3,
      "30": 30,
      "35": 35,
      "39": 39,
      "5": 5,
      "8": 8
    }],
    38: [function (require, module, exports) {
      "use strict";

      module.exports = LongBits;

      var util = require(39);
      /**
       * Constructs new long bits.
       * @classdesc Helper class for working with the low and high bits of a 64 bit value.
       * @memberof util
       * @constructor
       * @param {number} lo Low 32 bits, unsigned
       * @param {number} hi High 32 bits, unsigned
       */


      function LongBits(lo, hi) {
        // note that the casts below are theoretically unnecessary as of today, but older statically
        // generated converter code might still call the ctor with signed 32bits. kept for compat.

        /**
         * Low bits.
         * @type {number}
         */
        this.lo = lo >>> 0;
        /**
         * High bits.
         * @type {number}
         */

        this.hi = hi >>> 0;
      }
      /**
       * Zero bits.
       * @memberof util.LongBits
       * @type {util.LongBits}
       */


      var zero = LongBits.zero = new LongBits(0, 0);

      zero.toNumber = function () {
        return 0;
      };

      zero.zzEncode = zero.zzDecode = function () {
        return this;
      };

      zero.length = function () {
        return 1;
      };
      /**
       * Zero hash.
       * @memberof util.LongBits
       * @type {string}
       */


      var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
      /**
       * Constructs new long bits from the specified number.
       * @param {number} value Value
       * @returns {util.LongBits} Instance
       */

      LongBits.fromNumber = function fromNumber(value) {
        if (value === 0) return zero;
        var sign = value < 0;
        if (sign) value = -value;
        var lo = value >>> 0,
            hi = (value - lo) / 4294967296 >>> 0;

        if (sign) {
          hi = ~hi >>> 0;
          lo = ~lo >>> 0;

          if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295) hi = 0;
          }
        }

        return new LongBits(lo, hi);
      };
      /**
       * Constructs new long bits from a number, long or string.
       * @param {Long|number|string} value Value
       * @returns {util.LongBits} Instance
       */


      LongBits.from = function from(value) {
        if (typeof value === "number") return LongBits.fromNumber(value);

        if (util.isString(value)) {
          /* istanbul ignore else */
          if (util.Long) value = util.Long.fromString(value);else return LongBits.fromNumber(parseInt(value, 10));
        }

        return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
      };
      /**
       * Converts this long bits to a possibly unsafe JavaScript number.
       * @param {boolean} [unsigned=false] Whether unsigned or not
       * @returns {number} Possibly unsafe number
       */


      LongBits.prototype.toNumber = function toNumber(unsigned) {
        if (!unsigned && this.hi >>> 31) {
          var lo = ~this.lo + 1 >>> 0,
              hi = ~this.hi >>> 0;
          if (!lo) hi = hi + 1 >>> 0;
          return -(lo + hi * 4294967296);
        }

        return this.lo + this.hi * 4294967296;
      };
      /**
       * Converts this long bits to a long.
       * @param {boolean} [unsigned=false] Whether unsigned or not
       * @returns {Long} Long
       */


      LongBits.prototype.toLong = function toLong(unsigned) {
        return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
        /* istanbul ignore next */
        : {
          low: this.lo | 0,
          high: this.hi | 0,
          unsigned: Boolean(unsigned)
        };
      };

      var charCodeAt = String.prototype.charCodeAt;
      /**
       * Constructs new long bits from the specified 8 characters long hash.
       * @param {string} hash Hash
       * @returns {util.LongBits} Bits
       */

      LongBits.fromHash = function fromHash(hash) {
        if (hash === zeroHash) return zero;
        return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);
      };
      /**
       * Converts this long bits to a 8 characters long hash.
       * @returns {string} Hash
       */


      LongBits.prototype.toHash = function toHash() {
        return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
      };
      /**
       * Zig-zag encodes this long bits.
       * @returns {util.LongBits} `this`
       */


      LongBits.prototype.zzEncode = function zzEncode() {
        var mask = this.hi >> 31;
        this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
        this.lo = (this.lo << 1 ^ mask) >>> 0;
        return this;
      };
      /**
       * Zig-zag decodes this long bits.
       * @returns {util.LongBits} `this`
       */


      LongBits.prototype.zzDecode = function zzDecode() {
        var mask = -(this.lo & 1);
        this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
        this.hi = (this.hi >>> 1 ^ mask) >>> 0;
        return this;
      };
      /**
       * Calculates the length of this longbits when encoded as a varint.
       * @returns {number} Length
       */


      LongBits.prototype.length = function length() {
        var part0 = this.lo,
            part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
            part2 = this.hi >>> 24;
        return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
      };
    }, {
      "39": 39
    }],
    39: [function (require, module, exports) {
      "use strict";

      var util = exports; // used to return a Promise where callback is omitted

      util.asPromise = require(1); // converts to / from base64 encoded strings

      util.base64 = require(2); // base class of rpc.Service

      util.EventEmitter = require(4); // float handling accross browsers

      util["float"] = require(6); // requires modules optionally and hides the call from bundlers

      util.inquire = require(7); // converts to / from utf8 encoded strings

      util.utf8 = require(10); // provides a node-like buffer pool in the browser

      util.pool = require(9); // utility to work with the low and high bits of a 64 bit value

      util.LongBits = require(38); // global object reference

      util.global = typeof window !== "undefined" && window || typeof global !== "undefined" && global || typeof self !== "undefined" && self || this; // eslint-disable-line no-invalid-this

      /**
       * An immuable empty array.
       * @memberof util
       * @type {Array.<*>}
       * @const
       */

      util.emptyArray = Object.freeze ? Object.freeze([]) :
      /* istanbul ignore next */
      []; // used on prototypes

      /**
       * An immutable empty object.
       * @type {Object}
       * @const
       */

      util.emptyObject = Object.freeze ? Object.freeze({}) :
      /* istanbul ignore next */
      {}; // used on prototypes

      /**
       * Whether running within node or not.
       * @memberof util
       * @type {boolean}
       * @const
       */

      util.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);
      /**
       * Tests if the specified value is an integer.
       * @function
       * @param {*} value Value to test
       * @returns {boolean} `true` if the value is an integer
       */

      util.isInteger = Number.isInteger ||
      /* istanbul ignore next */
      function isInteger(value) {
        return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
      };
      /**
       * Tests if the specified value is a string.
       * @param {*} value Value to test
       * @returns {boolean} `true` if the value is a string
       */


      util.isString = function isString(value) {
        return typeof value === "string" || value instanceof String;
      };
      /**
       * Tests if the specified value is a non-null object.
       * @param {*} value Value to test
       * @returns {boolean} `true` if the value is a non-null object
       */


      util.isObject = function isObject(value) {
        return value && _typeof(value) === "object";
      };
      /**
       * Checks if a property on a message is considered to be present.
       * This is an alias of {@link util.isSet}.
       * @function
       * @param {Object} obj Plain object or message instance
       * @param {string} prop Property name
       * @returns {boolean} `true` if considered to be present, otherwise `false`
       */


      util.isset =
      /**
       * Checks if a property on a message is considered to be present.
       * @param {Object} obj Plain object or message instance
       * @param {string} prop Property name
       * @returns {boolean} `true` if considered to be present, otherwise `false`
       */
      util.isSet = function isSet(obj, prop) {
        var value = obj[prop];
        if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
          return _typeof(value) !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
        return false;
      };
      /**
       * Any compatible Buffer instance.
       * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
       * @interface Buffer
       * @extends Uint8Array
       */

      /**
       * Node's Buffer class if available.
       * @type {Constructor<Buffer>}
       */


      util.Buffer = function () {
        try {
          var Buffer = util.inquire("buffer").Buffer; // refuse to use non-node buffers if not explicitly assigned (perf reasons):

          return Buffer.prototype.utf8Write ? Buffer :
          /* istanbul ignore next */
          null;
        } catch (e) {
          /* istanbul ignore next */
          return null;
        }
      }(); // Internal alias of or polyfull for Buffer.from.


      util._Buffer_from = null; // Internal alias of or polyfill for Buffer.allocUnsafe.

      util._Buffer_allocUnsafe = null;
      /**
       * Creates a new buffer of whatever type supported by the environment.
       * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
       * @returns {Uint8Array|Buffer} Buffer
       */

      util.newBuffer = function newBuffer(sizeOrArray) {
        /* istanbul ignore next */
        return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
      };
      /**
       * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
       * @type {Constructor<Uint8Array>}
       */


      util.Array = typeof Uint8Array !== "undefined" ? Uint8Array
      /* istanbul ignore next */
      : Array;
      /**
       * Any compatible Long instance.
       * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
       * @interface Long
       * @property {number} low Low bits
       * @property {number} high High bits
       * @property {boolean} unsigned Whether unsigned or not
       */

      /**
       * Long.js's Long class if available.
       * @type {Constructor<Long>}
       */

      util.Long =
      /* istanbul ignore next */
      util.global.dcodeIO &&
      /* istanbul ignore next */
      util.global.dcodeIO.Long ||
      /* istanbul ignore next */
      util.global.Long || util.inquire("long");
      /**
       * Regular expression used to verify 2 bit (`bool`) map keys.
       * @type {RegExp}
       * @const
       */

      util.key2Re = /^true|false|0|1$/;
      /**
       * Regular expression used to verify 32 bit (`int32` etc.) map keys.
       * @type {RegExp}
       * @const
       */

      util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
      /**
       * Regular expression used to verify 64 bit (`int64` etc.) map keys.
       * @type {RegExp}
       * @const
       */

      util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
      /**
       * Converts a number or long to an 8 characters long hash string.
       * @param {Long|number} value Value to convert
       * @returns {string} Hash
       */

      util.longToHash = function longToHash(value) {
        return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
      };
      /**
       * Converts an 8 characters long hash string to a long or number.
       * @param {string} hash Hash
       * @param {boolean} [unsigned=false] Whether unsigned or not
       * @returns {Long|number} Original value
       */


      util.longFromHash = function longFromHash(hash, unsigned) {
        var bits = util.LongBits.fromHash(hash);
        if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);
        return bits.toNumber(Boolean(unsigned));
      };
      /**
       * Merges the properties of the source object into the destination object.
       * @memberof util
       * @param {Object.<string,*>} dst Destination object
       * @param {Object.<string,*>} src Source object
       * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
       * @returns {Object.<string,*>} Destination object
       */


      function merge(dst, src, ifNotSet) {
        // used by converters
        for (var keys = Object.keys(src), i = 0; i < keys.length; ++i) {
          if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];
        }

        return dst;
      }

      util.merge = merge;
      /**
       * Converts the first character of a string to lower case.
       * @param {string} str String to convert
       * @returns {string} Converted string
       */

      util.lcFirst = function lcFirst(str) {
        return str.charAt(0).toLowerCase() + str.substring(1);
      };
      /**
       * Creates a custom error constructor.
       * @memberof util
       * @param {string} name Error name
       * @returns {Constructor<Error>} Custom error constructor
       */


      function newError(name) {
        function CustomError(message, properties) {
          if (!(this instanceof CustomError)) return new CustomError(message, properties); // Error.call(this, message);
          // ^ just returns a new error instance because the ctor can be called as a function

          Object.defineProperty(this, "message", {
            get: function get() {
              return message;
            }
          });
          /* istanbul ignore next */

          if (Error.captureStackTrace) // node
            Error.captureStackTrace(this, CustomError);else Object.defineProperty(this, "stack", {
            value: new Error().stack || ""
          });
          if (properties) merge(this, properties);
        }

        (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
        Object.defineProperty(CustomError.prototype, "name", {
          get: function get() {
            return name;
          }
        });

        CustomError.prototype.toString = function toString() {
          return this.name + ": " + this.message;
        };

        return CustomError;
      }

      util.newError = newError;
      /**
       * Constructs a new protocol error.
       * @classdesc Error subclass indicating a protocol specifc error.
       * @memberof util
       * @extends Error
       * @template T extends Message<T>
       * @constructor
       * @param {string} message Error message
       * @param {Object.<string,*>} [properties] Additional properties
       * @example
       * try {
       *     MyMessage.decode(someBuffer); // throws if required fields are missing
       * } catch (e) {
       *     if (e instanceof ProtocolError && e.instance)
       *         console.log("decoded so far: " + JSON.stringify(e.instance));
       * }
       */

      util.ProtocolError = newError("ProtocolError");
      /**
       * So far decoded message instance.
       * @name util.ProtocolError#instance
       * @type {Message<T>}
       */

      /**
       * A OneOf getter as returned by {@link util.oneOfGetter}.
       * @typedef OneOfGetter
       * @type {function}
       * @returns {string|undefined} Set field name, if any
       */

      /**
       * Builds a getter for a oneof's present field name.
       * @param {string[]} fieldNames Field names
       * @returns {OneOfGetter} Unbound getter
       */

      util.oneOfGetter = function getOneOf(fieldNames) {
        var fieldMap = {};

        for (var i = 0; i < fieldNames.length; ++i) {
          fieldMap[fieldNames[i]] = 1;
        }
        /**
         * @returns {string|undefined} Set field name, if any
         * @this Object
         * @ignore
         */


        return function () {
          // eslint-disable-line consistent-return
          for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i) {
            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];
          }
        };
      };
      /**
       * A OneOf setter as returned by {@link util.oneOfSetter}.
       * @typedef OneOfSetter
       * @type {function}
       * @param {string|undefined} value Field name
       * @returns {undefined}
       */

      /**
       * Builds a setter for a oneof's present field name.
       * @param {string[]} fieldNames Field names
       * @returns {OneOfSetter} Unbound setter
       */


      util.oneOfSetter = function setOneOf(fieldNames) {
        /**
         * @param {string} name Field name
         * @returns {undefined}
         * @this Object
         * @ignore
         */
        return function (name) {
          for (var i = 0; i < fieldNames.length; ++i) {
            if (fieldNames[i] !== name) delete this[fieldNames[i]];
          }
        };
      };
      /**
       * Default conversion options used for {@link Message#toJSON} implementations.
       *
       * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
       *
       * - Longs become strings
       * - Enums become string keys
       * - Bytes become base64 encoded strings
       * - (Sub-)Messages become plain objects
       * - Maps become plain objects with all string keys
       * - Repeated fields become arrays
       * - NaN and Infinity for float and double fields become strings
       *
       * @type {IConversionOptions}
       * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
       */


      util.toJSONOptions = {
        longs: String,
        enums: String,
        bytes: String,
        json: true
      }; // Sets up buffer utility according to the environment (called in index-minimal)

      util._configure = function () {
        var Buffer = util.Buffer;
        /* istanbul ignore if */

        if (!Buffer) {
          util._Buffer_from = util._Buffer_allocUnsafe = null;
          return;
        } // because node 4.x buffers are incompatible & immutable
        // see: https://github.com/dcodeIO/protobuf.js/pull/665


        util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
        /* istanbul ignore next */
        function Buffer_from(value, encoding) {
          return new Buffer(value, encoding);
        };

        util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
        /* istanbul ignore next */
        function Buffer_allocUnsafe(size) {
          return new Buffer(size);
        };
      };
    }, {
      "1": 1,
      "10": 10,
      "2": 2,
      "38": 38,
      "4": 4,
      "6": 6,
      "7": 7,
      "9": 9
    }],
    40: [function (require, module, exports) {
      "use strict";

      module.exports = verifier;

      var Enum = require(15),
          util = require(37);

      function invalid(field, expected) {
        return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:" + field.keyType + "}" : "") + " expected";
      }
      /**
       * Generates a partial value verifier.
       * @param {Codegen} gen Codegen instance
       * @param {Field} field Reflected field
       * @param {number} fieldIndex Field index
       * @param {string} ref Variable reference
       * @returns {Codegen} Codegen instance
       * @ignore
       */


      function genVerifyValue(gen, field, fieldIndex, ref) {
        /* eslint-disable no-unexpected-multiline */
        if (field.resolvedType) {
          if (field.resolvedType instanceof Enum) {
            gen("switch(%s){", ref)("default:")("return%j", invalid(field, "enum value"));

            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) {
              gen("case %i:", field.resolvedType.values[keys[j]]);
            }

            gen("break")("}");
          } else {
            gen("{")("var e=types[%i].verify(%s);", fieldIndex, ref)("if(e)")("return%j+e", field.name + ".")("}");
          }
        } else {
          switch (field.type) {
            case "int32":
            case "uint32":
            case "sint32":
            case "fixed32":
            case "sfixed32":
              gen("if(!util.isInteger(%s))", ref)("return%j", invalid(field, "integer"));
              break;

            case "int64":
            case "uint64":
            case "sint64":
            case "fixed64":
            case "sfixed64":
              gen("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)("return%j", invalid(field, "integer|Long"));
              break;

            case "float":
            case "double":
              gen("if(typeof %s!==\"number\")", ref)("return%j", invalid(field, "number"));
              break;

            case "bool":
              gen("if(typeof %s!==\"boolean\")", ref)("return%j", invalid(field, "boolean"));
              break;

            case "string":
              gen("if(!util.isString(%s))", ref)("return%j", invalid(field, "string"));
              break;

            case "bytes":
              gen("if(!(%s&&typeof %s.length===\"number\"||util.isString(%s)))", ref, ref, ref)("return%j", invalid(field, "buffer"));
              break;
          }
        }

        return gen;
        /* eslint-enable no-unexpected-multiline */
      }
      /**
       * Generates a partial key verifier.
       * @param {Codegen} gen Codegen instance
       * @param {Field} field Reflected field
       * @param {string} ref Variable reference
       * @returns {Codegen} Codegen instance
       * @ignore
       */


      function genVerifyKey(gen, field, ref) {
        /* eslint-disable no-unexpected-multiline */
        switch (field.keyType) {
          case "int32":
          case "uint32":
          case "sint32":
          case "fixed32":
          case "sfixed32":
            gen("if(!util.key32Re.test(%s))", ref)("return%j", invalid(field, "integer key"));
            break;

          case "int64":
          case "uint64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen("if(!util.key64Re.test(%s))", ref) // see comment above: x is ok, d is not
            ("return%j", invalid(field, "integer|Long key"));
            break;

          case "bool":
            gen("if(!util.key2Re.test(%s))", ref)("return%j", invalid(field, "boolean key"));
            break;
        }

        return gen;
        /* eslint-enable no-unexpected-multiline */
      }
      /**
       * Generates a verifier specific to the specified message type.
       * @param {Type} mtype Message type
       * @returns {Codegen} Codegen instance
       */


      function verifier(mtype) {
        /* eslint-disable no-unexpected-multiline */
        var gen = util.codegen(["m"], mtype.name + "$verify")("if(typeof m!==\"object\"||m===null)")("return%j", "object expected");
        var oneofs = mtype.oneofsArray,
            seenFirstField = {};
        if (oneofs.length) gen("var p={}");

        for (var i = 0; i <
        /* initializes */
        mtype.fieldsArray.length; ++i) {
          var field = mtype._fieldsArray[i].resolve(),
              ref = "m" + util.safeProp(field.name);

          if (field.optional) gen("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name); // !== undefined && !== null
          // map fields

          if (field.map) {
            gen("if(!util.isObject(%s))", ref)("return%j", invalid(field, "object"))("var k=Object.keys(%s)", ref)("for(var i=0;i<k.length;++i){");
            genVerifyKey(gen, field, "k[i]");
            genVerifyValue(gen, field, i, ref + "[k[i]]")("}"); // repeated fields
          } else if (field.repeated) {
            gen("if(!Array.isArray(%s))", ref)("return%j", invalid(field, "array"))("for(var i=0;i<%s.length;++i){", ref);
            genVerifyValue(gen, field, i, ref + "[i]")("}"); // required or present fields
          } else {
            if (field.partOf) {
              var oneofProp = util.safeProp(field.partOf.name);
              if (seenFirstField[field.partOf.name] === 1) gen("if(p%s===1)", oneofProp)("return%j", field.partOf.name + ": multiple values");
              seenFirstField[field.partOf.name] = 1;
              gen("p%s=1", oneofProp);
            }

            genVerifyValue(gen, field, i, ref);
          }

          if (field.optional) gen("}");
        }

        return gen("return null");
        /* eslint-enable no-unexpected-multiline */
      }
    }, {
      "15": 15,
      "37": 37
    }],
    41: [function (require, module, exports) {
      "use strict";
      /**
       * Wrappers for common types.
       * @type {Object.<string,IWrapper>}
       * @const
       */

      var wrappers = exports;

      var Message = require(21);
      /**
       * From object converter part of an {@link IWrapper}.
       * @typedef WrapperFromObjectConverter
       * @type {function}
       * @param {Object.<string,*>} object Plain object
       * @returns {Message<{}>} Message instance
       * @this Type
       */

      /**
       * To object converter part of an {@link IWrapper}.
       * @typedef WrapperToObjectConverter
       * @type {function}
       * @param {Message<{}>} message Message instance
       * @param {IConversionOptions} [options] Conversion options
       * @returns {Object.<string,*>} Plain object
       * @this Type
       */

      /**
       * Common type wrapper part of {@link wrappers}.
       * @interface IWrapper
       * @property {WrapperFromObjectConverter} [fromObject] From object converter
       * @property {WrapperToObjectConverter} [toObject] To object converter
       */
      // Custom wrapper for Any


      wrappers[".google.protobuf.Any"] = {
        fromObject: function fromObject(object) {
          // unwrap value type if mapped
          if (object && object["@type"]) {
            var type = this.lookup(object["@type"]);
            /* istanbul ignore else */

            if (type) {
              // type_url does not accept leading "."
              var type_url = object["@type"].charAt(0) === "." ? object["@type"].substr(1) : object["@type"]; // type_url prefix is optional, but path seperator is required

              return this.create({
                type_url: "/" + type_url,
                value: type.encode(type.fromObject(object)).finish()
              });
            }
          }

          return this.fromObject(object);
        },
        toObject: function toObject(message, options) {
          // decode value if requested and unmapped
          if (options && options.json && message.type_url && message.value) {
            // Only use fully qualified type name after the last '/'
            var name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
            var type = this.lookup(name);
            /* istanbul ignore else */

            if (type) message = type.decode(message.value);
          } // wrap value if unmapped


          if (!(message instanceof this.ctor) && message instanceof Message) {
            var object = message.$type.toObject(message, options);
            object["@type"] = message.$type.fullName;
            return object;
          }

          return this.toObject(message, options);
        }
      };
    }, {
      "21": 21
    }],
    42: [function (require, module, exports) {
      "use strict";

      module.exports = Writer;

      var util = require(39);

      var BufferWriter; // cyclic

      var LongBits = util.LongBits,
          base64 = util.base64,
          utf8 = util.utf8;
      /**
       * Constructs a new writer operation instance.
       * @classdesc Scheduled writer operation.
       * @constructor
       * @param {function(*, Uint8Array, number)} fn Function to call
       * @param {number} len Value byte length
       * @param {*} val Value to write
       * @ignore
       */

      function Op(fn, len, val) {
        /**
         * Function to call.
         * @type {function(Uint8Array, number, *)}
         */
        this.fn = fn;
        /**
         * Value byte length.
         * @type {number}
         */

        this.len = len;
        /**
         * Next operation.
         * @type {Writer.Op|undefined}
         */

        this.next = undefined;
        /**
         * Value to write.
         * @type {*}
         */

        this.val = val; // type varies
      }
      /* istanbul ignore next */


      function noop() {} // eslint-disable-line no-empty-function

      /**
       * Constructs a new writer state instance.
       * @classdesc Copied writer state.
       * @memberof Writer
       * @constructor
       * @param {Writer} writer Writer to copy state from
       * @ignore
       */


      function State(writer) {
        /**
         * Current head.
         * @type {Writer.Op}
         */
        this.head = writer.head;
        /**
         * Current tail.
         * @type {Writer.Op}
         */

        this.tail = writer.tail;
        /**
         * Current buffer length.
         * @type {number}
         */

        this.len = writer.len;
        /**
         * Next state.
         * @type {State|null}
         */

        this.next = writer.states;
      }
      /**
       * Constructs a new writer instance.
       * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
       * @constructor
       */


      function Writer() {
        /**
         * Current length.
         * @type {number}
         */
        this.len = 0;
        /**
         * Operations head.
         * @type {Object}
         */

        this.head = new Op(noop, 0, 0);
        /**
         * Operations tail
         * @type {Object}
         */

        this.tail = this.head;
        /**
         * Linked forked states.
         * @type {Object|null}
         */

        this.states = null; // When a value is written, the writer calculates its byte length and puts it into a linked
        // list of operations to perform when finish() is called. This both allows us to allocate
        // buffers of the exact required size and reduces the amount of work we have to do compared
        // to first calculating over objects and then encoding over objects. In our case, the encoding
        // part is just a linked list walk calling operations with already prepared values.
      }
      /**
       * Creates a new writer.
       * @function
       * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
       */


      Writer.create = util.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
          return new BufferWriter();
        })();
      }
      /* istanbul ignore next */
      : function create_array() {
        return new Writer();
      };
      /**
       * Allocates a buffer of the specified size.
       * @param {number} size Buffer size
       * @returns {Uint8Array} Buffer
       */

      Writer.alloc = function alloc(size) {
        return new util.Array(size);
      }; // Use Uint8Array buffer pool in the browser, just like node does with buffers

      /* istanbul ignore else */


      if (util.Array !== Array) Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
      /**
       * Pushes a new operation to the queue.
       * @param {function(Uint8Array, number, *)} fn Function to call
       * @param {number} len Value byte length
       * @param {number} val Value to write
       * @returns {Writer} `this`
       * @private
       */

      Writer.prototype._push = function push(fn, len, val) {
        this.tail = this.tail.next = new Op(fn, len, val);
        this.len += len;
        return this;
      };

      function writeByte(val, buf, pos) {
        buf[pos] = val & 255;
      }

      function writeVarint32(val, buf, pos) {
        while (val > 127) {
          buf[pos++] = val & 127 | 128;
          val >>>= 7;
        }

        buf[pos] = val;
      }
      /**
       * Constructs a new varint writer operation instance.
       * @classdesc Scheduled varint writer operation.
       * @extends Op
       * @constructor
       * @param {number} len Value byte length
       * @param {number} val Value to write
       * @ignore
       */


      function VarintOp(len, val) {
        this.len = len;
        this.next = undefined;
        this.val = val;
      }

      VarintOp.prototype = Object.create(Op.prototype);
      VarintOp.prototype.fn = writeVarint32;
      /**
       * Writes an unsigned 32 bit value as a varint.
       * @param {number} value Value to write
       * @returns {Writer} `this`
       */

      Writer.prototype.uint32 = function write_uint32(value) {
        // here, the call to this.push has been inlined and a varint specific Op subclass is used.
        // uint32 is by far the most frequently used operation and benefits significantly from this.
        this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;
        return this;
      };
      /**
       * Writes a signed 32 bit value as a varint.
       * @function
       * @param {number} value Value to write
       * @returns {Writer} `this`
       */


      Writer.prototype.int32 = function write_int32(value) {
        return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
        : this.uint32(value);
      };
      /**
       * Writes a 32 bit value as a varint, zig-zag encoded.
       * @param {number} value Value to write
       * @returns {Writer} `this`
       */


      Writer.prototype.sint32 = function write_sint32(value) {
        return this.uint32((value << 1 ^ value >> 31) >>> 0);
      };

      function writeVarint64(val, buf, pos) {
        while (val.hi) {
          buf[pos++] = val.lo & 127 | 128;
          val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
          val.hi >>>= 7;
        }

        while (val.lo > 127) {
          buf[pos++] = val.lo & 127 | 128;
          val.lo = val.lo >>> 7;
        }

        buf[pos++] = val.lo;
      }
      /**
       * Writes an unsigned 64 bit value as a varint.
       * @param {Long|number|string} value Value to write
       * @returns {Writer} `this`
       * @throws {TypeError} If `value` is a string and no long library is present.
       */


      Writer.prototype.uint64 = function write_uint64(value) {
        var bits = LongBits.from(value);
        return this._push(writeVarint64, bits.length(), bits);
      };
      /**
       * Writes a signed 64 bit value as a varint.
       * @function
       * @param {Long|number|string} value Value to write
       * @returns {Writer} `this`
       * @throws {TypeError} If `value` is a string and no long library is present.
       */


      Writer.prototype.int64 = Writer.prototype.uint64;
      /**
       * Writes a signed 64 bit value as a varint, zig-zag encoded.
       * @param {Long|number|string} value Value to write
       * @returns {Writer} `this`
       * @throws {TypeError} If `value` is a string and no long library is present.
       */

      Writer.prototype.sint64 = function write_sint64(value) {
        var bits = LongBits.from(value).zzEncode();
        return this._push(writeVarint64, bits.length(), bits);
      };
      /**
       * Writes a boolish value as a varint.
       * @param {boolean} value Value to write
       * @returns {Writer} `this`
       */


      Writer.prototype.bool = function write_bool(value) {
        return this._push(writeByte, 1, value ? 1 : 0);
      };

      function writeFixed32(val, buf, pos) {
        buf[pos] = val & 255;
        buf[pos + 1] = val >>> 8 & 255;
        buf[pos + 2] = val >>> 16 & 255;
        buf[pos + 3] = val >>> 24;
      }
      /**
       * Writes an unsigned 32 bit value as fixed 32 bits.
       * @param {number} value Value to write
       * @returns {Writer} `this`
       */


      Writer.prototype.fixed32 = function write_fixed32(value) {
        return this._push(writeFixed32, 4, value >>> 0);
      };
      /**
       * Writes a signed 32 bit value as fixed 32 bits.
       * @function
       * @param {number} value Value to write
       * @returns {Writer} `this`
       */


      Writer.prototype.sfixed32 = Writer.prototype.fixed32;
      /**
       * Writes an unsigned 64 bit value as fixed 64 bits.
       * @param {Long|number|string} value Value to write
       * @returns {Writer} `this`
       * @throws {TypeError} If `value` is a string and no long library is present.
       */

      Writer.prototype.fixed64 = function write_fixed64(value) {
        var bits = LongBits.from(value);
        return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
      };
      /**
       * Writes a signed 64 bit value as fixed 64 bits.
       * @function
       * @param {Long|number|string} value Value to write
       * @returns {Writer} `this`
       * @throws {TypeError} If `value` is a string and no long library is present.
       */


      Writer.prototype.sfixed64 = Writer.prototype.fixed64;
      /**
       * Writes a float (32 bit).
       * @function
       * @param {number} value Value to write
       * @returns {Writer} `this`
       */

      Writer.prototype["float"] = function write_float(value) {
        return this._push(util["float"].writeFloatLE, 4, value);
      };
      /**
       * Writes a double (64 bit float).
       * @function
       * @param {number} value Value to write
       * @returns {Writer} `this`
       */


      Writer.prototype["double"] = function write_double(value) {
        return this._push(util["float"].writeDoubleLE, 8, value);
      };

      var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos); // also works for plain array values
      }
      /* istanbul ignore next */
      : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i) {
          buf[pos + i] = val[i];
        }
      };
      /**
       * Writes a sequence of bytes.
       * @param {Uint8Array|string} value Buffer or base64 encoded string to write
       * @returns {Writer} `this`
       */

      Writer.prototype.bytes = function write_bytes(value) {
        var len = value.length >>> 0;
        if (!len) return this._push(writeByte, 1, 0);

        if (util.isString(value)) {
          var buf = Writer.alloc(len = base64.length(value));
          base64.decode(value, buf, 0);
          value = buf;
        }

        return this.uint32(len)._push(writeBytes, len, value);
      };
      /**
       * Writes a string.
       * @param {string} value Value to write
       * @returns {Writer} `this`
       */


      Writer.prototype.string = function write_string(value) {
        var len = utf8.length(value);
        return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
      };
      /**
       * Forks this writer's state by pushing it to a stack.
       * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
       * @returns {Writer} `this`
       */


      Writer.prototype.fork = function fork() {
        this.states = new State(this);
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
        return this;
      };
      /**
       * Resets this instance to the last state.
       * @returns {Writer} `this`
       */


      Writer.prototype.reset = function reset() {
        if (this.states) {
          this.head = this.states.head;
          this.tail = this.states.tail;
          this.len = this.states.len;
          this.states = this.states.next;
        } else {
          this.head = this.tail = new Op(noop, 0, 0);
          this.len = 0;
        }

        return this;
      };
      /**
       * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
       * @returns {Writer} `this`
       */


      Writer.prototype.ldelim = function ldelim() {
        var head = this.head,
            tail = this.tail,
            len = this.len;
        this.reset().uint32(len);

        if (len) {
          this.tail.next = head.next; // skip noop

          this.tail = tail;
          this.len += len;
        }

        return this;
      };
      /**
       * Finishes the write operation.
       * @returns {Uint8Array} Finished buffer
       */


      Writer.prototype.finish = function finish() {
        var head = this.head.next,
            // skip noop
        buf = this.constructor.alloc(this.len),
            pos = 0;

        while (head) {
          head.fn(head.val, buf, pos);
          pos += head.len;
          head = head.next;
        } // this.head = this.tail = null;


        return buf;
      };

      Writer._configure = function (BufferWriter_) {
        BufferWriter = BufferWriter_;
      };
    }, {
      "39": 39
    }],
    43: [function (require, module, exports) {
      "use strict";

      module.exports = BufferWriter; // extends Writer

      var Writer = require(42);

      (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

      var util = require(39);

      var Buffer = util.Buffer;
      /**
       * Constructs a new buffer writer instance.
       * @classdesc Wire format writer using node buffers.
       * @extends Writer
       * @constructor
       */

      function BufferWriter() {
        Writer.call(this);
      }
      /**
       * Allocates a buffer of the specified size.
       * @param {number} size Buffer size
       * @returns {Buffer} Buffer
       */


      BufferWriter.alloc = function alloc_buffer(size) {
        return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);
      };

      var writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
        // also works for plain array values
      }
      /* istanbul ignore next */
      : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy) // Buffer values
          val.copy(buf, pos, 0, val.length);else for (var i = 0; i < val.length;) {
          // plain array values
          buf[pos++] = val[i++];
        }
      };
      /**
       * @override
       */

      BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
        if (util.isString(value)) value = util._Buffer_from(value, "base64");
        var len = value.length >>> 0;
        this.uint32(len);
        if (len) this._push(writeBytesBuffer, len, value);
        return this;
      };

      function writeStringBuffer(val, buf, pos) {
        if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
          util.utf8.write(val, buf, pos);else buf.utf8Write(val, pos);
      }
      /**
       * @override
       */


      BufferWriter.prototype.string = function write_string_buffer(value) {
        var len = Buffer.byteLength(value);
        this.uint32(len);
        if (len) this._push(writeStringBuffer, len, value);
        return this;
      };
      /**
       * Finishes the write operation.
       * @name BufferWriter#finish
       * @function
       * @returns {Buffer} Finished buffer
       */

    }, {
      "39": 39,
      "42": 42
    }]
  }, {}, [19]);
})(); 

cc._RF.pop();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------
