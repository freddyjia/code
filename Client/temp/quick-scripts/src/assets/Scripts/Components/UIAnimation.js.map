{"version":3,"sources":["assets\\Scripts\\Components\\UIAnimation.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/*\r\n序列帧动画控件\r\n*/\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n@ccclass\r\nexport default class UIAnimation extends cc.Component {\r\n    // 当前帧的图片\r\n    @property(cc.Sprite)\r\n    sprite: cc.Sprite = null;\r\n    /** 播放动画所需要的图集 */\r\n    @property([cc.SpriteFrame])\r\n    spriteFrameList: cc.SpriteFrame[] = [];\r\n    /** 播放动画所需要的间隔时间 */\r\n    @property(cc.Integer)\r\n    duration: number = 0.2;\r\n    /** 是否循环播放 */\r\n    @property(cc.Boolean)\r\n    is_loop: boolean = false;\r\n    /** 是否加载的时候播放 */\r\n    @property(cc.Boolean)\r\n    is_play_onload: boolean = false;\r\n    /** 播放完成后是否消耗 */\r\n    @property(cc.Boolean)\r\n    is_destroy: boolean = false;\r\n    /** 延迟多少秒播放动画 */\r\n    @property(cc.Integer)\r\n    timeDelay: number = 0;\r\n    /** 如果是重复播放动画多少秒后在播放 */\r\n    @property(cc.Integer)\r\n    playTimeEndDelay: number = 0;\r\n    played_time = 0;\r\n    is_playing = false;\r\n    _currentDelay = false;\r\n    _currentPlayDelay = false\r\n    start () {\r\n        if (this.is_play_onload) {\r\n            this.play();\r\n        }\r\n    }\r\n    play() {\r\n        if (this.is_loop) {\r\n            this.play_loop();\r\n        } else {\r\n            this.play_once();\r\n        }\r\n    }\r\n    play_once() {\r\n        if (this.spriteFrameList.length <= 1) {\r\n            return;\r\n        }\r\n        if (this.timeDelay > 0) {\r\n            this._currentDelay = true;\r\n            this.scheduleOnce(this._updateTimeDelayState.bind(this), this.timeDelay);\r\n        }\r\n        this.played_time = 0;\r\n        this.is_playing = true;\r\n        this.is_loop = false;\r\n    }\r\n    play_loop() {\r\n        if (this.spriteFrameList.length <= 1) {\r\n            return;\r\n        }\r\n        if (this.timeDelay > 0) {\r\n            this._currentDelay = true;\r\n            this.scheduleOnce(this._updateTimeDelayState.bind(this), this.timeDelay);\r\n        }\r\n        this.played_time = 0;\r\n        this.is_playing = true;\r\n        this.is_loop = true;\r\n    }\r\n    stop() {\r\n        this.is_playing = false;\r\n        this.played_time = 0;\r\n    }\r\n    _updateTimeDelayState() {\r\n        this._currentDelay  = false;\r\n    }\r\n    _updatePlayTimeDelayState() {\r\n        this._currentPlayDelay = false;\r\n    }\r\n    update (dt) {\r\n        if (!this.is_playing) {\r\n            return;\r\n        }\r\n        if (this._currentDelay || this._currentPlayDelay) {\r\n            return;\r\n        }\r\n        this.played_time += dt;\r\n        let index = Math.floor(this.played_time / this.duration);\r\n        if (!this.is_loop) {\r\n            if (index >= this.spriteFrameList.length) {\r\n                this.is_playing = false;\r\n                this.played_time = 0;\r\n                if (this.is_destroy) {\r\n                    this.node.destroy();\r\n                }\r\n                return;\r\n            }\r\n            this.sprite.spriteFrame = this.spriteFrameList[index];\r\n        } else {\r\n            if(index >= this.spriteFrameList.length) {\r\n                this.played_time -= (this.duration * this.spriteFrameList.length);\r\n                index -= this.spriteFrameList.length;\r\n                this._currentPlayDelay = (this.timeDelay > 0);\r\n                this.scheduleOnce(this._updatePlayTimeDelayState.bind(this), this.playTimeEndDelay);\r\n            }\r\n            this.sprite.spriteFrame = this.spriteFrameList[index];\r\n        }\r\n    }\r\n}"]}