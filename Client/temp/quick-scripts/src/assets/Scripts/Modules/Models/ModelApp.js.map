{"version":3,"sources":["assets\\Scripts\\Modules\\Models\\ModelApp.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Model from \"../../MVCFramework/Model\";\r\nimport TCPNetwork, { TCPSessionID } from \"../../Network/Socket/TCPNetwork\";\r\nimport MessageNames from \"../MessageNames\";\r\nimport Toast from \"../../Tools/Toast\";\r\nimport TimerManager from \"../../Components/TimerManager\";\r\nimport { PingReq } from \"../../Protos/Ping\";\r\nimport { PingMsgDefine } from \"../../Protos/MessageDefine\";\r\nimport Language from \"../../Global/Language\";\r\nimport { LoginReq, LoginRes } from \"../../Protos/BankProxy\";\r\nimport { BankProxyMsgDefine } from \"../../Protos/MessageDefine_BankProxy\";\r\n\r\nexport default class ModelChat extends Model \r\n{\r\n    private date = new Date();\r\n    private pingTimer;\r\n    private lastSendPingTime;\r\n    private selfPlayerId:string;\r\n\r\n    public Init()\r\n    {\r\n    }\r\n\r\n    public Clean()\r\n    {\r\n    }\r\n\r\n    public SetSelfPlayerID(playerId)\r\n    {\r\n        this.selfPlayerId = playerId;\r\n    }\r\n\r\n    // 连接和登录\r\n    public StartLogin()\r\n    {\r\n        TCPNetwork.GetInstance().Connect(TCPSessionID.Hall, window[\"ip\"], window[\"port\"], \r\n        ()=>{\r\n            cc.log(\"连接服务器成功\");\r\n\r\n            this.InitPing();\r\n\r\n            // 链接成功，开始尝试登录\r\n            let req = LoginReq.create();\r\n            req.playerId = this.selfPlayerId;\r\n            let reqData = LoginReq.encode(req).finish();\r\n            TCPNetwork.GetInstance().Send(\r\n                TCPSessionID.Hall, \r\n                BankProxyMsgDefine.MSG_BankProxy_Login,\r\n                reqData,\r\n                (data)=>{\r\n                    let resData = LoginRes.decode(data);\r\n                    if (resData.success)\r\n                    {\r\n                        cc.log(\"登录服务器成功\");\r\n                        this.SendMessage(MessageNames.ShowAppStartView);\r\n                    }\r\n                    else\r\n                    {\r\n                        cc.log(\"连接服务器失败:\",resData.tips);\r\n                        Toast.Show(resData.tips);\r\n                    }\r\n                },\r\n                ()=>{\r\n\r\n                }\r\n            );\r\n        },\r\n        ()=>{\r\n            Toast.Show(Language.text4);\r\n        });\r\n    }\r\n\r\n    public InitPing()\r\n    {\r\n        TimerManager.GetInstance().DeleteTimer(this.pingTimer);\r\n\r\n        this.lastSendPingTime = Date.now();\r\n\r\n        this.pingTimer = TimerManager.GetInstance().CallActionDelay(()=>{\r\n            let timeNow = Date.now()\r\n            if(timeNow - this.lastSendPingTime > 3000)\r\n            {\r\n                this.SendPing(()=>{\r\n                    // this.ResetPingChecker();\r\n                });\r\n                this.lastSendPingTime = timeNow;\r\n            }\r\n            \r\n        },5,null,-1,5,true);\r\n    }\r\n\r\n    private SendPing(funcSuccess)\r\n    {\r\n        let req = PingReq.create();\r\n        req.timestamp = this.date.getDate();\r\n        let senddata = PingReq.encode(req).finish();\r\n        TCPNetwork.GetInstance().Send(TCPSessionID.Hall,PingMsgDefine.MSG_PING,senddata,(data)=>{\r\n            funcSuccess();\r\n        },(errmsg)=>{\r\n\r\n        },true);\r\n\r\n    }\r\n}"]}