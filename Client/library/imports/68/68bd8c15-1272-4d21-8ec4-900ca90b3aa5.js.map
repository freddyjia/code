{"version":3,"sources":["assets\\Scripts\\Tools\\NodeUtil.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import ccC from \"./ccC\";\n\n/**\n * 这个类里面仅限与添加和 Node 有关的共用方法，其他的请写到 Util.ts 脚本中\n */\nexport default class NodeUtil {\n    /**\n     * 递归查找指定根节点下指定名字的字节点，会递归所有层级\n     * @param node 根节点\n     * @param childName 字节点名字\n     */\n    public static SearchChild(node: cc.Node, childName: string): cc.Node {\n        for (let index = 0; index < node.childrenCount; index++) {\n            const element = node.children[index];\n            if (element.name == childName) {\n                return element;\n            }\n            let result = this.SearchChild(element, childName);\n            if (result != null) {\n                return result;\n            }\n        }\n        return null;\n    }\n\n    static SearchButton(node: cc.Node, childName: string): cc.Button {\n        return this.SearchChild(node, childName).getComponent(cc.Button);\n    }\n\n    static SearchLabel(node: cc.Node, childName: string): cc.Label {\n        return this.SearchChild(node, childName).getComponent(cc.Label);\n    }\n\n    static SearchRichText(node: cc.Node, childName: string): cc.RichText {\n        return this.SearchChild(node, childName).getComponent(cc.RichText);\n    }\n\n    static SearchEditBox(node: cc.Node, childName: string): cc.EditBox {\n        return this.SearchChild(node, childName).getComponent(cc.EditBox);\n    }\n\n    static SearchSprite(node: cc.Node, childName: string): cc.Sprite {\n        return this.SearchChild(node, childName).getComponent(cc.Sprite);\n    }\n\n    static SearchSlider(node: cc.Node, childName: string): cc.Slider {\n        return this.SearchChild(node, childName).getComponent(cc.Slider);\n    }\n\n    static SearchToggle(node: cc.Node, childName: string): cc.Toggle {\n        return this.SearchChild(node, childName).getComponent(cc.Toggle);\n    }\n\n    /**\n     * 设置图集\n     * @param sprite\n     * @param atlas\n     * @param spriteName 不传这个参数表示是加载散图\n     * @param finishCallback\n     */\n    static SetSpriteFrame(sprite: cc.Sprite, atlasPath: string, spriteName: string=null, finishCallback: () => void = null) {\n        \n        if (spriteName==undefined || spriteName==null || spriteName.length == 0)\n        {\n            ccC.loadRes(atlasPath, cc.SpriteFrame, (err, spriteFrame: any) => {\n                if (err) {\n                    cc.error(\"err  \" + err.message || err);\n                    return;\n                }\n                sprite.spriteFrame = spriteFrame;\n                if (finishCallback != null) finishCallback();\n            });\n        }\n        else\n        {\n            ccC.loadRes(atlasPath, cc.SpriteAtlas, (err, atlas: cc.SpriteAtlas) => {\n                if(err){\n                    cc.error(err.message || err)\n                }else{\n                    var frame = atlas.getSpriteFrame(spriteName);\n                    if (frame) {\n                        sprite.spriteFrame = frame;\n                        if (finishCallback != null) finishCallback();\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * 获取指定根节点下所有的子节点[包含传入的根节点]，尽量保证所有的字节点名字都不一样\n     * @param root 根节点\n     * @param dic 保存所有字节点的字典\n     */\n    static GetAllChildren(root: cc.Node, dic: { [name: string]: cc.Node }) {\n        dic[root.name] = root;\n        for (let index = 0; index < root.childrenCount; index++) {\n            const element = root.children[index];\n            this.GetAllChildren(element, dic);\n        }\n    }\n\n    /**\n     * 查找或者创建一个新的子节点\n     * @param container 根节点\n     * @param index 指定获取的节点下标\n     * @param createIndex 可以指定复制的节点\n     */\n    static GetOrCreateChild(container:cc.Node,index:number,createIndex:number = null):cc.Node{\n        let child:cc.Node\n        if(index<container.childrenCount){\n            child = container.children[index]\n        }else{\n            let cIndex = createIndex || 0\n            child = cc.instantiate(container.children[cIndex])\n            child.parent = container\n        }\n        child.active = true\n        return child\n    }\n\n    public static GetNodeDic(node:cc.Node,dic:{[name:string]:cc.Node}=null):{[name:string]:cc.Node}\n    {\n        if(dic == null)\n        {\n            dic = {};\n        }\n        dic[node.name] = node;\n        for(let i=0;i<node.childrenCount;i++)\n        {\n            this.GetNodeDic(node.children[i],dic);\n        }\n\n        return dic;\n    }\n\n    /**\n     * 用于两个node不在同一个父节点下时，设置相同的位置\n     * @param node 需要设置位置的node\n     * @param followNode 目标位置node\n     */\n    public static FollowPosition(node:cc.Node,tofollowNode:cc.Node)\n    {\n        let worldPos = tofollowNode.convertToWorldSpaceAR(cc.Vec2.ZERO);\n        let localPos = node.parent.convertToNodeSpaceAR(worldPos);\n        node.position = localPos;\n    }\n}\n"]}