{"version":3,"sources":["assets\\Scripts\\Components\\TimerManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import UpdateBeat from \"../Manager/UpdateBeat\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class TimerManager\n{\n    private id:number = 0;\n    private dicTimers:{[id:number]:TimerEvent} = {};\n    private listIDWaitToRemove:Array<string> = [];\n\n    private static m_Instance:TimerManager;\n\n    public static GetInstance():TimerManager\n    {\n        if(this.m_Instance == null)\n        {\n            // let node:cc.Node = new cc.Node(\"TimerManager\");\n            // node.setParent(cc.find(\"Main\"));\n            // this.m_Instance = node.addComponent(TimerManager);\n            this.m_Instance = new TimerManager();\n        }\n        return this.m_Instance;\n    }\n\n    /**\n     *\n     */\n    constructor() {\n        // super();\n        UpdateBeat.GetInstance().Add((deltaTime)=>{\n            this.UpdateFunc(deltaTime);\n        });\n    }\n\n    private DeleteTimerEvents()\n    {\n        if(this.listIDWaitToRemove.length == 0)\n            return;\n        for(let i = 0;i<this.listIDWaitToRemove.length;i++)\n        {\n            delete this.dicTimers[this.listIDWaitToRemove[i]];\n        }\n        this.listIDWaitToRemove = [];\n    }\n\n    private UpdateFunc(dt: number)\n    {\n        this.DeleteTimerEvents();\n        \n        for(let id in this.dicTimers)\n        {\n            let timerEvent = this.dicTimers[id];\n\n            timerEvent.timeCal += dt;\n            if(timerEvent.timeCal > timerEvent.delay && timerEvent.haveRunDelayAction == false)\n            {\n                timerEvent.haveRunDelayAction = true;\n                timerEvent.action(timerEvent.parm);\n            }\n\n            if(timerEvent.repeatTimes != 1)\n            {\n                if(timerEvent.timeCal > timerEvent.delay + (timerEvent.currentTime + 1) * timerEvent.interval)\n                {\n                    timerEvent.action(timerEvent.parm);\n                    timerEvent.currentTime ++;\n                }\n            }\n            if(timerEvent.repeatTimes != -1)\n            {\n                if(timerEvent.haveRunDelayAction == true && timerEvent.currentTime >= timerEvent.repeatTimes - 1)\n                {\n                    this.listIDWaitToRemove.push(timerEvent.id);\n                }\n            }\n        }\n\n        this.DeleteTimerEvents();\n    }\n\n    /**\n     * 创建定时器，返回定时器id，用于手动清除。如果不执行手动删除其会自动清除。\n     * @param [action] 延时执行的方法\n     * @param [delay] 单位是秒\n     * @param [parm] action传入参数,默认null\n     * @param [repeatTimes] 总过执行次数，0和1作用一样，大于1才会执行多次\n     * @param [interval] 延时执行后重复的间隔,0为interval=delay，默认0\n     * @param [keepAlive] true=保持计时器不被清除，必须调用指定的方法才能清除这个计时器，默认false\n     */\n    public CallActionDelay(action:(obj:any)=>void,delay:number,parm=null,repeatTimes:number=1,interval=0,keepAlive=false)\n    {\n        if(delay == 0)\n        {\n            delay = 0.01;\n        }\n        if(repeatTimes <= -1)\n        {\n            repeatTimes = -1;\n        }\n\n        if(repeatTimes == 0)\n        {\n            repeatTimes = 1;\n        }\n\n        if(interval <= 0 || interval == null)\n        {\n            interval = delay;\n        }\n        let timerEvent:TimerEvent = new TimerEvent();\n        timerEvent.id = this.id.toString();\n        timerEvent.action = action;\n        timerEvent.delay = delay;\n        timerEvent.parm = parm;\n        timerEvent.repeatTimes = repeatTimes;\n        timerEvent.interval = interval;\n        timerEvent.keepAlive = keepAlive;\n        this.dicTimers[timerEvent.id] = timerEvent;\n        \n        this.id++;\n\n        return timerEvent.id;\n    }\n\n    /**\n     * 手动删除定时器\n     * @param [id] 定时器id\n     */\n    public DeleteTimer(id:string)\n    {\n        if(id == null)\n        {\n            return;\n        }\n        if(this.dicTimers[id] != null)\n            this.listIDWaitToRemove.push(id);\n    }\n\n    \n    public ClearAll()\n    {\n        for(let key in this.dicTimers)\n        {\n            this.DeleteTimer(key);\n        }\n    }\n\n    public ClearAllButKeepLive()\n    {\n        for(let key in this.dicTimers)\n        {\n            if(this.dicTimers[key].keepAlive == false)\n                this.DeleteTimer(key);\n        }\n    }\n    \n}\n\nclass TimerEvent\n{\n    public id:string;\n    public delay:number = 0;\n    public interval:number = 0;\n    public action:(any)=>void = null;\n    public parm:any = null;\n    public repeatTimes:number = 0;\n    //计时器\n    public timeCal:number = 0;\n    //当前repeate次数\n    public currentTime:number = 0;\n    public keepAlive:boolean = false;\n    public haveRunDelayAction = false;\n}\n"]}