{"version":3,"sources":["assets\\Scripts\\Tools\\XTween\\XTweenerColor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,4CAAuC;AACvC,gDAAmD;AAGnD;IAA2C,iCAAQ;IAAnD;QAAA,qEAwDC;QAnDW,cAAQ,GAAY,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC;;IAmD/C,CAAC;IAjDU,4BAAI,GAAX,UACI,MAAc,EACd,UAAwB,EACxB,QAAsB,EACtB,QAAe,EACf,SAAgB,EAChB,QAAgB,EAChB,IAAyB;QAAzB,qBAAA,EAAA,OAAK,2BAAc,CAAC,KAAK;QAGzB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,wBAAwB;QACxB,4BAA4B;QAC5B,gCAAgC;QAChC,IAAI,CAAC,eAAe,CAAC,SAAS,EAAC,QAAQ,EAAC,IAAI,CAAC,CAAC;IAClD,CAAC;IAEM,8BAAM,GAAb,UAAc,SAAS;QAEnB,iBAAM,MAAM,YAAC,SAAS,CAAC,CAAC;QACxB,IAAG,IAAI,CAAC,UAAU,IAAI,IAAI,EAC1B;YACI,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,OAAO;SACV;QACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC1G,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC1G,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC1G,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAE1G,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;QAClC,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAEM,8BAAM,GAAb;QAEI,IAAG,IAAI,CAAC,UAAU,IAAI,IAAI,EAC1B;YACI,IAAI,CAAC,UAAU,GAAG,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC,CAAC;SACvC;IACL,CAAC;IAEM,mCAAW,GAAlB;QAEI,OAAO,eAAe,CAAC;IAC3B,CAAC;IACL,oBAAC;AAAD,CAxDA,AAwDC,CAxD0C,kBAAQ,GAwDlD","file":"","sourceRoot":"/","sourcesContent":["import XTweener from \"./Base/XTweener\";\nimport { XTweenCurvType } from \"./Base/XTweenCurv\";\n\n\nexport default class XTweenerColor extends XTweener \n{\n    private startValue:Array<number>;\n    private endValue:Array<number>;\n\n    private colorTmp:cc.Color = new cc.Color();\n\n    public Init(\n        target:cc.Node,\n        startValue:Array<number>,\n        endValue:Array<number>,\n        duration:number,\n        playTimes:number,\n        pingPong:boolean,\n        curv=XTweenCurvType.Liner,\n    )\n    {\n        this.SetTarget(target);\n        this.startValue = startValue;\n        this.endValue = endValue;\n        this.duration = duration;\n        // this.curvType = curv;\n        // this.pingPong = pingPong;\n        // this.repeatTimes = playTimes;\n        this.InitTweenerData(playTimes,pingPong,curv);\n    }\n\n    public Update(deltaTime)\n    {\n        super.Update(deltaTime);\n        if(this.beReplaced == true)\n        {\n            this.CheckFinish();\n            return;\n        }\n        this.colorTmp.setR(this.startValue[0] + (this.endValue[0] - this.startValue[0]) * this.animationProgress);\n        this.colorTmp.setG(this.startValue[1] + (this.endValue[1] - this.startValue[1]) * this.animationProgress);\n        this.colorTmp.setB(this.startValue[2] + (this.endValue[2] - this.startValue[2]) * this.animationProgress);\n        this.colorTmp.setA(this.startValue[3] + (this.endValue[3] - this.startValue[3]) * this.animationProgress);\n\n        this.target.color = this.colorTmp;\n        this.CheckFinish();\n    }\n\n    public OnPlay()\n    {\n        if(this.startValue == null)\n        {\n            this.startValue = [255,255,255,255];\n        }\n    }\n\n    public GetTypeMark()\n    {\n        return \"XTweenerColor\";\n    }\n}\n"]}