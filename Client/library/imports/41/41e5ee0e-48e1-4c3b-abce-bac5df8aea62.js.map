{"version":3,"sources":["assets\\Scripts\\Components\\ButtonListener.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEM,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAyB,CAAC;AAG1C;IAA4C,kCAAY;IAAxD;;IA2EA,CAAC;IApEU,6BAAI,GAAX;QAEI,IAAI,CAAC,iBAAiB,GAAG,IAAI,EAAE,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;QACzD,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;QAC1C,IAAI,CAAC,iBAAiB,CAAC,SAAS,GAAG,gBAAgB,CAAC;QACpD,IAAI,CAAC,iBAAiB,CAAC,OAAO,GAAG,iBAAiB,CAAC;QAEnD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;QAChD,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACzD,CAAC;IAEM,gCAAO,GAAd,UAAe,IAAW;QAEtB,IAAI,CAAC,iBAAiB,CAAC,eAAe,GAAG,IAAI,CAAC;IAClD,CAAC;IAEM,qCAAY,GAAnB,UAAoB,SAAgB;QAGhC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAEM,2CAAkB,GAAzB,UAA0B,QAA0C;QAEhE,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;IACpC,CAAC;IAED,+BAAM,GAAN;IAGA,CAAC;IAED,wCAAe,GAAf,UAAgB,KAAgB,EAAC,eAAsB;QAEnD,IAAG,IAAI,CAAC,eAAe,IAAI,IAAI,EAC/B;YACI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAC,eAAe,CAAC,CAAC;YAElD,6BAA6B;YAC7B,IAAI;YACJ,+DAA+D;YAC/D,IAAI;YACJ,wDAAwD;YACxD;;;;;;;;;;;;;;;;;;UAkBF;SACD;IACL,CAAC;IAvEgB,cAAc;QADlC,OAAO;OACa,cAAc,CA2ElC;IAAD,qBAAC;CA3ED,AA2EC,CA3E2C,EAAE,CAAC,SAAS,GA2EvD;kBA3EoB,cAAc","file":"","sourceRoot":"/","sourcesContent":["import AudioManager from \"../Manager/AudioManager\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ButtonListener extends cc.Component \n{\n    private clickEventHandler:cc.Component.EventHandler;\n    private button:cc.Button;\n    private onclickCallback:(button:cc.Button,data:any)=>void;\n    private audioName:string;\n\n    public Init()\n    {\n        this.clickEventHandler = new cc.Component.EventHandler();\n        this.clickEventHandler.target = this.node;\n        this.clickEventHandler.component = \"ButtonListener\";\n        this.clickEventHandler.handler = \"OnClickCallback\";\n        \n        this.button = this.node.getComponent(cc.Button);\n        this.button.clickEvents = [];\n        this.button.clickEvents.push(this.clickEventHandler);\n    }\n\n    public SetData(data:string)\n    {\n        this.clickEventHandler.customEventData = data;\n    }\n\n    public SetAudioName(audioName:string)\n    {\n    \n        this.audioName = audioName;\n    }\n\n    public SetOnClickCallback(callback:(button:cc.Button,data:any)=>void)\n    {\n        this.onclickCallback = callback;\n    }\n\n    onLoad() \n    {\n        \n    }\n\n    OnClickCallback(event:TouchEvent,customEventData:string)\n    {\n        if(this.onclickCallback != null)\n        {\n            this.onclickCallback(this.button,customEventData);\n\n            // if(this.audioName == null)\n            // {\n            //     this.audioName = \"MainGame/_Audio/_HallAudio/Click_btn\";\n            // }\n            // AudioManager.GetInstance().SoundPlay(this.audioName);\n            /* TODO:A\n        if audioName == nil then\n            local btnName = string.lower(button.name)\n\n            local containClose = string.contains(btnName, \"close\")\n            local containBack = string.contains(btnName, \"back\")\n            local containExit = string.contains(btnName, \"exit\")\n\n            if containBack or containClose or containExit then\n                AudioManager:GetInstance():SoundPlay(Res.Audios.SoundClose)\n            else\n                AudioManager:GetInstance():SoundPlay(Res.Audios.SoundClick)\n            end\n        else\n            if audioName~=\"\" then\n                AudioManager:GetInstance():SoundPlay(audioName)\n            end\n        end\n        */\n        }\n    }\n    \n\n\n}\n"]}