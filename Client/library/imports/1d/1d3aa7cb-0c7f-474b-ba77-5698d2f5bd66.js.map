{"version":3,"sources":["assets\\Scripts\\Tools\\XTween\\XTweenerRotaion.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,4CAAuC;AACvC,gDAAmD;AAGnD;IAA6C,mCAAQ;IAArD;;IAkDA,CAAC;IA7CU,8BAAI,GAAX,UACI,MAAc,EACd,UAAiB,EACjB,QAAe,EACf,QAAe,EACf,SAAgB,EAChB,QAAgB,EAChB,IAAyB;QAAzB,qBAAA,EAAA,OAAK,2BAAc,CAAC,KAAK;QAGzB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,wBAAwB;QACxB,4BAA4B;QAC5B,gCAAgC;QAChC,IAAI,CAAC,eAAe,CAAC,SAAS,EAAC,QAAQ,EAAC,IAAI,CAAC,CAAC;IAClD,CAAC;IAEM,gCAAM,GAAb,UAAc,SAAS;QAEnB,iBAAM,MAAM,YAAC,SAAS,CAAC,CAAC;QACxB,IAAG,IAAI,CAAC,UAAU,IAAI,IAAI,EAC1B;YACI,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,OAAO;SACV;QACD,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAEpG,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAEM,gCAAM,GAAb;QAEI,IAAG,IAAI,CAAC,UAAU,IAAI,IAAI,EAC1B;YACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;SAC1C;IACL,CAAC;IAEM,qCAAW,GAAlB;QAEI,OAAO,iBAAiB,CAAC;IAC7B,CAAC;IACL,sBAAC;AAAD,CAlDA,AAkDC,CAlD4C,kBAAQ,GAkDpD","file":"","sourceRoot":"/","sourcesContent":["import XTweener from \"./Base/XTweener\";\nimport { XTweenCurvType } from \"./Base/XTweenCurv\";\n\n\nexport default class XTweenerRotaion extends XTweener \n{\n    private startValue:number;\n    private endValue:number;\n\n    public Init(\n        target:cc.Node,\n        startValue:number,\n        endValue:number,\n        duration:number,\n        playTimes:number,\n        pingPong:boolean,\n        curv=XTweenCurvType.Liner,\n    )\n    {\n        this.SetTarget(target);\n        this.startValue = startValue;\n        this.endValue = endValue;\n        this.duration = duration;\n        // this.curvType = curv;\n        // this.pingPong = pingPong;\n        // this.repeatTimes = playTimes;\n        this.InitTweenerData(playTimes,pingPong,curv);\n    }\n\n    public Update(deltaTime)\n    {\n        super.Update(deltaTime);\n        if(this.beReplaced == true)\n        {\n            this.CheckFinish();\n            return;\n        }\n        this.target.rotation = this.startValue + (this.endValue - this.startValue) * this.animationProgress;\n\n        this.CheckFinish();\n    }\n\n    public OnPlay()\n    {\n        if(this.startValue == null)\n        {\n            this.startValue = this.target.rotation;\n        }\n    }\n\n    public GetTypeMark()\n    {\n        return \"XTweenerRotaion\";\n    }\n}\n"]}