{"version":3,"sources":["assets\\Scripts\\Network\\Socket\\TCPSendTaskManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import TimerManager from \"../../Components/TimerManager\";\nimport Language from \"../../Global/Language\";\nimport Toast from \"../../Tools/Toast\";\n// import { PingMsgDefine } from \"../../Protos/MessageDefine\";\n\nexport default class TCPSendTaskManager\n{\n\n    private static m_Instance:TCPSendTaskManager;\n    public static GetInstance():TCPSendTaskManager\n    {\n        if(this.m_Instance == null)\n        {\n            this.m_Instance = new TCPSendTaskManager();\n        }\n        return this.m_Instance;\n    }\n\n    private sessions:{[sessionID:number]:{[seq:number]:TCPSendTask}} = {};\n    public InitSession(sessionID)\n    {\n        // cc.error(\"InitSession  \" + sessionID);\n        this.sessions[sessionID] = {};\n    }\n\n    public AddTask(sessionID,msgID,seq,dataSend,successCallback:(data:Uint8Array)=>void,failCallback:(errMsg:string)=>void)\n    {\n        // cc.error(\"AddTask sessionID  \" + sessionID + \" seq \" + seq);\n        let task = new TCPSendTask();\n        task.Set(sessionID,msgID,seq,dataSend,successCallback,failCallback);\n        this.sessions[sessionID][seq] = task;\n    }\n\n    public GetTask(sessionID,seq)\n    {\n        return this.sessions[sessionID][seq];\n    }\n\n    public CancelTask(sessionID,seq)\n    {\n        // cc.error(\"CancelTask \" + seq);\n        let task = this.sessions[sessionID][seq];\n        task.CancelTimer();\n        delete this.sessions[sessionID][seq];\n    }\n\n    public Clean()\n    {\n        for(let sessionID in this.sessions)\n        {\n            // for(let seq in this.sessions[sessionID])\n            // {\n            //     this.sessions[sessionID][seq].CancelTimer();\n            // }\n            this.CleanSession(sessionID);\n        }\n        this.sessions = {};\n    }\n\n    public CleanSession(sessionID)\n    {\n        for(let seq in this.sessions[sessionID])\n        {\n            this.sessions[sessionID][seq].CancelTimer();\n        }\n        delete(this.sessions[sessionID]);\n        this.sessions[sessionID] = null;\n    }\n\n}\n\nclass TCPSendTask\n{\n    public sessionID:number;\n    public msgID:number;\n    public seq:number;\n    public dataSend:any;\n    public successCallback:(data:Uint8Array)=>void;\n    public failCallback:(errMsg:string)=>void;\n\n    private timerID:string;\n\n    public Set(sessionID,msgID,seq,dataSend,successCallback:(data:Uint8Array)=>void,failCallback:(errMsg:string)=>void)\n    {\n        this.sessionID = sessionID;\n        this.msgID = msgID;\n        this.seq = seq;\n        this.dataSend = dataSend;\n        this.successCallback = successCallback;\n        this.failCallback = failCallback;\n\n        let timeOut = 20;\n        this.timerID = TimerManager.GetInstance().CallActionDelay(()=>{\n            if(this.msgID != 1000)\n                Toast.Show(Language.text5);\n            if(failCallback != null)\n            {\n                failCallback(Language.text5 + \" msgID \" + msgID);\n            }\n            TimerManager.GetInstance().DeleteTimer(this.timerID);\n        },timeOut,null,0,0,true);\n    }\n\n    public CancelTimer()\n    {\n        TimerManager.GetInstance().DeleteTimer(this.timerID);\n    }\n}\n"]}