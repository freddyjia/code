{"version":3,"sources":["assets\\Scripts\\Tools\\ccC.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// import Global from \"../Global/Global\";\n\nexport default class ccC \n{\n    // public static log(msg: string|any, ...subst: any[]): void\n    // {\n    //     if(Global.showLog == true)\n    //     {\n    //         cc.log(msg,...subst);\n    //     }\n    // }\n\n    // public static error(msg: any, ...subst: any[]): void\n    // {\n    //     if(Global.showLog == true)\n    //     {\n    //         cc.error(msg,...subst);\n    //     }\n    // }\n\n    // public static warn(msg: any, ...subst: any[]): void\n    // {\n    //     if(Global.showLog == true)\n    //     {\n    //         cc.warn(msg,...subst);\n    //     }\n    // }\n\n    private static dicAssets:{[url:string]:any} = {};\n    private static dicAssetArrs:{[url:string]:any[]} = {};\n    private static dicUrlArrs:{[url:string]:any[]} = {};\n\n    public static loadRes(url: string, type: typeof cc.Asset, completeCallback: (error: Error, resource: any) => void): void\n    {\n        let asset = this.dicAssets[url];\n        if(asset != null && asset != undefined)\n        {\n            completeCallback(null,asset);\n            return;\n        }\n        cc.loader.loadRes(url,type,(err,res)=>{\n            if(err != null)\n            {\n                this.dicAssets[url] = res;\n            }\n            completeCallback(err,res);\n        });\n    }\n\n    public static load(url: string, completeCallback: (error: Error, resource: any) => void): void\n    {\n        let asset = this.dicAssets[url];\n        if(asset != null && asset != undefined)\n        {\n            completeCallback(null,asset);\n            return;\n        }\n        cc.loader.load(url, (err,tex)=>{\n            if(err != null)\n            {\n                this.dicAssets[url] = tex;\n            }\n            completeCallback(err,tex);\n        });\n    }\n\n    public static loadResDir(url: string, type: typeof cc.Asset, completeCallback: (error: Error, resource: any[], urls: string[]) => void): void\n    {\n        let asset = this.dicAssetArrs[url];\n        if(asset != null && asset != undefined)\n        {\n            completeCallback(null,asset,this.dicUrlArrs[url]);\n            return;\n        }\n\n        cc.loader.loadResDir(url,type,(err,res,urls)=>{\n            if(err != null)\n            {\n                this.dicAssets[url] = res;\n                this.dicUrlArrs[url] = urls;\n            }\n            completeCallback(err,res,urls);\n        });\n    }\n\n    public static loadResProgressWithoutType(url: string, progressCallback: (completedCount: number, totalCount: number, item: any) => void, completeCallback: ((error: Error, resource: any) => void)|null): void\n    {\n        let asset = this.dicAssets[url];\n        if(asset != null && asset != undefined)\n        {\n            progressCallback(1,1,null);\n            completeCallback(null,asset);\n            return;\n        }\n        cc.loader.loadRes(url,\n            (completedCount: number, totalCount: number, item: any) =>{\n                progressCallback(completedCount,totalCount,item);\n            }, (err: Error, perfab: any) => {\n                completeCallback(err,perfab);\n            });\n    }\n\n    public static loadResProgress(url: string, type: typeof cc.Asset, progressCallback: (completedCount: number, totalCount: number, item: any) => void, completeCallback: ((error: Error, resource: any) => void)|null): void\n    {\n        cc.loader.loadRes(url,type,\n            (completedCount: number, totalCount: number, item: any) =>{\n                progressCallback(completedCount,totalCount,item);\n            },\n            (err: Error, perfab: any) => {\n                completeCallback(err,perfab);\n        });\n    }\n}\n"]}