{"version":3,"sources":["assets\\Scripts\\Components\\QRCodeComponent.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qDAAoD;AAE9C,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAyB,CAAC;AAI1C;IAA6C,mCAAY;IAAzD;;IAwCA,CAAC;IArCU,6BAAG,GAAV,UAAW,GAAU;QAEjB,IAAI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;QAClD,IAAG,OAAO,IAAI,IAAI,EAClB;YACI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;SACjD;QACD,OAAO,CAAC,KAAK,EAAE,CAAC;QAChB,OAAO,CAAC,SAAS,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC;QACnC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QAC3B,IAAI,IAAI,GAAG,yBAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;QACtB,IAAI,KAAK,GAAG,IAAI,GAAG,GAAG,CAAC;QAC7B,IAAI,KAAK,GAAG,IAAI,GAAG,GAAG,CAAC;QACjB,KAAI,IAAI,GAAG,GAAC,CAAC,EAAC,GAAG,GAAC,GAAG,EAAC,GAAG,EAAE,EAC3B;YACI,KAAI,IAAI,GAAG,GAAC,CAAC,EAAC,GAAG,GAAC,GAAG,EAAC,GAAG,EAAE,EAC3B;gBACI,IAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EACjB;oBACI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;oBACjE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;oBACjE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC1G,OAAO,CAAC,IAAI,EAAE,CAAC;iBAClB;qBAED;oBACI,sCAAsC;oBACtC,oEAAoE;oBACpE,oEAAoE;oBACpE,uFAAuF;oBACvF,kBAAkB;iBACrB;aACJ;SACJ;IACL,CAAC;IAtCgB,eAAe;QAFnC,OAAO;OAEa,eAAe,CAwCnC;IAAD,sBAAC;CAxCD,AAwCC,CAxC4C,EAAE,CAAC,SAAS,GAwCxD;kBAxCoB,eAAe","file":"","sourceRoot":"/","sourcesContent":["import { JSGenQrcode } from \"../JsTool/JSGenQrcode\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\n\nexport default class QRCodeComponent extends cc.Component \n{\n\n    public Gen(url:string)\n    {\n        let graphic = this.node.getComponent(cc.Graphics);\n        if(graphic == null)\n        {\n            graphic = this.node.addComponent(cc.Graphics);\n        }\n        graphic.clear();\n        graphic.fillColor = cc.Color.BLACK;\n        let size = this.node.width;\n        let data = JSGenQrcode.Gen(url);\n        let num = data.length;\n        var tileW = size / num;\n\t\tvar tileH = size / num;\n        for(let row=0;row<num;row++)\n        {\n            for(let col=0;col<num;col++)\n            {\n                if(data[row][col])\n                {\n                    var w = (Math.ceil((col + 1) * tileW) - Math.floor(col * tileW));\n                    var h = (Math.ceil((row + 1) * tileW) - Math.floor(row * tileW));\n                    graphic.rect(Math.round(col * tileW) - size / 2, size - tileH - Math.round(row * tileH) - size / 2, w, h);\n                    graphic.fill();\n                }\n                else\n                {\n                    // graphic.fillColor = cc.Color.WHITE;\n                    // var w = (Math.ceil((col + 1) * tileW) - Math.floor(col * tileW));\n                    // var h = (Math.ceil((row + 1) * tileW) - Math.floor(row * tileW));\n                    // graphic.rect(Math.round(col * tileW), size - tileH - Math.round(row * tileH), w, h);\n                    // graphic.fill();\n                }\n            }\n        }\n    }\n\n}\n"]}