{"version":3,"sources":["assets\\Scripts\\Network\\Socket\\TCPNetwork.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import TCPSession from \"./TCPSession\";\nimport ccC from \"../../Tools/ccC\";\n// import Global from \"../../Global/Global\";\n\n/*tcp对话编号 用SessionID来区分*/\nexport enum TCPSessionID\n{\n    Hall   = 1,\n    // Battle = 2,\n}\n\n//管理session集合字典的单例 向外提供访问session的接口哦\nexport default class TCPNetwork \n{\n    //\n    private static m_Instance:TCPNetwork;\n    //回话字典\n    private sessions:{[sessionID:number]:TCPSession} = {};\n    //监听id\n    private listenID:number = 0;\n    \n    //\n    public static GetInstance():TCPNetwork\n    {\n        if(this.m_Instance == null)\n        {\n            this.m_Instance = new TCPNetwork();\n        }\n        return this.m_Instance;\n    }\n\n\n    //退出或者重登时候清理（关闭）玩家的网络session对话//\n    public Clean()\n    {\n        for(let sessionID in this.sessions)\n        {\n            this.sessions[sessionID].Clean();\n        }\n        this.sessions = {};\n        this.listenID = 0;\n    }\n\n    //实例化session对话\n    public Init(sessionID:TCPSessionID)\n    {\n        if(this.sessions[sessionID] != null)\n        {\n            cc.error(\"sessionID \" + sessionID + \" 已经初始化\");\n            return;\n        }\n        this.sessions[sessionID] = new TCPSession();\n        this.sessions[sessionID].Init(sessionID);\n    }\n\n    //连接服务器-》成功 失败回调。\n    public Connect(sessionID,ip, port,funcSuccess,funcFail)\n    {\n        // if(Global.showLog == true)\n        //     cc.log(\"$$IP=\" + ip + \"PORT=\"+port);\n        if(this.sessions[sessionID] != null)\n        {\n            this.sessions[sessionID].Connect(ip, port,funcSuccess,funcFail);\n        }\n    }\n\n    //退出服务器->\n    public Disconnect(sessionID)\n    {\n        if(this.sessions[sessionID] != null)\n        {\n            this.sessions[sessionID].Disconnect();\n        }\n    }\n\n    //双向协议(发送接收)(协议9003成功发送则会收到协议9003返回的数据)\n    public Send(sessionID,msgID,data,successCallback:(data:Uint8Array)=>void,failCallback:(errMsg:string)=>void,hideNetworkingLoading=false)\n    {\n        if(this.sessions[sessionID] != null)\n        {\n            this.sessions[sessionID].Send(msgID,data,successCallback,failCallback,hideNetworkingLoading);\n        }\n    }\n\n\n    //根据小游戏类型==双向协议(发送接收)(协议9003成功发送则会收到协议9003返回的数据)\n    // public SendWithGameType(gameType,sessionID,msgID,data,successCallback,failCallback = null,hideNetworkingLoading = false)\n    // {\n    //     if(this.sessions[sessionID] != null)\n    //     {\n    //         this.sessions[sessionID].SendWithGameType(gameType,msgID,data,successCallback,failCallback,hideNetworkingLoading);\n    //     }\n    // }\n\n    //单向协议(只发送 不管接收)\n    public SendOneWay(sessionID,msgID,data)\n    {\n        if(this.sessions[sessionID] != null)\n        {\n            this.sessions[sessionID].SendOneWay(msgID,data);\n        }\n    }\n\n    //根据小游戏类型==发送单向协议(只发送 不管接收)\n    // public SendOneWayWithGameType(gameType,sessionID,msgID,data)\n    // {\n    //     if(this.sessions[sessionID] != null)\n    //     {\n    //         this.sessions[sessionID].SendOneWayWithGameType(gameType,msgID,data);\n    //     }\n    // }\n\n    //某个session对话 监听某个协议id\n    public ListenMsg(sessionID,msgID,func)\n    {\n        if(this.sessions[sessionID] != null)\n        {\n            this.sessions[sessionID].ListenMsg(msgID,func);\n        }\n    }\n\n    //根据游戏类型划分消息id//\n    // public ListenMsgWithGameType(gameType,sessionID,msgID,func)\n    // {\n    //     if(this.sessions[sessionID] != null)\n    //     {\n    //         this.sessions[sessionID].ListenMsgWithGameType(gameType,msgID,func);\n    //     }\n    // }\n\n    ///重新发送挂起来的消息？//\n    public ResendHangOnMsg(sessionID)\n    {\n        if(this.sessions[sessionID] != null)\n        {\n            this.sessions[sessionID].ResendHangOnMsg();\n        }\n    }\n\n    ///一个会话session绑定他的新gameType\n    // public SetCurrentGameType(sessionID,gameType)\n    // {\n    //     if(this.sessions[sessionID] != null)\n    //     {\n    //         this.sessions[sessionID].SetCurrentGameType(gameType);\n    //     }\n    // }\n\n    ///一个会话session刷新他的ip和port\n    // public RefreshIPAndPort(sessionID,ip, port)\n    // {\n    //     if(this.sessions[sessionID] != null)\n    //     {\n    //         this.sessions[sessionID].RefreshIPAndPort(ip, port);\n    //     }\n    // }\n\n    ///握手失败之后的重连操作(比如登陆)\n    // public ReConnectWhenHandShakeFail(sessionID)\n    // {\n    //     if(this.sessions[sessionID] != null)\n    //     {\n    //         this.sessions[sessionID].ReConnectWhenHandShakeFail();\n    //     }\n    // }\n\n    //设置\n    // public SetUidToker(sessionID,uid,token)\n    // {\n    //     if(this.sessions[sessionID] != null)\n    //     {\n    //         this.sessions[sessionID].SetUidToker(uid,token);\n    //     }\n    // }\n}"]}