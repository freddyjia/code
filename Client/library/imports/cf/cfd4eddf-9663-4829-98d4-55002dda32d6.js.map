{"version":3,"sources":["assets\\Scripts\\Modules\\ViewConfigs.ts"],"names":[],"mappings":";;;;;;AAAA,6CAA0C;AAE1C;IAAA;IAgBA,CAAC;IAbiB,gBAAI,GAAlB;QACI,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QAEzB,iCAAiC;QACjC,IAAI,CAAC,cAAc,CAAC,uBAAS,CAAC,kBAAkB,CAAC,GAAG,IAAI,cAAc,CAAC,uBAAS,CAAC,kBAAkB,EAAE,aAAa,CAAC,KAAK,EAAE,0BAA0B,EAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACxK,IAAI,CAAC,cAAc,CAAC,uBAAS,CAAC,gBAAgB,CAAC,GAAG,IAAI,cAAc,CAAC,uBAAS,CAAC,gBAAgB,EAAE,aAAa,CAAC,OAAO,EAAE,wBAAwB,EAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QACzK,IAAI,CAAC,cAAc,CAAC,uBAAS,CAAC,SAAS,CAAC,GAAG,IAAI,cAAc,CAAC,uBAAS,CAAC,SAAS,EAAE,aAAa,CAAC,KAAK,EAAE,iBAAiB,EAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC7I,IAAI,CAAC,cAAc,CAAC,uBAAS,CAAC,OAAO,CAAC,GAAG,IAAI,cAAc,CAAC,uBAAS,CAAC,OAAO,EAAE,aAAa,CAAC,QAAQ,EAAE,oBAAoB,EAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IACnJ,CAAC;IAEa,yBAAa,GAA3B,UAA4B,QAAQ;QAChC,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IAdc,0BAAc,GAA2C,EAAE,CAAC;IAe/E,kBAAC;CAhBD,AAgBC,IAAA;kBAhBoB,WAAW;AAkBhC,gBAAgB;AAChB;;GAEG;AACH,IAAY,aAKX;AALD,WAAY,aAAa;IACrB,yDAAY,CAAA;IACZ,uDAAW,CAAA;IACX,mDAAS,CAAA;IACT,yDAAY,CAAA;AAChB,CAAC,EALW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAKxB;AAED,UAAU;AACV,IAAY,YAIX;AAJD,WAAY,YAAY;IACpB,2DAAc,CAAA;IACd,yDAAa,CAAA;IACb,+CAAQ,CAAA,CAAA,gBAAgB;AAC5B,CAAC,EAJW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAIvB;AAED;IAMI;;;;;;OAMG;IACH,wBAAY,QAAgB,EAAE,KAAoB,EAAE,UAAkB,EAAC,YAAyB;QAC5F,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACrC,CAAC;IACL,qBAAC;AAAD,CAnBA,AAmBC,IAAA;AAnBY,wCAAc","file":"","sourceRoot":"/","sourcesContent":["import { ViewNames } from \"./MVCRegister\";\n\nexport default class ViewConfigs {\n    private static dicViewConfigs: { [viewName: string]: ViewConfigData } = {};\n\n    public static Init() {\n        this.dicViewConfigs = {};\n\n        //------------>  在这里添加 viewconfig\n        this.dicViewConfigs[ViewNames.ViewOpenNetworking] = new ViewConfigData(ViewNames.ViewOpenNetworking, LayerOrderNum.UITop, \"/Prefab/UIOpenNetworking\",LoadingStyle.None);\n        this.dicViewConfigs[ViewNames.ViewDialogNormal] = new ViewConfigData(ViewNames.ViewDialogNormal, LayerOrderNum.UIPopup, \"/Prefab/UIDialogNormal\",LoadingStyle.PopWindow);\n        this.dicViewConfigs[ViewNames.ViewToast] = new ViewConfigData(ViewNames.ViewToast, LayerOrderNum.UITop, \"/Prefab/UIToast\",LoadingStyle.None);\n        this.dicViewConfigs[ViewNames.ViewApp] = new ViewConfigData(ViewNames.ViewApp, LayerOrderNum.UINormal, \"/Prefab/UIAppStart\",LoadingStyle.None);\n    }\n\n    public static GetViewConfig(viewName) {\n        return this.dicViewConfigs[viewName];\n    }\n}\n\n//表数据里面的layer字段值\n/**\n * UITopper 和 UITop 特性一样，只是层级高一级\n */\nexport enum LayerOrderNum {\n    UINormal = 1,\n    UIPopup = 2,\n    UITop = 3,\n    UITopper = 4,\n}\n\n//界面加载显示形式\nexport enum LoadingStyle {\n    FullScreen = 1,//全屏带加载条\n    PopWindow = 2,//弹窗加载\n    None = 3//不带加载,通常为top层所用\n}\n\nexport class ViewConfigData {\n    public viewName: string;\n    public layer: LayerOrderNum;\n    public prefabPath: string;\n    public loadingStyle:LoadingStyle;\n\n    /**\n     * \n     * @param viewName viewName\n     * @param layer 层级\n     * @param prefabPath prefabPath\n     * @param loadingStyle 是否显示加载界面，一般资源量多的需要显示加载界面\n     */\n    constructor(viewName: string, layer: LayerOrderNum, prefabPath: string,loadingStyle:LoadingStyle) {\n        this.viewName = viewName;\n        this.layer = layer;\n        this.prefabPath = prefabPath;\n        this.loadingStyle = loadingStyle;\n    }\n}\n"]}