{"version":3,"sources":["assets\\Scripts\\MVCFramework\\MessageCenter.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import ControllerManager from \"./ControllerManager\";\nimport { MVCRegister } from \"../Modules/MVCRegister\";\n\nexport default class MessageCenter \n{\n    private static dicMsgs: { [key: string]: { [key: number]: (message: string,msgBody:any) => void }  } = {};\n    private static dicMessageName: { [key: number]: string } = {};\n    private static dicMsgToController :{[key: string]: Array<string>} = {};\n    private static eventid:number = 0;\n\n    //从 controllername:msgs 转变为 msg:controllers\n    public static RegisterControllerMsgListening(controllerMsgsDic:{[key: string]: Array<string>})\n    {\n        this.dicMsgToController = {};\n        \n        // let dicMsgToController :{[key: string]: string} = {};\n        for(let controllerName in controllerMsgsDic)\n        {\n            let msgs:Array<string> = controllerMsgsDic[controllerName];\n            for(let i = 0;i<msgs.length;i++)\n            {\n                let msg = msgs[i];\n                if(this.dicMsgToController[msg] == null)\n                {\n                    this.dicMsgToController[msg] = new Array<string>();\n                }\n                this.dicMsgToController[msg].push(controllerName);\n            }\n        }\n    }\n    \n    public static Clean()\n    {\n        this.dicMsgs = {};\n        this.dicMessageName = {};\n        this.dicMsgToController = {};\n        this.eventid = 0;\n    }\n\n    public static Init()\n    {\n        //todo\n        this.RegisterControllerMsgListening(MVCRegister.dicControllerMsgListening);\n    }\n\n    public static SendMessage(message:string,msgBody?:any)\n    {\n        if(this.dicMsgs[message] != null)\n        {\n            let funcs = this.dicMsgs[message];\n            for(let eventid in funcs)\n            {\n                if(funcs[eventid] != null)\n                    funcs[eventid](message,msgBody);\n            }\n        }\n\n        if(this.dicMsgToController[message] != null)\n        {\n            let controllers = this.dicMsgToController[message];\n            for(let i = 0;i<controllers.length;i++)\n            {\n                ControllerManager.OnReceiveMessage(controllers[i],message,msgBody)\n            }\n        }\n    }\n\n    public static AddListener(message:string,func:(string,any) => void):number\n    {\n        this.eventid ++;\n\n        if(this.dicMsgs[message] == null)\n        {\n            let funcs:{ [key: number]: (string,any) => void } = {};\n            this.dicMsgs[message] = funcs;\n        }\n        this.dicMsgs[message][this.eventid] = func;\n        this.dicMessageName[this.eventid] = message;\n        return this.eventid;\n    }\n\n    public static RemoveListener(eventid:number)\n    {\n        let message = this.dicMessageName[eventid];\n        if(this.dicMsgs[message] != null)\n        {\n            delete this.dicMsgs[message][eventid];\n            delete this.dicMessageName[eventid];\n        }\n    }\n}\n"]}